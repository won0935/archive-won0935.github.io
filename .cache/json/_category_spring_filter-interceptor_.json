{"data":{"site":{"siteMetadata":{"title":"Jay 기술 블로그","author":"won0935","siteUrl":"https://won0935.github.io"}},"markdownRemark":{"id":"6485a747-c368-5ae1-9237-93fc4275a1b3","excerpt":"Filter Filter란 Web Application에서 관리되는 영역으로써 Spring Boot Framework에서 Client로 부터 오는 요청/응답에 대해서 최초/최종 단계의 위치에 존재하며, 이를 통해서 요청/응답의 정보를 변경하거나, Spring…","html":"<h1 id=\"filter\" style=\"position:relative;\"><a href=\"#filter\" aria-label=\"filter permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filter</h1>\n<ul>\n<li>Filter란 <strong>Web Application</strong>에서 관리되는 영역으로써 Spring Boot Framework에서 Client로 부터 오는 요청/응답에 대해서 <strong>최초/최종 단계</strong>의 위치에 존재하며, 이를 통해서 요청/응답의 정보를 변경하거나, Spring에 의해서 데이터가 변환되기 전의 순수한 Client의 요청/응답 값을 확인 할 수 있다</li>\n<li><strong>유일하게 ServletRequest, ServletResponse의 객체를 변환</strong>할 수 있다</li>\n<li>주로 Spring Framework에서는 <strong>request/response의 logging 용도</strong>로 활용하거나, <strong>인증과 관련된 Logic</strong>들을 해당 Filter에서 처리한다</li>\n<li>이를 선/후 처리 함으로써, Service business logic과 분리 시킨다</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/199489021-f806825e-62f6-4b86-a435-32fde63fe491.png\" alt=\"image\"></p>\n<h1 id=\"interceptor\" style=\"position:relative;\"><a href=\"#interceptor\" aria-label=\"interceptor permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interceptor</h1>\n<ul>\n<li>Filter와 매우 유사한 형태로 존재 하지만, 차이점은 <strong>Spring Context</strong>에 등록</li>\n<li><strong>AOP와 유사한 기능</strong>을 제공할 수 있으며, 주로<strong>인증 단계</strong>를 처리 하거나, <strong>Logging</strong>를 하는데 사용한다</li>\n<li>이를 선/후 처리 함으로써, Service business logic과 분리 시킨다</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/199489141-57932519-ce26-4a24-a6d0-de3c557ed44f.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/199489240-3748cbef-966b-4717-a118-18253a4cc0fc.png\" alt=\"image\"></p>","tableOfContents":"<ul>\n<li><a href=\"/category/spring/filter-interceptor/#filter\">Filter</a></li>\n<li><a href=\"/category/spring/filter-interceptor/#interceptor\">Interceptor</a></li>\n</ul>","frontmatter":{"title":"[Spring] Filter & Interceptor","description":"","date":"2022.10.10","emoji":"🚠","category":"spring"}}},"pageContext":{"slug":"/category/spring/filter-interceptor/","relatedPosts":[{"node":{"fields":{"slug":"/category/spring/spring-bean-lifecycle/"},"frontmatter":{"title":"[Spring] Spring Bean Lifecycle","date":"2022.10.25","emoji":"🔋","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/bean-post-processor/"},"frontmatter":{"title":"[Spring] BeanPostProcessor","date":"2022.10.20","emoji":"🛟","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/spring-configuration/"},"frontmatter":{"title":"[Spring] Spring Configuration","date":"2022.10.15","emoji":"🏖️","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/servlet/"},"frontmatter":{"title":"[Spring] Servlet","date":"2022.10.05","emoji":"🔭","category":"spring"}}}]}}