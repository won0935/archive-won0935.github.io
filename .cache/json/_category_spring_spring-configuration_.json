{"data":{"site":{"siteMetadata":{"title":"Jay 기술 블로그","author":"won0935","siteUrl":"https://won0935.github.io"}},"markdownRemark":{"id":"0bd68204-22b2-559e-85da-994b39855f15","excerpt":"**@Configuration이란**  어노테이션 안에는  어노테이션이 붙어있어서 이 붙어있는 클래스 역시 스프링의 빈으로 등록이 된다. 그럼에도 불구하고 스프링이 을 따로 만든 이유는 CGLib…","html":"<h1 id=\"configuration이란\" style=\"position:relative;\"><a href=\"#configuration%EC%9D%B4%EB%9E%80\" aria-label=\"configuration이란 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>*<strong>*@Configuration이란**</strong></h1>\n<p><code class=\"language-text\">@Configuration</code> 어노테이션 안에는 <code class=\"language-text\">@Component</code> 어노테이션이 붙어있어서 <code class=\"language-text\">@Configuration</code>이 붙어있는 클래스 역시 스프링의 빈으로 등록이 된다.</p>\n<p>그럼에도 불구하고 스프링이 <code class=\"language-text\">@Configuration</code>을 따로 만든 이유는 <strong>CGLib으로 프록시 패턴을 적용해 수동으로 등록하는 스프링 빈이 반드시 싱글톤으로 생성됨을 보장하기 위해서</strong>이다.</p>\n<p>스프링은 <code class=\"language-text\">@Configuration</code>이 있는 클래스를 객체로 생성할 때 <strong>CGLib 라이브러리를 사용해 프록시 패턴을 적용</strong>한다. 그래서 <code class=\"language-text\">@Bean</code>이 있는 메소드를 여러 번 호출하여도 항상 동일한 객체를 반환하여 싱글톤을 보장한다.</p>\n<p>CGLib은 상속을 <strong>사용해서 프록시를 구현</strong>한다.</p>\n<h1 id=\"component-vs-configuration\" style=\"position:relative;\"><a href=\"#component-vs-configuration\" aria-label=\"component vs configuration permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Component vs @Configuration</h1>\n<p>스프링의 <code class=\"language-text\">@ComponentScan</code>은 서버 실행시 <code class=\"language-text\">@Component</code>, <code class=\"language-text\">@Configuration</code> 어노테이션을 이용하여 사용자가 생성한 클래스들을 지정하여 등록한다.</p>\n<h3 id=\"component\" style=\"position:relative;\"><a href=\"#component\" aria-label=\"component permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@Component</code></h3>\n<ul>\n<li><strong>수동</strong>으로 스프링 컨테이너에 빈을 등록하는 방법</li>\n<li>개발자가 직접 <strong>제어가 불가능</strong>한 라이브러리를 빈으로 등록할 때 불가피하게 사용</li>\n<li>유지보수성을 높이기 위해 애플리케이션 <strong>전범위적으로 사용되는 클래스</strong>나 다형성을 활용하여 <strong>여러 구현체를 빈으로 등록 할 때</strong> 사용</li>\n<li>1개 이상의 <code class=\"language-text\">@Bean</code>을 제공하는 클래스의 경우 반드시 <code class=\"language-text\">@Configuration</code>을 명시해 주어야 싱글톤이 보장됨</li>\n</ul>\n<h3 id=\"configuration--bean\" style=\"position:relative;\"><a href=\"#configuration--bean\" aria-label=\"configuration  bean permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@Configuration + @Bean</code></h3>\n<ul>\n<li><strong>자동</strong>으로 스프링 컨테이너에 빈을 등록하는 방법</li>\n<li>스프링의 <strong>컴포넌트 스캔</strong> 기능이 <code class=\"language-text\">@Component</code> 어노테이션이 있는 클래스를 자동으로 찾아서 빈으로 등록함</li>\n<li>대부분의 경우 <code class=\"language-text\">@Component</code>를 이용한 자동 등록 방식을 사용하는 것이 좋음</li>\n<li><code class=\"language-text\">@Component</code> 하위 어노테이션으로 <code class=\"language-text\">@Configuration</code>, <code class=\"language-text\">@Controller</code>, <code class=\"language-text\">@Service</code>, <code class=\"language-text\">@Repository</code> 등이 있음</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/199490319-1d82b2cb-c591-4baf-b4c5-387dad7c1469.png\" alt=\"image\"></p>","tableOfContents":"<ul>\n<li><a href=\"/category/spring/spring-configuration/#configuration%EC%9D%B4%EB%9E%80\">*<strong>*@Configuration이란**</strong></a></li>\n<li>\n<p><a href=\"/category/spring/spring-configuration/#component-vs-configuration\">@Component vs @Configuration</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/spring/spring-configuration/#component\"><code class=\"language-text\">@Component</code></a></li>\n<li><a href=\"/category/spring/spring-configuration/#configuration--bean\"><code class=\"language-text\">@Configuration + @Bean</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[Spring] Spring Configuration","description":"","date":"2022.10.15","emoji":"🏖️","category":"spring"}}},"pageContext":{"slug":"/category/spring/spring-configuration/","relatedPosts":[{"node":{"fields":{"slug":"/category/spring/pessimistic-optimistic-lock/"},"frontmatter":{"title":"[Lock] 동시성이슈에 대한 해결 방법","date":"2023.01.03","emoji":"🔒","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/jdk-dynamic-proxy-vs-cglib/"},"frontmatter":{"title":"[Spring] JDK Dynamic Proxy VS CGLIB","date":"2022.10.30","emoji":"🪔","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/spring-bean-lifecycle/"},"frontmatter":{"title":"[Spring] Spring Bean Lifecycle","date":"2022.10.25","emoji":"🔋","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/bean-post-processor/"},"frontmatter":{"title":"[Spring] BeanPostProcessor","date":"2022.10.20","emoji":"🛟","category":"spring"}}}]}}