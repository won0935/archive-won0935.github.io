{"expireTime":9007200899647823000,"key":"transformer-remark-markdown-toc-dd1d093ff60071ff66d792ef5fd2247f-gatsby-remark-code-titlesgatsby-remark-embed-youtubegatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-custom-blocksgatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-{\"heading\":null,\"maxDepth\":6,\"absolute\":true,\"pathToSlugField\":\"fields.slug\"}-","val":"<ul>\n<li><a href=\"/category/design-pattern/composite/#-%EC%BB%B4%ED%8F%AC%EC%A7%80%ED%8A%B8-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80\">🌲 컴포지트 패턴이란</a></li>\n<li>\n<p><a href=\"/category/design-pattern/composite/#%EF%B8%8F-%EC%BB%B4%ED%8F%AC%EC%A7%80%ED%8A%B8-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%9D%B4%ED%95%B4\">⛵️ 컴포지트 패턴의 이해</a></p>\n<ul>\n<li>\n<p><a href=\"/category/design-pattern/composite/#-%ED%99%9C%EC%9A%A9-%EC%98%88%EC%8B%9C\">🚀 활용 예시</a></p>\n<ul>\n<li><a href=\"/category/design-pattern/composite/#component-%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%ED%98%84\"><code class=\"language-text\">Component</code> 추상클래스 구현</a></li>\n<li><a href=\"/category/design-pattern/composite/#component-%EB%A5%BC-%EC%83%81%EC%86%8D%EB%B0%9B%EB%8A%94-leaf-%EA%B0%9D%EC%B2%B4-%EA%B5%AC%ED%98%84\"><code class=\"language-text\">Component</code> 를 상속받는 <code class=\"language-text\">Leaf</code> 객체 구현</a></li>\n<li><a href=\"/category/design-pattern/composite/#component-%EB%A5%BC-%EC%83%81%EC%86%8D%EB%B0%9B%EB%8A%94-composite-%EA%B0%9D%EC%B2%B4-%EA%B5%AC%ED%98%84\"><code class=\"language-text\">Component</code> 를 상속받는 <code class=\"language-text\">Composite</code> 객체 구현</a></li>\n<li><a href=\"/category/design-pattern/composite/#client-%EA%B0%9D%EC%B2%B4-%EA%B5%AC%ED%98%84\"><code class=\"language-text\">Client</code> 객체 구현</a></li>\n<li><a href=\"/category/design-pattern/composite/#%ED%85%8C%EC%8A%A4%ED%8A%B8\">테스트</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/design-pattern/composite/#-%EC%BB%B4%ED%8F%AC%EC%A7%80%ED%8A%B8%ED%8C%A8%ED%84%B4-vs-%EB%8B%A8%EC%9D%BC%EC%97%AD%ED%95%A0%EC%9B%90%EC%B9%99\">🧨 컴포지트패턴 vs 단일역할원칙</a></li>\n<li>\n<p><a href=\"/category/design-pattern/composite/#-%EC%BB%B4%ED%8F%AC%EC%A7%80%ED%8A%B8--%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%84%B4-%EC%A0%81%EC%9A%A9\">🛠 컴포지트 + 이터레이터 패턴 적용</a></p>\n<ul>\n<li>\n<p><a href=\"/category/design-pattern/composite/#%EC%BB%B4%ED%8F%AC%EC%A7%80%ED%8A%B8-%ED%8C%A8%ED%84%B4-%EB%82%B4%EC%97%90%EC%84%9C-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%84%B4%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90\">컴포지트 패턴 내에서 이터레이터 패턴을 활용해보자</a></p>\n<ul>\n<li><a href=\"/category/design-pattern/composite/#composite-leaf-%EA%B0%9D%EC%B2%B4%EC%97%90-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%EC%A0%81%EC%9A%A9\"><code class=\"language-text\">Composite</code>, <code class=\"language-text\">Leaf</code> 객체에 이터레이터 적용</a></li>\n<li><a href=\"/category/design-pattern/composite/#nulliterator-%EB%9E%80\"><code class=\"language-text\">NullIterator</code> 란</a></li>\n<li><a href=\"/category/design-pattern/composite/#iterator-%EA%B5%AC%ED%98%84\"><code class=\"language-text\">Iterator</code> 구현</a></li>\n<li><a href=\"/category/design-pattern/composite/#iterator-%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%9C-client-%EA%B5%AC%ED%98%84\"><code class=\"language-text\">Iterator</code> 를 적용한 <code class=\"language-text\">Client</code> 구현</a></li>\n</ul>\n</li>\n<li><a href=\"/category/design-pattern/composite/#try-%EB%AC%B8%EC%9D%84-%EC%93%B4-%EC%9D%B4%EC%9C%A0\">try 문을 쓴 이유</a></li>\n</ul>\n</li>\n</ul>"}