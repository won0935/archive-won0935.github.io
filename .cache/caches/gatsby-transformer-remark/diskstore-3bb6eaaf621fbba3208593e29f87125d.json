{"expireTime":9007200906637068000,"key":"transformer-remark-markdown-html-3bcc221a2d65972f9d85513e7ffde761-gatsby-remark-code-titlesgatsby-remark-embed-youtubegatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-custom-blocksgatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h1 id=\"범위지정함수scope-function란\" style=\"position:relative;\"><a href=\"#%EB%B2%94%EC%9C%84%EC%A7%80%EC%A0%95%ED%95%A8%EC%88%98scope-function%EB%9E%80\" aria-label=\"범위지정함수scope function란 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>범위지정함수(scope function)란?</h1>\n<p>범위지정함수는 <strong>특정 객체에 대한 작업을 블록 안에 넣어 실행할 수 있도록 하는 함수</strong>이다.\n<strong>블록은 특정 객체에 대해 할 작업의 범위가 되며, 따라서 범위지정함수</strong>라 부른다.\n특정 객체에 대한 작업을 블록안에 넣게 되면 가독성이 증가하여 유지 보수가 쉬워진다.\n코틀린에서는 <code class=\"language-text\">apply</code>, <code class=\"language-text\">run</code>, <code class=\"language-text\">with</code>, <code class=\"language-text\">let</code>, <code class=\"language-text\">also</code> 총 5가지 기본적인 범위지정함수를 지원한다.</p>\n<hr>\n<h1 id=\"함수별-정리\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EB%B3%84-%EC%A0%95%EB%A6%AC\" aria-label=\"함수별 정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수별 정리</h1>\n<p><code class=\"language-text\">apply</code>, <code class=\"language-text\">run</code>, <code class=\"language-text\">with</code>, <code class=\"language-text\">let</code>, <code class=\"language-text\">also</code> 에 대한 분류를 하면 다음과 같다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/167235461-ba8c84d1-9886-4f94-9a23-43109b0178ea.png\" alt=\"image\"></p>\n<p>아래의 data 클래스를 활용해 예시를 들어본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">var</span> name <span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">var</span> age <span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">var</span> temperature <span class=\"token operator\">:</span> Float <span class=\"token operator\">=</span> <span class=\"token number\">36.5f</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"apply\" style=\"position:relative;\"><a href=\"#apply\" aria-label=\"apply permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>apply</h2>\n<p><strong><code class=\"language-text\">apply</code>는 수신객체 내부 프로퍼티를 변경한 다음 수신 객체 자체를 반환하기 위해 사용되는 함수</strong>이다.\n따라서 객체 생성 시에 다양한 프로퍼티를 설정해야 하는 경우 자주 사용된다.</p>\n<p><code class=\"language-text\">apply</code>에서의 블록은 람다식의 수신 객체로 <code class=\"language-text\">apply</code>의 수신객체(<code class=\"language-text\">T</code>)를 지정하기 때문에 람다식 내부에서 수신객체에 대한 명시를 하지 않고 함수를 호출할 수 있게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> T<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>block <span class=\"token operator\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> T </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><code class=\"language-text\">apply</code>를 활용하면 다음의 방법으로 수신객체의 프로퍼티 지정이 가능하다.\n람다식의 수신객체가 <code class=\"language-text\">apply</code>의 수신객체이기 때문에 수신객체에 대한 명시를 생략하는 것이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> person <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n   name <span class=\"token operator\">=</span> <span class=\"token string\">\"Song\"</span>\n   age <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n   temperature <span class=\"token operator\">=</span> <span class=\"token number\">36.3f</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>프로퍼티 설정 시마다 person을 쓰지 않아도 되어 가독성이 좋다.\n자바의 builder 타입과 유사하다.</p>\n<h2 id=\"run\" style=\"position:relative;\"><a href=\"#run\" aria-label=\"run permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>run</h2>\n<p><strong><code class=\"language-text\">run</code>은 <code class=\"language-text\">apply</code>와 똑같이 동작하지만 수신 객체를 return 하지 않고, <code class=\"language-text\">run</code> 블록의 마지막 라인을 return</strong> 하는 범위지정 함수이다.\n이는 <strong>수신객체에 대해 특정한 동작을 수행한 후 결과값을 리턴 받아야 할 경우</strong> 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span> T<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>block <span class=\"token operator\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> R<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> R </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>예를 들어 위 <code class=\"language-text\">Person</code> 객체의 체온을 체크해서 정상인지를 확인하다고 해보자.\n만약 사람의 체온이 37.5도 이상이면 비정상으로 다음과 같이 마지막줄을 return 받을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    age <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    temperature <span class=\"token operator\">=</span> <span class=\"token number\">36.5f</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">isSick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> temperature <span class=\"token operator\">></span> <span class=\"token number\">37.5f</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> person <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Song\"</span><span class=\"token punctuation\">,</span> age <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> temperature <span class=\"token operator\">=</span> <span class=\"token number\">36.3f</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> isPersonSick <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">run</span> <span class=\"token punctuation\">{</span>\n        temperature <span class=\"token operator\">=</span> <span class=\"token number\">37.2f</span>\n        <span class=\"token function\">isSick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//return 값</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PersonIsSick : <span class=\"token interpolation variable\">$isPersonSick</span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/167236105-84dd1876-2d86-44e2-89cc-0ac443a4816d.png\" alt=\"image\"></p>\n<p><code class=\"language-text\">run</code>은 수신객체 없이도 동작할 수 있다.\n다만 수신객체 없이 <code class=\"language-text\">run</code>을 사용하면 내부에 수신객체를 명시해줘야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> person <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Song\"</span><span class=\"token punctuation\">,</span> age <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> temperature <span class=\"token operator\">=</span> <span class=\"token number\">36.3f</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> isPersonSick <span class=\"token operator\">=</span> run <span class=\"token punctuation\">{</span>\n    person<span class=\"token punctuation\">.</span>temperature <span class=\"token operator\">=</span> <span class=\"token number\">37.2f</span>\n    person<span class=\"token punctuation\">.</span><span class=\"token function\">isSick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"with\" style=\"position:relative;\"><a href=\"#with\" aria-label=\"with permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>with</h2>\n<p><strong><code class=\"language-text\">with</code>은 수신객체에 대한 작업 후 마지막 라인을 return 한다.\n<code class=\"language-text\">run</code>과 완전히 똑같이 동작한다.\n다른 점은 <code class=\"language-text\">run</code>은 확장 함수로 사용되지만 <code class=\"language-text\">with</code>은 수신객체를 파라미터로 받아 사용한다는 점이다.</strong>\n<code class=\"language-text\">run</code>을 사용하는 것이 깔끔하므로 실제로는 거의 사용하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span> <span class=\"token function\">with</span><span class=\"token punctuation\">(</span>receiver <span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> block <span class=\"token operator\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> R<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> R </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>위의 예시에 with을 사용하면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> person <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Song\"</span><span class=\"token punctuation\">,</span> age <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> temperature <span class=\"token operator\">=</span> <span class=\"token number\">36.3f</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> isPersonSick <span class=\"token operator\">=</span> <span class=\"token function\">with</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        temperature <span class=\"token operator\">=</span> <span class=\"token number\">37.2f</span>\n        <span class=\"token function\">isSick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//return 값</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PersonIsSick : <span class=\"token interpolation variable\">$isPersonSick</span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"let\" style=\"position:relative;\"><a href=\"#let\" aria-label=\"let permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>let</h2>\n<p><strong><code class=\"language-text\">let</code>은 수신객체를 이용해 작업을 한 후 마지막 줄을 return할 때 사용한다.\n<code class=\"language-text\">run</code>이나 <code class=\"language-text\">with</code>과는 수신객체를 접근할 때 it을 사용해야 한다는 점만 다르고 나머지 동작은 같다.</strong>\n하지만 실제 사용에서는 조금 차이가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span> T<span class=\"token punctuation\">.</span><span class=\"token function\">let</span><span class=\"token punctuation\">(</span>block <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> R<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> R </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><code class=\"language-text\">let</code>은 다음과 같은 경우 사용된다.</p>\n<ul>\n<li><strong>null check 이후 코드를 실행</strong>해야 하는 경우</li>\n<li><strong>nullable한 수신객체를 다른 타입의 변수로 변환</strong>해야 하는 경우</li>\n</ul>\n<p><strong>요약하면 nullable한 값을 처리해야 할 때는 let를 사용해야 한다.</strong></p>\n<p><code class=\"language-text\">let</code>을 이용해 null check를 하려면 아래와 같이 null check 연산잔인 <code class=\"language-text\">?</code>와 함께 사용해야 한다.\n<code class=\"language-text\">?.let</code>을 사용하게 되면 <code class=\"language-text\">let</code>의 블록은 수신객체가 null이 아닐때만 수행된다.\n따라서 <code class=\"language-text\">let</code> 블록에서의 <code class=\"language-text\">it</code> 타입은 nullable 하지 않은 타입이 된다.</p>\n<p>예를들어 사람이 null이 아닐 때만 영화를 예매해야 한다고 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> person <span class=\"token operator\">:</span> Person<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">val</span> isReserved <span class=\"token operator\">=</span> person<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">:</span> Person <span class=\"token operator\">-></span>\n        <span class=\"token function\">reserveMovie</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>person은 nullable한 객체 (Person?)였는데, <code class=\"language-text\">?.let</code>을 사용하면 <code class=\"language-text\">let</code> 블록 내부에서는 더이상 nullable하지 않은 it : Person 이 된다.\n즉, null check 후 코드가 실행된 것을 확인할 수 있다.\n또한 person을 사용해 영화를 예매하고 결과값을 return받았으므로 Person객체가 다른 타입의 변수로 변환된 것 또한 확인할 수 있다.</p>\n<p><em>물론 <code class=\"language-text\">let</code>은 nullable하지 않은 대상에 대해서도 사용할 수 있지만, 실무에서는 nullable한 값이 아닐 경우에는 <code class=\"language-text\">run</code>을 사용하는 것이 일반적이다.</em></p>\n<h2 id=\"also\" style=\"position:relative;\"><a href=\"#also\" aria-label=\"also permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>also</h2>\n<p><code class=\"language-text\">also</code>는 <code class=\"language-text\">apply</code>와 마찬가지로 수신객체 자신을 반환한다.\n<code class=\"language-text\">apply</code>가 프로퍼티를 세팅 후 객체 자체를 반환 하는데만 사용된다면, <code class=\"language-text\">also</code>는 프로퍼티 세팅 뿐만아니라 객체에 대한 추가적인 작업(로깅, 유효성 검증)을 한 후 객체를 반환할 때 사용된다.</p>\n<p><code class=\"language-text\">also</code>에서의 블록은 람다식의 입력 파라미터로 <code class=\"language-text\">also</code>의 수신객체를(<code class=\"language-text\">T</code>)를 지정하기 때문에 내부에서 수신객체를 사용하기 위해서는 <code class=\"language-text\">it</code>을 사용해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> T<span class=\"token punctuation\">.</span><span class=\"token function\">also</span><span class=\"token punctuation\">(</span>block <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> T </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><code class=\"language-text\">also</code>가 사용되는 예는 다음과 같다.</p>\n<ul>\n<li>number을 반환받는 함수를 만든 후 해당 number의 숫자를 올리고 싶을 때 다음과 같이 number을 return한 다음 number의 값을 올린다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> number <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">getAndIncreaseNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">also</span><span class=\"token punctuation\">{</span>\n    number<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first number <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span><span class=\"token function\">getAndIncreaseNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second number <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span><span class=\"token function\">getAndIncreaseNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/167237080-8fff8aa1-e7aa-4fc4-baf0-3933ef0aa810.png\" alt=\"image\"></p>\n<ul>\n<li><strong>주의할 점은 객체를 사용할 때는 객체의 주소값을 return하는 것이기 때문에 객체의 프로퍼티가 바뀌면 <code class=\"language-text\">also</code>에서 return하는 객체의 프로퍼티 또한 바뀐다는 점이다</strong>.\n따라서 객체의 프로퍼티를 다음과 같이 바꾸어 버릴 경우, 바뀐 프로퍼티가 객체의 값이 되어버린다.\n분명 age가 29에서 시작됐는데 30으로 나오는 것을 볼 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> person <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Song\"</span><span class=\"token punctuation\">,</span> age <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> temperature <span class=\"token operator\">=</span> <span class=\"token number\">36.3f</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">getAndIncreaseNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">also</span><span class=\"token punctuation\">{</span>\n    person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first number <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span><span class=\"token function\">getAndIncreaseNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second number <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span><span class=\"token function\">getAndIncreaseNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/167237215-9d922e45-ca96-4d75-9785-0742407b8a43.png\" alt=\"image\"></p>\n<p>따라서 보통 객체에 대해 같은 용도로 사용하고자 할 때는 <code class=\"language-text\">copy</code>를 사용해야 한다. 그래야 바뀌지 않은 객체가 return됨을 보장할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> person <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Song\"</span><span class=\"token punctuation\">,</span> age <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> temperature <span class=\"token operator\">=</span> <span class=\"token number\">36.3f</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">getAndIncreaseNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">also</span><span class=\"token punctuation\">{</span>\n    person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first number <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span><span class=\"token function\">getAndIncreaseNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second number <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span><span class=\"token function\">getAndIncreaseNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/167237241-9f3343ac-d2af-4252-b37e-8bff1f6a0f3f.png\" alt=\"image\"></p>\n<p>이러한 문제 때문에 <code class=\"language-text\">also</code>는 거의 사용되지 않고, 사용할 때는 프로퍼티를 바꾸지 않고 동작을 추가적으로 해야하는 경우(로깅, 검증)등에서 사용된다.</p>"}