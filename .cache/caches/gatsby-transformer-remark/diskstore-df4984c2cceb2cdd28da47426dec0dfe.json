{"expireTime":9007200902427767000,"key":"transformer-remark-markdown-html-3a5757111d4a01f9a38e9f7371f7c7b4-gatsby-remark-code-titlesgatsby-remark-embed-youtubegatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-custom-blocksgatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h1 id=\"처리율-제한-장치의-설계\" style=\"position:relative;\"><a href=\"#%EC%B2%98%EB%A6%AC%EC%9C%A8-%EC%A0%9C%ED%95%9C-%EC%9E%A5%EC%B9%98%EC%9D%98-%EC%84%A4%EA%B3%84\" aria-label=\"처리율 제한 장치의 설계 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>처리율 제한 장치의 설계</h1>\n<blockquote>\n<p>API 요청횟수가 특정 임계치를 넘어가면 추가로 도달한 요청은 처리를 중단하는 것</p>\n</blockquote>\n<hr>\n<h2 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<ol>\n<li>DoS공격 방지</li>\n<li>비용절감</li>\n<li>서버 과부하 방지</li>\n</ol>\n<hr>\n<h1 id=\"처리율-제한-알고리즘\" style=\"position:relative;\"><a href=\"#%EC%B2%98%EB%A6%AC%EC%9C%A8-%EC%A0%9C%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"처리율 제한 알고리즘 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>처리율 제한 알고리즘</h1>\n<h2 id=\"토큰-버킷\" style=\"position:relative;\"><a href=\"#%ED%86%A0%ED%81%B0-%EB%B2%84%ED%82%B7\" aria-label=\"토큰 버킷 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>토큰 버킷</h2>\n<blockquote>\n<p>토큰을 발급하고 토큰의 갯수 만큼만 API 요청을 버킷에 담음\n버킷이 가득 찬 경우 API요청은 버려짐(overflow)</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138881073-2532be82-cc51-4872-a6be-f7e256b1a74e.png\" alt=\"image\"></p>\n<ul>\n<li>가장 간단하고 폭넓게 사용됨(아마존 등)</li>\n<li>메모리 효율성 높음</li>\n<li>버킷크기:토큰공급률 비율 튜닝이 관건</li>\n</ul>\n<hr>\n<h2 id=\"누출-버킷\" style=\"position:relative;\"><a href=\"#%EB%88%84%EC%B6%9C-%EB%B2%84%ED%82%B7\" aria-label=\"누출 버킷 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>누출 버킷</h2>\n<blockquote>\n<p>토큰 버킷 알고리즘과 유사하지만 처리율이 고정\n큐(FIFO)로 구현</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138881283-90475661-ca10-481f-a3fb-2e7e3cae0168.png\" alt=\"image\"></p>\n<ul>\n<li>\n<p>동작방식</p>\n<ol>\n<li>요청이 도착하면 큐가 가득 차 있는지 확인, 빈자리가 있는 경우 큐에 요청 추가</li>\n<li>큐가 가득 차있는 경우 새 요청은 버림</li>\n<li>지정된 시간마다 큐에서 요청을 꺼내어 처리</li>\n<li>토큰 버킷 알고리즘과 유사</li>\n<li>고정된 처리율을 가지고 있어 안정적 출력이 필요한 환경에 적합</li>\n<li>단시간에 많은 처리율이 들어올 경우 취약함</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"고정-윈도-카운터\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EC%A0%95-%EC%9C%88%EB%8F%84-%EC%B9%B4%EC%9A%B4%ED%84%B0\" aria-label=\"고정 윈도 카운터 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고정 윈도 카운터</h2>\n<ul>\n<li>\n<p>동작방식</p>\n<ol>\n<li>타임라인을 고정된 간격의 윈도로 나누고, 각 윈도마다 카운터를 붙임</li>\n<li>요청이 접수될 때마다 이 카운터의 값은 1씩 증가함</li>\n<li>이 카운터 값이 사전에 설정된 임계치에 도달하면 새로운 요청은\n새 윈도가 열릴 때 까지 버려짐</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138881425-aaf0ecc3-a73c-4007-9d36-3c9693f2062f.png\" alt=\"image\"></p>\n<ul>\n<li>메모리 효율 좋음</li>\n<li>윈도 경계에서 일시적으로 많은 트래픽이 몰려드는 경우, 기대했던 시스템의 처리 한도보다 많은 양의 요청을 처리하게 됨</li>\n</ul>\n<hr>\n<h2 id=\"이동-윈도-로그\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%8F%99-%EC%9C%88%EB%8F%84-%EB%A1%9C%EA%B7%B8\" aria-label=\"이동 윈도 로그 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이동 윈도 로그</h2>\n<blockquote>\n<p>고정 윈도 카운터 알고리즘의 윈도 경계 부분에서\n트래픽이 몰리는 경우를 보완하기 위한 알고리즘</p>\n</blockquote>\n<ul>\n<li>\n<p>동작방식</p>\n<ol>\n<li>요청의 타임스탬프를 추적함\n타임스탬프는 보통 Redis의 Sorted Set과 같은 정렬 집합 캐시에 보관</li>\n<li>새 요청이 오면 만료된 타임스탬프는 제거</li>\n<li>새 요청의 타임 스탬프를 로그에 추가</li>\n<li>로그의 크기가 허용치보다 같거나 작으면 요청을 시스템에 전달함\n그렇지 않은 경우 처리는 거부됨</li>\n<li>윈도 알고리즘의 처리율 한도를 넘지 않음</li>\n<li>다량의 메모리 사용, 거부된 요청의 타임스탬프도 보관하기 때문</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"이동-윈도-카운터\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%8F%99-%EC%9C%88%EB%8F%84-%EC%B9%B4%EC%9A%B4%ED%84%B0\" aria-label=\"이동 윈도 카운터 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이동 윈도 카운터</h2>\n<blockquote>\n<p>고정 윈도 카운터 + 이동 윈도 로그 </p>\n</blockquote>\n<ul>\n<li>이전 시간대의 평균 처리율에 따라 현재 윈도의 상태를 계산하므로 짧은 시간에 몰리는 트래픽에도 잘 대응</li>\n<li>메모리 효율이 좋음</li>\n<li>직전 시간의 추정치를 계산하기 때문에 기준이 느슨함, But 심각한 건 아님</li>\n</ul>\n<hr>\n<h1 id=\"프로세스\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\" aria-label=\"프로세스 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스</h1>\n<ol>\n<li>처리율 제한 규칙은 디스크에 보관한다.\n작업 프로세스는 수시로 규칙을 디스크에서 읽어 캐시에 저장한다.</li>\n<li>\n<p>클라이언트가 요청을 서버에 보내면 요청은 먼저 처리율 제한 미들웨어에 도달한다.\n카운터 및 마지막 요청의 타임스탬프를 레디스 캐시에서 가져온다. </p>\n<ul>\n<li>해당 요청이 처리율 제한에 걸리지 않은 경우 API서버로 보낸다.</li>\n<li>해당 요청이 처리율 제한에 걸렸다면 429(too many request) 에러를 클라이언트에 보낸다.\n한편 해당 요청은 그대로 버릴 수도 있고 메시지 큐에 저장할 수도 있다.</li>\n</ul>\n</li>\n</ol>"}