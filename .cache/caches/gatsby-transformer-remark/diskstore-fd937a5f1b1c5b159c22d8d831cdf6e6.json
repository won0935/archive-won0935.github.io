{"expireTime":9007200922132514000,"key":"transformer-remark-markdown-html-a0149d19d84694a3089523b9e2c83fb3-gatsby-remark-code-titlesgatsby-remark-embed-youtubegatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-custom-blocksgatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h1 id=\"서블릿servlet이란\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B8%94%EB%A6%BFservlet%EC%9D%B4%EB%9E%80\" aria-label=\"서블릿servlet이란 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서블릿(Servlet)이란?</h1>\n<blockquote>\n<p>서블릿(Servlet)이란 동적 웹 페이지를 만들 때 사용되는 <strong>자바 기반의 웹 애플리케이션 프로그래밍 기술</strong>이다. 쉽게 말해, <strong>“웹 서버 프로그래밍을 하기 위한 사양을 갖춘 자바 코드”</strong> 라고 할 수 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GenericServlet</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//...</span>\n       <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n       <span class=\"token comment\">//...</span>\n <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">HttpServlet</code> 클래스를 상속한 클래스 Servlet은 톰캣과 같은 <strong>Servlet Container</strong>에 의해 관리, 실행된다.</p>\n<p><strong>HTTP Server + Servlet Container</strong>가 웹 서버 역할에 필요한 대부분을 구현해두었고, 개발자는 Servlet을 만들어 HTTP 요청을 받아 처리하는 부분을 구현한다. 메서드를 참고하면 알 수 있듯 요청(Request)과 응답(Response) 즉, Http 웹 서버 기능 동작이 가능하다.</p>\n<blockquote>\n<p>톰캣(Tomcat) 이란</p>\n<blockquote>\n<p><strong>웹 애플리케이션 서버(WAS)중 하나</strong>로 <strong>Servlet Container, Servlet Engine</strong>이라고 표현할 수 있으며 Servlet을 관리한다.\n<strong>Servlet을 관리한다</strong>는 말은 <strong>클라이언트가 어떤 요청(Request)을 했을 때</strong>, <strong>어떤 Servlet을 실행할 것인지</strong> 제어해준다는 것이다. 톰캣은 Servlet을 관리해주는 주체이기 때문에 Servlet(<code class=\"language-text\">HttpServlet</code> 클래스를 상속한 클래스)이어야 한다.</p>\n</blockquote>\n</blockquote>\n<h1 id=\"서블릿의-생명주기\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B8%94%EB%A6%BF%EC%9D%98-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0\" aria-label=\"서블릿의 생명주기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서블릿의 생명주기</h1>\n<blockquote>\n<p>서블릿도 자바 클래스이므로 실행하면 초기화부터 서비스 수행 후 소멸하기까지의 과정을 거친다. 이 과정을 서블릿의 생명주기라하며 각 단계마다 호출되어 기능을 수행하는 콜백 메서드를 서블릿 생명주기 메서드라한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FirstServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"서블릿-생명주기-메서드\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B8%94%EB%A6%BF-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"서블릿 생명주기 메서드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서블릿 생명주기 메서드</h3>\n<p><strong>초기화 : <code class=\"language-text\">init()</code></strong></p>\n<ul>\n<li>서블릿 요청 시 맨 처음 한 번만 호출된다.</li>\n<li>서블릿 생성 시 초기화 작업을 주로 수행한다.</li>\n</ul>\n<p><strong>작업 수행 : <code class=\"language-text\">doGet()</code>, <code class=\"language-text\">doPost()</code></strong></p>\n<ul>\n<li>서블릿 요청 시 매번 호출된다.</li>\n<li>실제로 클라이언트가 요청하는 작업을 수행한다.</li>\n</ul>\n<p><strong>종료 : <code class=\"language-text\">destroy()</code></strong></p>\n<ul>\n<li>서블릿이 기능을 수행하고 메모리에서 소멸될 때 호출된다.</li>\n<li>서블릿의 마무리 작업을 주로 수행한다.</li>\n</ul>\n<h1 id=\"서블릿-관련-클래스\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B8%94%EB%A6%BF-%EA%B4%80%EB%A0%A8-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"서블릿 관련 클래스 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서블릿 관련 클래스</h1>\n<h3 id=\"dispatcherservlet\" style=\"position:relative;\"><a href=\"#dispatcherservlet\" aria-label=\"dispatcherservlet permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>DispatcherServlet</strong></h3>\n<ul>\n<li><strong>“Servlet Container(e.g. tomcat)으로부터 들어오는 요청을 관제하는 컨트롤러”</strong> 라고 할 수 있다.</li>\n<li><strong>DispatcherServlet</strong>이 <strong>HandlerMapping</strong>을 통해 적절한 <code class=\"language-text\">Controller</code>로 매핑한다.</li>\n</ul>\n<h3 id=\"servletfilter\" style=\"position:relative;\"><a href=\"#servletfilter\" aria-label=\"servletfilter permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ServletFilter</h3>\n<ul>\n<li>Servlet 실행 전, 후에 어떤 작업을 하고자할 때 <strong>Servlet Filter</strong> 를 사용한다. <code class=\"language-text\">Interceptor</code>를 사용할 수 있겠지만 차이점은 실행시점(handler전, 후)에 차이가 있다.</li>\n<li><code class=\"language-text\">Filter</code> 는 <strong>Servlet Container</strong>에 등록하고<code class=\"language-text\">Interceptor</code>는 스프링 컨테이너에 등록한다.</li>\n<li><code class=\"language-text\">javax.servlet.Filter</code> 인터페이스의 구현체이다.</li>\n</ul>\n<h3 id=\"servletcontext\" style=\"position:relative;\"><a href=\"#servletcontext\" aria-label=\"servletcontext permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ServletContext</h3>\n<ul>\n<li><strong>Servlet 단위</strong>로 생성되는 Context이다. Servlet Container(e.g. tomcat)에 DispatcherServlet과 같은 servlet을 등록하면 해당 servlet이 갖는 하나의 <strong>작은 컨테이너 역할</strong>을 하는 객체이다.</li>\n<li>스프링을 이용하는 경우, 스프링 컨테이너(Application Context)를 부모 Context로 사용한다.</li>\n</ul>\n<h3 id=\"applicationcontext\" style=\"position:relative;\"><a href=\"#applicationcontext\" aria-label=\"applicationcontext permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ApplicationContext</h3>\n<ul>\n<li><strong>Root Context</strong>이자 스프링에 의해 생성되는 Bean에 대한 <strong>Spring IoC Container</strong>이다. <code class=\"language-text\">BeanFactory</code>를 상속받는 <strong>Context Servlet</strong>에서 공통으로 사용할 <strong>Bean</strong>을 등록하는 <strong>Context</strong>이다.</li>\n<li><code class=\"language-text\">@Transactional</code> 으로 트랜잭션을 이용해야할 때 <strong>ApplicationContext</strong>에 있는 Service에서만 트랜잭션이 정상 작동한다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/199487187-42417a16-fd4e-4cf8-b480-d0df70ce1a90.png\" alt=\"image\"></p>"}