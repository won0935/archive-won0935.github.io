{"expireTime":9007200902428251000,"key":"transformer-remark-markdown-html-5e4cc3d058132326f54247b73a201dd7-gatsby-remark-code-titlesgatsby-remark-embed-youtubegatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-custom-blocksgatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<blockquote>\n<p>이직한 회사에서 <code class=\"language-text\">Kotlin</code>으로 개발을 진행하고 있었다.</p>\n<p>따라서 각 기술에 대해 공부해보았다.</p>\n</blockquote>\n<hr>\n<h1 id=\"코틀린이란-무엇인가\" style=\"position:relative;\"><a href=\"#%EC%BD%94%ED%8B%80%EB%A6%B0%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"코틀린이란 무엇인가 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코틀린이란 무엇인가?</h1>\n<p><strong>코틀린(Kotlin)</strong>이란 기존의 <strong>자바 플랫폼</strong>에서 돌아가는 새로운 프로그래밍 언어이다.</p>\n<p>앞으로 함께 알아보겠지만 코틀린은 간결하고, 실용적이면서도 자바 코드와 상호운용성(interoperability)을 중요시한다. </p>\n<p>즉, 현재 <strong>자바가 사용되는 곳</strong>에서는 거의 대부분 코틀린을 적용시킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token operator\">/</span> data 클래스\ndata <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>val name<span class=\"token operator\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n                 val age<span class=\"token operator\">:</span> <span class=\"token class-name\">Int</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// null값이 허용되는 int타입(Int?), 디폴트 값은 null</span>\n \nfun <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> <span class=\"token class-name\">Array</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 최상위 함수</span>\n    val persons <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"영희\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"철수\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    val oldest <span class=\"token operator\">=</span> persons<span class=\"token punctuation\">.</span>maxBy <span class=\"token punctuation\">{</span>it<span class=\"token punctuation\">.</span>age <span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 람다 식과 엘비스 연산자</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"나이가 가장 많은 사람: $oldest\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 문자열 템플릿</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<h1 id=\"propagation전파-항목-별-정리\" style=\"position:relative;\"><a href=\"#propagation%EC%A0%84%ED%8C%8C-%ED%95%AD%EB%AA%A9-%EB%B3%84-%EC%A0%95%EB%A6%AC\" aria-label=\"propagation전파 항목 별 정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Propagation(전파) 항목 별 정리</h1>\n<p><code class=\"language-text\">@Transactional</code>의 Isolation(트랜잭션 격리수준)에는 아래와 같은 4가지 항목이 있다.\n아래로 갈수록 격리 수준이 높아진다.\n4에 가까울 수록 동시성 접근 제어의 수준이 강해지며 동시 처리 성능은 낮아진다.\n접근 제어를 강하게 수행한다는 것은 트랜잭션이 끝나기 전까지 해당 데이터를 잠그고 다른 트랜잭션에서 참조하지 못하게 하는 것이기 때문이다.</p>\n<ol>\n<li><strong>Isolation.READ_UNCOMMITTED</strong>: 커밋되지 않는 읽기</li>\n<li><strong>Isolation.READ_COMMITTED</strong>: 커밋된 읽기</li>\n<li><strong>Isolation.REPEATABLE_READ</strong>: 반복 가능한 읽기</li>\n<li><strong>Isolation.SERIALIZABLE</strong>: 직렬화 기능</li>\n</ol>\n<h2 id=\"isolationread_uncommitted\" style=\"position:relative;\"><a href=\"#isolationread_uncommitted\" aria-label=\"isolationread_uncommitted permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Isolation.READ_UNCOMMITTED</h2>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/153827234-276cd414-5af4-449d-9f6c-f068fddc2cc4.png\" alt=\"image\"></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>isolation <span class=\"token operator\">=</span> <span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span>READ_UNCOMMITTED<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ul>\n<li>트랜잭션 A가 특정 컬럼 데이터를 변경하고 있는 중에(커밋하지 않은 상태) 트랜잭션 B가 read하면 트랜잭션 A가 변경한 데이터를 읽어온다.</li>\n<li>커밋되지 않는 읽기는 <strong>Dirty Read</strong>라는 문제가 있다. </li>\n<li>이는 트랜잭션 A가 특정 컬럼 데이터를 변경하고 rollback 했을 때 발생한다.</li>\n</ul>\n<blockquote>\n<p>Dirty Read란? </p>\n<ol>\n<li>A 트랜잭션에서 10번 사원의 나이를 27살에서 28살로 바꿈</li>\n<li>아직 커밋하지 않음</li>\n<li>B 트랜잭션에서 10번 사원의 나이를 조회함</li>\n<li>28살이 조회됨</li>\n</ol>\n</blockquote>\n<h2 id=\"isolationread_committed\" style=\"position:relative;\"><a href=\"#isolationread_committed\" aria-label=\"isolationread_committed permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Isolation.READ_COMMITTED</h2>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/153828461-1249ac01-fb86-4955-abea-4dab88d8c136.png\" alt=\"image\"></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>isolation <span class=\"token operator\">=</span> <span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span>READ_COMMITTED<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ul>\n<li>커밋된 데이터만 조회할 수 있어 Dirty read는 발생하지 않는다.</li>\n<li>트랜잭션 A가 특정 컬럼 데이터를 변경하고 있는 중에(커밋하지 않은 상태) 트랜잭션 B가 read하면 트랜잭션 A가 변경하기 전 데이터를 읽어온다. </li>\n<li>만약 트랜잭션 A가 데이터 변경 후 커밋하게 되면 트랜잭션 B는 변경된 데이터를 읽어온다.</li>\n<li>이 격리 수준 이하에선 <strong>Non-Repeatable Read</strong> 문제가 발생한다.</li>\n</ul>\n<blockquote>\n<p>Non-Repeatable Read 란?</p>\n<p>하나의 트랜잭션이 같은 값을 조회할 때 다른 값이 검색되는 현상</p>\n</blockquote>\n<h2 id=\"isolationrepeatable_read\" style=\"position:relative;\"><a href=\"#isolationrepeatable_read\" aria-label=\"isolationrepeatable_read permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Isolation.REPEATABLE_READ</h2>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/153828575-caeadbef-c366-49f4-b65a-35044f6182f7.png\" alt=\"image\"></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>isolation <span class=\"token operator\">=</span> <span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span>REPEATABLE_READ<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ul>\n<li>트랜잭션이 시작되고 종료되기 전까지 한 번 조회한 값은 계속 같은 값이 조회되는 격리 수준이다.</li>\n<li>트랜잭션 시작 전에 커밋된 내용에 한해서만 조회된다.</li>\n<li>데이터를 변경하려고 하면 UNDO 영역에 백업해두고 실제 레코드를 변경하게 된다.</li>\n<li>이 격리 수준에서는 Non-Repeatable Read 는 발생하지 않는다.</li>\n<li>이 격리 수준에서는 UPDATE 한 데이터에 대해서는 정합성을 보장하지만, INSERT/DELETE 는 보장되지 않는다.</li>\n<li>격리 수준 이하에서는 <strong>Phantom Read</strong> 문제가 발생한다.</li>\n</ul>\n<blockquote>\n<p>Phantom Read 란?</p>\n<p>한 트랜잭션 내에서 같은 쿼리를 두 번 수행 시, 첫 번째 쿼리에서 없던 레코드(유령, Phantom)가 두 번째 쿼리에서 발생하는 현상</p>\n</blockquote>\n<h2 id=\"isolationserializable\" style=\"position:relative;\"><a href=\"#isolationserializable\" aria-label=\"isolationserializable permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Isolation.SERIALIZABLE</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>isolation <span class=\"token operator\">=</span> <span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span>SERIALIZABLE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ul>\n<li>트랜잭션이 특정 테이블을 읽으면 다른 트랜잭션은 그 테이블의 데이터를 <strong>추가/변경/삭제할 수 없다.</strong></li>\n<li><strong>가장 강력한</strong> 격리 수준이며 <strong>데이터 정합성을 가장 잘 보장</strong>한다.</li>\n<li>그러나 동시 처리 성능이 가장 떨어진다.</li>\n<li>이 격리 수준에서는 위에서 언급했던 Dirty Read, Non-Repeatable Read, Phantom Read 와 같은 정합성 문제가 전혀 발생하지 않는다.</li>\n</ul>\n<h2 id=\"참고--각-db별-기본-격리수준\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0--%EA%B0%81-db%EB%B3%84-%EA%B8%B0%EB%B3%B8-%EA%B2%A9%EB%A6%AC%EC%88%98%EC%A4%80\" aria-label=\"참고  각 db별 기본 격리수준 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 : 각 DB별 기본 격리수준</h2>\n<ul>\n<li><strong>MYSQL</strong> : <code class=\"language-text\">REPEATABLE READ</code></li>\n<li><strong>ORACLE</strong> : <code class=\"language-text\">READ COMMITTED</code></li>\n<li><strong>H2</strong> : <code class=\"language-text\">READ COMMITTED</code></li>\n</ul>"}