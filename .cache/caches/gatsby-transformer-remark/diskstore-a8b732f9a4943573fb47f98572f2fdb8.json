{"expireTime":9007200915291612000,"key":"transformer-remark-markdown-html-c3700bdc583762bd2a1119b16619e041-gatsby-remark-code-titlesgatsby-remark-embed-youtubegatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-custom-blocksgatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h1 id=\"didependency-injection\" style=\"position:relative;\"><a href=\"#didependency-injection\" aria-label=\"didependency injection permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>DI(Dependency Injection)</strong></h1>\n<p><code class=\"language-text\">DI(Dependency Injection)</code>란 <strong>스프링이 다른 프레임워크와 차별화되어 제공하는 의존 관계 주입 기능</strong>으로,<strong>객체를 직접 생성하는 게 아니라 외부에서 생성한 후 주입 시켜주는 방식</strong>이다.</p>\n<p><strong>DI(의존성 주입)를 통해서 모듈 간의 결합도가 낮아지고 유연성이 높아진다.</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/184598380-3d8cacd1-a3fd-400b-b1e9-be31f2341d07.png\" alt=\"image\"></p>\n<p>첫번째 방법은 A객체가 B와 C객체를 New 생성자를 통해서 직접 생성하는 방법이고,</p>\n<p>두번째 방법은 <strong>외부에서 생성 된 객체를 setter()를 통해 사용하는 방법</strong>이다.</p>\n<p>이러한 두번째 방식이 의존성 주입의 예시인데,<code class=\"language-text\">A 객체</code>에서 <strong><code class=\"language-text\">B, C객체</code>를 사용(의존)할 때</strong> <code class=\"language-text\">A 객체</code>에서 <strong>직접 생성 하는 것이 아니라</strong> <strong><code class=\"language-text\">외부(IOC컨테이너)</code>에서 생성된 <code class=\"language-text\">B, C객체</code>를 조립(주입)시켜 <code class=\"language-text\">setter</code> 혹은 <code class=\"language-text\">생성자</code>를 통해 사용하는 방식</strong>이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/184598449-41f7fa85-22e2-4e24-9a96-14f0b6b3ac58.png\" alt=\"image\">\n<strong>스프링에서는 객체를 <code class=\"language-text\">Bean</code></strong>이라고 부르며, 프로젝트가 실행될때 사용자가 Bean으로 관리하는 객체들의 생성과 소멸에 관련된 작업을 자동적으로 수행해주는데 객체가 생성되는 곳을 스프링에서는 Bean 컨테이너라고 부른다.</p>\n<h1 id=\"iocinversion-of-control\" style=\"position:relative;\"><a href=\"#iocinversion-of-control\" aria-label=\"iocinversion of control permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ioc(Inversion of Control)</h1>\n<p><code class=\"language-text\">IoC(Inversion of Control)</code>란 “제어의 역전” 이라는 의미로, 말 그대로 <strong>메소드나 객체의 호출작업을 개발자가 결정하는 것이 아니라, 외부에서 결정되는 것을 의미</strong>한다.</p>\n<p><code class=\"language-text\">IoC</code>는 <strong>제어의 역전이라고 말하며, 간단히 말해 “제어의 흐름을 바꾼다”</strong>라고 한다.</p>\n<p>객체의 <strong>의존성을 역전시켜 객체 간의 결합도를 줄이고 유연한 코드를 작성</strong>할 수 있게 하여 <strong>가독성 및 코드 중복, 유지 보수를 편하게</strong> 할 수 있게 한다.</p>\n<h3 id=\"기존에는-다음과-순서로-객체가-만들어지고-실행되었다\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4%EC%97%90%EB%8A%94-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EC%88%9C%EC%84%9C%EB%A1%9C-%EA%B0%9D%EC%B2%B4%EA%B0%80-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%A7%80%EA%B3%A0-%EC%8B%A4%ED%96%89%EB%90%98%EC%97%88%EB%8B%A4\" aria-label=\"기존에는 다음과 순서로 객체가 만들어지고 실행되었다 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존에는 다음과 순서로 객체가 만들어지고 실행되었다.</h3>\n<ol>\n<li>객체 생성</li>\n<li>의존성 객체 생성<em>클래스 내부에서 생성</em></li>\n<li>의존성 객체 메소드 호출</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassA</span> <span class=\"token punctuation\">{</span>\n\t\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassB</span> <span class=\"token punctuation\">{</span>\n\t\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ClassA</span> a<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token class-name\">ClassB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"하지만-스프링에서는-다음과-같은-순서로-객체가-만들어지고-실행된다\" style=\"position:relative;\"><a href=\"#%ED%95%98%EC%A7%80%EB%A7%8C-%EC%8A%A4%ED%94%84%EB%A7%81%EC%97%90%EC%84%9C%EB%8A%94-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EC%9D%80-%EC%88%9C%EC%84%9C%EB%A1%9C-%EA%B0%9D%EC%B2%B4%EA%B0%80-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%A7%80%EA%B3%A0-%EC%8B%A4%ED%96%89%EB%90%9C%EB%8B%A4\" aria-label=\"하지만 스프링에서는 다음과 같은 순서로 객체가 만들어지고 실행된다 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하지만, 스프링에서는 다음과 같은 순서로 객체가 만들어지고 실행된다.</h3>\n<ol>\n<li>객체 생성</li>\n<li>의존성 객체 주입*스스로가 만드는것이 아니라 제어권을 <strong>스프링에게 위임하여 스프링이 만들어놓은 객체를 주입</strong>한다.*</li>\n<li>의존성 객체 메소드 호출</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassA</span> <span class=\"token punctuation\">{</span>\n\t\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassB</span> <span class=\"token punctuation\">{</span>\n\t\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ClassA</span> a<span class=\"token punctuation\">;</span>\n \n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>스프링이 모든 의존성 객체를 스프링이 실행될때 다 만들어주고 필요한곳에 주입</strong>시켜줌으로써 <strong>Bean들은 <code class=\"language-text\">싱글턴 패턴</code>의 특징</strong>을 가지며,</p>\n<p><strong>제어의 흐름을 사용자가 컨트롤 하는 것이 아니라 스프링에게 맡겨 작업을 처리</strong>하게 된다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/184598575-5fdd0748-8307-4bd9-abbc-20475473357b.png\" alt=\"image\"></p>"}