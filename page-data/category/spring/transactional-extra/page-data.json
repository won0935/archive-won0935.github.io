{"componentChunkName":"component---src-templates-post-tsx","path":"/category/spring/transactional-extra/","result":{"data":{"site":{"siteMetadata":{"title":"Jay 기술 블로그","author":"won0935","siteUrl":"https://won0935.github.io"}},"markdownRemark":{"id":"b052e36f-bbd6-5ec4-8be9-36548641043f","excerpt":"JPA를 활용할 때, 의 각 옵션들에 대해 정확히 알고 사용하려고 한다. 따라서 각 기술에 대해 공부해보았다. @Transactional 의 옵션 Spring 에서  을 사용할 때 지정할 수 있는 옵션들은 아래와 같다. isolation propagation readOnly…","html":"<blockquote>\n<p>JPA를 활용할 때, <code class=\"language-text\">@Transactional</code>의 각 옵션들에 대해 정확히 알고 사용하려고 한다.</p>\n<p>따라서 각 기술에 대해 공부해보았다.</p>\n</blockquote>\n<hr>\n<h1 id=\"transactional-의-옵션\" style=\"position:relative;\"><a href=\"#transactional-%EC%9D%98-%EC%98%B5%EC%85%98\" aria-label=\"transactional 의 옵션 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Transactional 의 옵션</h1>\n<p>Spring 에서 <code class=\"language-text\">@Transactional</code> 을 사용할 때 지정할 수 있는 옵션들은 아래와 같다.</p>\n<ul>\n<li><a href=\"https://won0935.github.io/category/spring/transactional-isolation/\">isolation</a></li>\n<li><a href=\"https://won0935.github.io/category/spring/transactional-propagation/\">propagation</a></li>\n<li>readOnly</li>\n<li>rollbackFor</li>\n<li>timeout</li>\n</ul>\n<h2 id=\"transactionalreadonly-\" style=\"position:relative;\"><a href=\"#transactionalreadonly-\" aria-label=\"transactionalreadonly  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Transactional(readOnly= ?)</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>readOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ul>\n<li><strong>기본값</strong>은 <code class=\"language-text\">false</code> 이며 <code class=\"language-text\">true</code> 로 세팅하는 경우 트랜잭션을 <strong>읽기 전용</strong>으로 변경한다.</li>\n<li>만약 읽기 전용 트랜잭션 내에서 INSERT, UPDATE, DELETE 작업을 해도 반영이 되지 않거나 DB 종류에 따라서 아예 예외가 발생하는 경우가 있다. (MySQL의 경우 오류사항 없이 데이터 반영이 되지 않음)</li>\n<li><code class=\"language-text\">@Transaction(readOnly = true)</code>로 설정하면 <strong>읽기 성능 향상의 장점</strong>이 있다.</li>\n<li>읽기 외의 다른 동작을 방지하기 위해 사용하기도 한다.</li>\n</ul>\n<h4 id=\"transactionreadonly--true-가-더-빠른-이유\" style=\"position:relative;\"><a href=\"#transactionreadonly--true-%EA%B0%80-%EB%8D%94-%EB%B9%A0%EB%A5%B8-%EC%9D%B4%EC%9C%A0\" aria-label=\"transactionreadonly  true 가 더 빠른 이유 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Transaction(readOnly = true) 가 더 빠른 이유</h4>\n<blockquote>\n<p><strong>Dirty Checking</strong> 을 하지 않기 때문</p>\n</blockquote>\n<ol>\n<li>JPA 에는 Dirty Checking 이라는 기능이 있다.</li>\n<li>개발자가 임의로 UPDATE 쿼리를 사용하지 않아도 트랜잭션 커밋 시에 1차 캐시에 저장되어 있는 Entity 와 스냅샷을 비교해서 변경된 부분이 있으면 UPDATE 쿼리를 날려주는 기능이다.</li>\n<li>readOnly = true 옵션을 주면 스프링 프레임워크가 하이버네이트의 FlushMode 를 MANUAL 로 설정해서 Dirty Checking 에 필요한 스냅샷 비교 등을 생략하기 때문에 성능이 향상된다.</li>\n</ol>\n<h2 id=\"transactionalrollbackfor-\" style=\"position:relative;\"><a href=\"#transactionalrollbackfor-\" aria-label=\"transactionalrollbackfor  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Transactional(rollbackFor= ?)</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>rollbackFor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ul>\n<li>기본값은 <code class=\"language-text\">RuntimeException</code>, <code class=\"language-text\">Error</code> 이며, 기본적으로 트랜잭션은 종료 시 변경된 데이터를 커밋한다.</li>\n<li>하지만 @Transactional 에서 rollbackFor 속성을 지정하면 <strong>특정 Exception 발생 시 데이터를 커밋하지 않고 롤백하도록 변경</strong>할 수 있다.</li>\n<li>rollbackFor 속성으로 다른 Exception 을 추가해도 RuntimeException 이나 Error 는 여전히 데이터를 롤백한다.</li>\n<li>만약 강제로 데이터 롤백을 막고 싶다면 <code class=\"language-text\">noRollbackFor</code> 옵션으로 지정해주면 된다.</li>\n</ul>\n<h2 id=\"transactionaltimeout-\" style=\"position:relative;\"><a href=\"#transactionaltimeout-\" aria-label=\"transactionaltimeout  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Transactional(timeout= ?)</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ul>\n<li><strong>기본값은 -1</strong>(무한)이며, 지정한 시간 내에 해당 메소드 수행이 완료되이 않은 경우 <code class=\"language-text\">JpaSystemException</code> 을 발생시킨다.</li>\n<li><code class=\"language-text\">JpaSystemException</code> 은 <code class=\"language-text\">RuntimeException</code> 을 상속받기 때문에 데이터 역시 <strong>롤백 처리</strong> 된다.</li>\n<li><strong>초 단위</strong>로 지정할 수 있으며 기본값인 -1 인 경우엔 timeout 을 지원하지 않는다.</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/category/spring/transactional-extra/#transactional-%EC%9D%98-%EC%98%B5%EC%85%98\">@Transactional 의 옵션</a></p>\n<ul>\n<li>\n<p><a href=\"/category/spring/transactional-extra/#transactionalreadonly-\">@Transactional(readOnly= ?)</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/spring/transactional-extra/#transactionreadonly--true-%EA%B0%80-%EB%8D%94-%EB%B9%A0%EB%A5%B8-%EC%9D%B4%EC%9C%A0\">@Transaction(readOnly = true) 가 더 빠른 이유</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/spring/transactional-extra/#transactionalrollbackfor-\">@Transactional(rollbackFor= ?)</a></li>\n<li><a href=\"/category/spring/transactional-extra/#transactionaltimeout-\">@Transactional(timeout= ?)</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[JPA] @Transactional 옵션 정리","description":"","date":"2022.02.15","emoji":"🧺","category":"spring"}}},"pageContext":{"slug":"/category/spring/transactional-extra/","relatedPosts":[{"node":{"fields":{"slug":"/category/spring/pessimistic-optimistic-lock/"},"frontmatter":{"title":"[Lock] 동시성이슈에 대한 해결 방법","date":"2023.01.03","emoji":"🔒","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/jdk-dynamic-proxy-vs-cglib/"},"frontmatter":{"title":"[Spring] JDK Dynamic Proxy VS CGLIB","date":"2022.10.30","emoji":"🪔","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/spring-bean-lifecycle/"},"frontmatter":{"title":"[Spring] Spring Bean Lifecycle","date":"2022.10.25","emoji":"🔋","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/bean-post-processor/"},"frontmatter":{"title":"[Spring] BeanPostProcessor","date":"2022.10.20","emoji":"🛟","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/spring-configuration/"},"frontmatter":{"title":"[Spring] Spring Configuration","date":"2022.10.15","emoji":"🏖️","category":"spring"}}}]}},"staticQueryHashes":["196006245","1984257895","2528810007"]}