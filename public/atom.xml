<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jay&#39;s Note</title>
  
  
  <link href="http://won0935.github.io/atom.xml" rel="self"/>
  
  <link href="http://won0935.github.io/"/>
  <updated>2021-11-11T07:52:55.365Z</updated>
  <id>http://won0935.github.io/</id>
  
  <author>
    <name>Song Jae-won, Jay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>이터레이터 패턴</title>
    <link href="http://won0935.github.io/2021/11/09/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/2021-11-11-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%84%B4/"/>
    <id>http://won0935.github.io/2021/11/09/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/2021-11-11-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%84%B4/</id>
    <published>2021-11-09T11:33:27.687Z</published>
    <updated>2021-11-11T07:52:55.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🎛-이터레이터-패턴이란"><a href="#🎛-이터레이터-패턴이란" class="headerlink" title="🎛 이터레이터 패턴이란"></a>🎛 이터레이터 패턴이란</h2><blockquote><p>컬렉션 구현 방법을 <strong>노출시키지 않으면서도</strong>, 그 집합체 안에 들어있는 <strong>모든 항목에 접근할 수 있는 방법</strong>을 제공한다.</p></blockquote><p>컬렉션 객체 안에 들어있는 모든 항목에 <strong>접근하는 방식이 통일되어 있으면</strong> 어떤 종류의 집합체에 대해서도 사용할 수 있는 다형적인 코드를 만들수 있다.</p><p><code>이터레이터 패턴</code>을 사용하면 모든 항목에 일일이 접근하는 작업을 컬렉션 객체가 아닌 <strong>반복자 객체</strong>에서 맡게 된다.<br>이렇게 하면 집합체의 인터페이스 및 구현이 간단해질 뿐 아니라, 집합체에서는 반복작업에서 손을 떼고 원래 자신이 할 일(객체 컬렉션 관리)에만 전념할 수 있다</p><hr><h2 id="🔎-템플릿메소드-패턴의-이해"><a href="#🔎-템플릿메소드-패턴의-이해" class="headerlink" title="🔎 템플릿메소드 패턴의 이해"></a>🔎 템플릿메소드 패턴의 이해</h2><p><img src="https://user-images.githubusercontent.com/55419159/141257200-343f3e03-e28d-4be6-bc54-9f613d0aaf71.png" alt="image"></p><h3 id="🚀-활용-예시"><a href="#🚀-활용-예시" class="headerlink" title="🚀 활용 예시"></a>🚀 활용 예시</h3><p><em>두개의 서로 다른 식당이있고 각각의 식당에서 메뉴를 구현한다고 가정해보자</em></p><p><code>java.util.Iterator</code> 인터페이스를 사용해서 <code>Iterator</code>를 적용시켜보자.</p><h4 id="이터레이트-인터페이스"><a href="#이터레이트-인터페이스" class="headerlink" title="이터레이트 인터페이스"></a>이터레이트 인터페이스</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Menu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;MenuItem&gt; <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="인터페이스를-구현하는-객체-생성"><a href="#인터페이스를-구현하는-객체-생성" class="headerlink" title="인터페이스를 구현하는 객체 생성"></a>인터페이스를 구현하는 객체 생성</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PancakeHouseMenu</span> <span class="keyword">implements</span> <span class="title">Menu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;MenuItem&gt; menuItems; <span class="comment">//이 객체는 메뉴들이 ArrayList 이다</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PancakeHouseMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menuItems = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        additem(<span class="string">&quot;K&amp;B 팬케이크 세트&quot;</span>, <span class="string">&quot;스크램블드 에그와 토스트가 곁들여진 펜케이크&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>);</span><br><span class="line">        additem(<span class="string">&quot;레귤러 팬케이크 세트&quot;</span>, <span class="string">&quot;달걀 후라이와 소시지가 곁들여진 펜케이크&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>);</span><br><span class="line">        additem(<span class="string">&quot;블루베리 펜케이크&quot;</span>, <span class="string">&quot;신선한 블루베리와 블루베리 시럽으로 만든 펜케이크&quot;</span>, <span class="keyword">true</span>, <span class="number">3.49</span>);</span><br><span class="line">        additem(<span class="string">&quot;와플&quot;</span>, <span class="string">&quot;와플, 취향에 따라 블루베리나 딸기를 얹을 수 있습니다.&quot;</span>, <span class="keyword">true</span>, <span class="number">3.59</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">additem</span><span class="params">(string name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetarian, price);</span><br><span class="line">        menuItem.add(menuItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;MenuItem&gt; <span class="title">getMenuItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;MenuItem&gt; <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems.iterator(); <span class="comment">//ArrayList 컬렉션은 반복자를 리턴하는 iterator() 라는 메소드가 있음.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DinerMenu</span> <span class="keyword">implements</span> <span class="title">Menu</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ITEMS = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> numberOfItems = <span class="number">0</span>;</span><br><span class="line">    MenuItem[] menuItems; <span class="comment">//이 객체는 메뉴들이 배열 이다</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DinerMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menuItems = <span class="keyword">new</span> MenuItem[MAX_ITEMS];</span><br><span class="line">        additem(<span class="string">&quot;채식주의자용 BLT&quot;</span>, <span class="string">&quot;통밀 위에 (식물성)베이컨, 상추, 토마토를 얹은 메뉴&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>);</span><br><span class="line">        additem(<span class="string">&quot;BLT&quot;</span>, <span class="string">&quot;통밀 위에 베이컨, 상추, 토마토를 얹은 메뉴&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>);</span><br><span class="line">        additem(<span class="string">&quot;오늘의 스프&quot;</span>, <span class="string">&quot;감자 샐러드를 곁들인 오늘의 스프&quot;</span>, <span class="keyword">false</span>, <span class="number">3.29</span>);</span><br><span class="line">        additem(<span class="string">&quot;핫도그&quot;</span>, <span class="string">&quot;사워크라우트, 갖은 양념, 양파, 치즈가 곁들여진 핫도그&quot;</span>, <span class="keyword">false</span>, <span class="number">3.05</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">additem</span><span class="params">(string name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetarian, price);</span><br><span class="line">        <span class="keyword">if</span> (nemberOfItems &gt;= MAX_ITEMS) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;죄송합니다, 메뉴가 꽉 찼습니다. 더 이상 추가할 수 없습니다.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            menuItems[numberOfItems] = menuItem;</span><br><span class="line">            numberOfItems = numberOfItems + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MenuItem[] getMenuItems() &#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;MenuItem&gt; <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DinerMenujIterator(menuItems);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java-util-Iterator-인터페이스를-사용해서-Iterator-객체를-구현"><a href="#java-util-Iterator-인터페이스를-사용해서-Iterator-객체를-구현" class="headerlink" title="java.util.Iterator 인터페이스를 사용해서 Iterator 객체를 구현"></a><code>java.util.Iterator</code> 인터페이스를 사용해서 <code>Iterator</code> 객체를 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DinerMenuIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">MenuItem</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    Menuitem[] list;</span><br><span class="line">    <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DinerMenuIterator</span><span class="params">(MenuItem[] list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MenuItem <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MenuItem menuItem = list[position];</span><br><span class="line">        position += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> menuItem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (position &gt;= list.length || list[position] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; <span class="comment">// 반드시 기능을 제공하지 않아도됨 그렇다면 java.lang.UnsupportedOperationException을 던지도록 하면됨</span></span><br><span class="line">        <span class="keyword">if</span> (position &lt;= <span class="number">0</span>) <span class="function">Throw new <span class="title">IllegalStateException</span><span class="params">(<span class="string">&quot;next()가 한번도 호출되지 않음.&quot;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (list[position - <span class="number">1</span>] != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = position - <span class="number">1</span>; i &lt; (list.length - <span class="number">1</span>); i++) &#123;</span><br><span class="line">                list[i] = list[i + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            list[list.length - <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PancakeHouseMenu 는 ArrayList안에 이미 Iterator 구현되어 있기 때문에 생략해도 된다.</span></span><br></pre></td></tr></table></figure><h4 id="클라이언트-객체에서의-활용"><a href="#클라이언트-객체에서의-활용" class="headerlink" title="클라이언트 객체에서의 활용"></a>클라이언트 객체에서의 활용</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waitress</span> </span>&#123; </span><br><span class="line">    ArrayList&lt;Menu&gt; menus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Waitress</span><span class="params">(ArrayList&lt;Menu&gt; menus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menus = menus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Iterator menuIterator = menus.iterator();</span><br><span class="line">        <span class="keyword">while</span> (menuIterator.hasNext()) &#123;</span><br><span class="line">            Menu menu = menuIterator.next();</span><br><span class="line">            printMenu(menu.createIterator());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">(Iterator&lt;MenuItem&gt; iterator)</span> </span>&#123; <span class="comment">//클라이언트 객체에서의 반복작업이 매우 간단해졌다</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            MenuItem menuItem = iterator.next();</span><br><span class="line">            System.out.println(menuItem.getName());</span><br><span class="line">            System.out.println(menuItem.getPrice());</span><br><span class="line">            System.out.println(menuItem.getDescription());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuTestDrive</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Menu&gt; menuList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        menuList.add(<span class="keyword">new</span> PancakeHouseMenu());</span><br><span class="line">        menuList.add(<span class="keyword">new</span> DinerMenu());</span><br><span class="line">        Waitress waitress = <span class="keyword">new</span> Waitress(menuList);</span><br><span class="line">        waitress.printMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>이제 <strong>집합체 내</strong>에서 어떤 식으로 일이 처리되는 지에 대해서 <strong>전혀 모르는 상태</strong>에서도 그 안에 들어있는 모든 항목들에 대해서 반복작업을 수행할수 있게 되었다.</p></blockquote><p>집합체에서 내부 컬랙션과 관련된 기능과 반복자용 메소드 관련기능을 전부 구현하도록 했다면 어떨까?</p><p>우선 클래스에서 원래 그 클래스의 역할(집합체 관리) 외에 다른 역할(반복자 메소드)을 처리하도록 하면, 두 가지 이유로 인해 그 클래스가 바뀔 수 있게 된다.</p><ol><li>컬렉션이 어떤 이유로 인해 바뀌게 되면 그 클래스의 <strong>소스코드</strong>를 바꿔야 한다. </li><li><strong>반복자 관련 기능</strong>이 바뀌었을 때도 클래스가 바뀌여야 한다.</li></ol><hr><h2 id="🛡-디자인-원칙"><a href="#🛡-디자인-원칙" class="headerlink" title="🛡 디자인 원칙"></a>🛡 디자인 원칙</h2><blockquote><p><em>클래스를 바꾸는 이유는 <strong>한 가지</strong> 뿐이어야 한다.</em></p></blockquote><p> <strong>클래스를 고치는 것은 최대한 피해야 한다.</strong></p><p> 때문에 코드를 변경할 만한 이유가 두가지가 되면 그만큼 그 클래스를 나중에 고쳐야 할 가능성이 커지게 될 뿐 아니라, 디자인에 있어서 두 가지 부분이 동시에 영향이 미치게 된다.</p><p>이 원칙에 따르면 <strong>한 역할은 한 클래스에서만</strong> 맡게 해야 한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;🎛-이터레이터-패턴이란&quot;&gt;&lt;a href=&quot;#🎛-이터레이터-패턴이란&quot; class=&quot;headerlink&quot; title=&quot;🎛 이터레이터 패턴이란&quot;&gt;&lt;/a&gt;🎛 이터레이터 패턴이란&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;컬렉션 구현 방법을 &lt;s</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="이터레이터" scheme="http://won0935.github.io/tags/%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0/"/>
    
  </entry>
  
  <entry>
    <title>템플릿메소드 패턴</title>
    <link href="http://won0935.github.io/2021/11/08/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/2021-11-09-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%8C%A8%ED%84%B4/"/>
    <id>http://won0935.github.io/2021/11/08/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/2021-11-09-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%8C%A8%ED%84%B4/</id>
    <published>2021-11-08T11:12:10.891Z</published>
    <updated>2021-11-09T11:33:27.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="📦-템플릿메소드-패턴이란"><a href="#📦-템플릿메소드-패턴이란" class="headerlink" title="📦 템플릿메소드 패턴이란"></a>📦 템플릿메소드 패턴이란</h2><blockquote><p>메소드에서 알고리즘의 <strong>골격</strong>을 정의한다.<br>알고리즘의 여러 단계 중 일부는 <strong>서브클래스</strong>에서 구현할 수 있다.<br>템플릿 메소드를 이용하면 알고리즘의 <em>구조는 그대로 유지하면서</em> 서브클래스에서 <strong>특정 단계를 재정의</strong> 할 수 있다.</p></blockquote><p>알고리즘의 틀을 만들기 위한 패턴이다.<br>이 패턴에서 틀(템플릿)이란 일련의 단계들로 알고리즘을 정의한 메소드다.<br>여러 던계 가운데 하나 이상이 추상 메소드로 정의되며, 그 추상 메소드는 서브클래스에서 구현된다.<br>이렇게 하면 서브클래스에서 일부분의 단계를 구현할 수 있도록 하면서도 알고리즘의 구조는 바꾸지 않아도 되도록 할 수 있다.</p><hr><h2 id="🔎-템플릿메소드-패턴의-이해"><a href="#🔎-템플릿메소드-패턴의-이해" class="headerlink" title="🔎 템플릿메소드 패턴의 이해"></a>🔎 템플릿메소드 패턴의 이해</h2><h3 id="🚀-활용-예시"><a href="#🚀-활용-예시" class="headerlink" title="🚀 활용 예시"></a>🚀 활용 예시</h3><p><em>커피와 차가 만들어 지는법을 비교해보자.</em></p><h4 id="커피-만드는-법"><a href="#커피-만드는-법" class="headerlink" title="커피 만드는 법"></a>커피 만드는 법</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) 물을 끓인다.</span><br><span class="line"><span class="number">2</span>) 끓는 물에 커피를 우려낸다.</span><br><span class="line"><span class="number">3</span>) 커피를 컵에 따른다.</span><br><span class="line"><span class="number">4</span>) 설탕과 우유를 추가한다. </span><br></pre></td></tr></table></figure><h4 id="홍차-만드는-법"><a href="#홍차-만드는-법" class="headerlink" title="홍차 만드는 법"></a>홍차 만드는 법</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) 물을 끓인다. <span class="comment">//동일</span></span><br><span class="line"><span class="number">2</span>) 끓는 물에 차를 우려낸다. <span class="comment">//~~ 우려낸다</span></span><br><span class="line"><span class="number">3</span>) 차를 컵에 따른다. <span class="comment">//동일</span></span><br><span class="line"><span class="number">4</span>) 레몬을 추가한다. <span class="comment">//~~ 추가한다</span></span><br></pre></td></tr></table></figure><p>거의 동일하다.<br>공통으로 사용할 수 있는 방법을 생각해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prepareRecipe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brewCoffeeGrinds();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addSugarAndMilk();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;물 끓이는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breqCoffeeGrinds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;필터를 통해 커피를 우려내는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;컵에 따르는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSugarAndMilk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;설탕과 우유를 추가하는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prepareRecipe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        steepTeaBag();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addLemon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;물 끓이는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">steepTeaBag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;차를 우려내는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;컵에 따르는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLemon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;레몬을 추가하는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="공통부분-추상화"><a href="#공통부분-추상화" class="headerlink" title="공통부분 추상화"></a>공통부분 추상화</h4><p>공통 단계를 묶어보면…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">final</span> <span class="title">prepareRecipe</span><span class="params">()</span> </span>&#123; <span class="comment">//공통적인 단계는 수정할 수 없도록 final로 선언한다.</span></span><br><span class="line">        boilWater();</span><br><span class="line">        brew(); <span class="comment">//공통으로 사용</span></span><br><span class="line">        pourInCup();</span><br><span class="line">        addcondiments();  <span class="comment">//공통으로 사용</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span></span>;  <span class="comment">//상속객체에서 직접 구현할 수 있도록 추상메소드로 선언한다</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addcondiments</span><span class="params">()</span></span>;  <span class="comment">//상속객체에서 직접 구현할 수 있도록 추상메소드로 선언한다</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;물 끓이는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;컵에 따르는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;필터를 통해 커피를 우려내는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;설탕과 우유를 추가하는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> <span class="keyword">extends</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;차를 우려내는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;레몬을 추가하는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🚨-헐리우드-원칙"><a href="#🚨-헐리우드-원칙" class="headerlink" title="🚨 헐리우드 원칙"></a>🚨 헐리우드 원칙</h2><p><em>‘먼저 연락하지 마세요. 저희가 연락 드리겠습니다.’</em></p><h3 id="의존성-부패"><a href="#의존성-부패" class="headerlink" title="의존성 부패"></a>의존성 부패</h3><p>이 디자인 원칙을 확용하면 <strong>의존성 부패</strong>(dependency rot)를 방지 할수 있다.<br>어떤 고수준 구성요소가 저수준 구성요소에 의존하고, 그 저수준 구성요소는 다시 고수준 구성요소에 의존하고, 그 고수준 구성요소는 다시 또 다른 구성요소에 의존하고.. </p><p>이런 식으로 의존성이 복잡하게 꼬여있는 것을 <strong>의존성 부패</strong>라고 한다.</p><p><strong>헐리우드 원칙</strong>을 사용하면, 저수준 구성요소에서 시스템에 접속을 할수는 있지만, 언제 어떤 식으로 그 구성요소들을 사용할지는 <strong>고수준 구성요소에서 결정</strong>하게 된다.</p><blockquote><p>즉, 저수준 구성요소는 컴퓨테이션에 참여할 수는 있지만 절대 <strong>고수준 구성요소를 직접 호출하면 안된다</strong>는 것이다.</p></blockquote><h4 id="CaffeineBeverage-디자인을-이용해-본다면"><a href="#CaffeineBeverage-디자인을-이용해-본다면" class="headerlink" title="CaffeineBeverage 디자인을 이용해 본다면.."></a>CaffeineBeverage 디자인을 이용해 본다면..</h4><p><img src="https://user-images.githubusercontent.com/55419159/140914388-faeda3ca-a3f8-4fe1-9984-490453f4bd1e.png" alt="image"></p><p><code>CaffeineBeverage</code>는 고수준 구성요소 이다.<br>음료를 만드는 방법에 대당하는 알고리즘을 장악하고 있고, 메소드 구현이 필요한 상태에서만 서브클래스를 불러낸다.</p><p><code>Coffee</code>와 <code>Tea</code> 와 같은 서브클래스는 각각의 <strong>메소드 구현을 제공하기 위한 용도</strong>로만 쓰인다.</p><p>이와같은 서브 클래스들은 고수준 구성요소인 <code>CaffeineBeverage</code> 클래스로부터 호출 당하기 전까지는 절대로 <code>CaffeineBeverage</code> 추상 클래스를 직접 호출하지 않는다.</p><p>이렇게 함으로 <code>CaffeineBeverage</code> 클래스의 클라이언트에서는 <code>Tea</code>나 <code>Coffee</code> 같은 구상 클래스가 아닌 <code>CaffeineBeverage</code>에 추상화 되어 있는 부분에 의존하게 된다. </p><p>그렇게 함으로써 <strong>전체 시스템의 의존성</strong>이 줄어들 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;📦-템플릿메소드-패턴이란&quot;&gt;&lt;a href=&quot;#📦-템플릿메소드-패턴이란&quot; class=&quot;headerlink&quot; title=&quot;📦 템플릿메소드 패턴이란&quot;&gt;&lt;/a&gt;📦 템플릿메소드 패턴이란&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;메소드에서 알고리</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="템플릿메소드" scheme="http://won0935.github.io/tags/%ED%85%9C%ED%94%8C%EB%A6%BF%EB%A9%94%EC%86%8C%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>어댑터 &amp; 파사드 패턴</title>
    <link href="http://won0935.github.io/2021/11/08/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/2021-11-08-%EC%96%B4%EB%8C%91%ED%84%B0-%ED%8C%8C%EC%82%AC%EB%93%9C-%ED%8C%A8%ED%84%B4/"/>
    <id>http://won0935.github.io/2021/11/08/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/2021-11-08-%EC%96%B4%EB%8C%91%ED%84%B0-%ED%8C%8C%EC%82%AC%EB%93%9C-%ED%8C%A8%ED%84%B4/</id>
    <published>2021-11-08T10:23:29.584Z</published>
    <updated>2021-11-09T11:05:46.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🧤-어댑터-amp-파사드-패턴이란"><a href="#🧤-어댑터-amp-파사드-패턴이란" class="headerlink" title="🧤 어댑터 &amp; 파사드 패턴이란"></a>🧤 어댑터 &amp; 파사드 패턴이란</h2><h3 id="어댑터-패턴"><a href="#어댑터-패턴" class="headerlink" title="어댑터 패턴"></a>어댑터 패턴</h3><blockquote><p>한 클래스의 인터페이스를 클라이언트에서 사용하고자하는 다른 인터페이스로 <strong>변환</strong>한다.<br>어댑터를 이용하면 인터페이스 <strong>호환성</strong> 문제 때문에 같이 쓸 수 없는 클래스들을 연결해서 쓸 수 있다.</p></blockquote><h3 id="파사드-패턴"><a href="#파사드-패턴" class="headerlink" title="파사드 패턴"></a>파사드 패턴</h3><blockquote><p>어떤 서브시스템의 일련의 인터페이스에 대한 <strong>통합된 인터페이스</strong>를 제공한다.<br>퍼사드에서 고수준 인터페이스를 정의하기 때문에 서브시스템을 더 쉽게 사용할수 있다.</p></blockquote><hr><h2 id="🔧-어댑터-패턴의-이해"><a href="#🔧-어댑터-패턴의-이해" class="headerlink" title="🔧 어댑터 패턴의 이해"></a>🔧 어댑터 패턴의 이해</h2><p><img src="https://user-images.githubusercontent.com/55419159/140725965-84c06d1c-050a-4c09-bbe1-73d91d037601.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/55419159/140726207-74aafe97-0197-473f-84ad-e3ed5bea9407.png" alt="image"></p><h3 id="🚀-활용-예시"><a href="#🚀-활용-예시" class="headerlink" title="🚀 활용 예시"></a>🚀 활용 예시</h3><p><em>칠면조를 오리로 변환하기 위해서는… (둘다 새이긴 하니까)</em></p><blockquote><p>Duck 객체가 모자라서 Turkey 객체를 대신 사용해야 하는 상황이라고 해보자.<br>인터페이스가 다르기 때문에 Turkey객체를 바로 사용할 수는 없다.<br>어댑터를 만들어 보자.</p></blockquote><h4 id="오리-인터페이스"><a href="#오리-인터페이스" class="headerlink" title="오리 인터페이스"></a>오리 인터페이스</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>; <span class="comment">//오리는 꽥꽥</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="오리-구현체"><a href="#오리-구현체" class="headerlink" title="오리 구현체"></a>오리 구현체</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">implements</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Quack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m flying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="칠면조-인터페이스"><a href="#칠면조-인터페이스" class="headerlink" title="칠면조 인터페이스"></a>칠면조 인터페이스</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span></span>; <span class="comment">//칠면조는 이렇게 운다..</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="칠면조-구현체"><a href="#칠면조-구현체" class="headerlink" title="칠면조 구현체"></a>칠면조 구현체</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildTurkey</span> <span class="keyword">implements</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Gobble gobble&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m flying a short distance&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="어댑터-구현"><a href="#어댑터-구현" class="headerlink" title="어댑터 구현"></a><strong>어댑터 구현</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurkeyAdapter</span> <span class="keyword">implements</span> <span class="title">Duck</span> </span>&#123; <span class="comment">//오리인터페이스를 구현한다.</span></span><br><span class="line">    Turkey turkey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TurkeyAdapter</span><span class="params">(Turkey turkey)</span> </span>&#123; <span class="comment">//생성자에서 칠면조를 받는다.</span></span><br><span class="line">        <span class="keyword">this</span>.turkey = turkey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        turkey.gobble(); <span class="comment">//변환 작업</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        turkey.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuckTestDrive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MallardDuck duck = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">        WildTurkey turkey = <span class="keyword">new</span> WildTurkey();</span><br><span class="line"></span><br><span class="line">        Duck turkeyAdapter = <span class="keyword">new</span> TurkeyAdapter(turkey);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;The turkey says...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        turkey.gobble();</span><br><span class="line">        turkey.fly();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;The Duck says...&quot;</span>);</span><br><span class="line">        testDuck(duck);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;The TurkeyAdapter says...&quot;</span>);</span><br><span class="line">        testDuck(turkeyAdapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDuck</span><span class="params">(Duck duck)</span> </span>&#123;</span><br><span class="line">        duck.quack();</span><br><span class="line">        duck.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="🚌-정리"><a href="#🚌-정리" class="headerlink" title="🚌 정리"></a>🚌 정리</h3><ul><li>클라이언트 -&gt; <code>request()</code> -&gt; 어댑터 - <code>translatedRequest()</code> -&gt; 어댑티.</li><li>클라이언트는 타겟 인터페이스에 맞게 구현, 어댑터는 타겟 인터페이스를 구현하며, 어댑티 인스턴스가 들어있음.</li></ul><hr><h2 id="🗿-파사드-패턴의-이해"><a href="#🗿-파사드-패턴의-이해" class="headerlink" title="🗿 파사드 패턴의 이해"></a>🗿 파사드 패턴의 이해</h2><blockquote><p>패턴을 사용할때는 항상 패턴이 어떤 용도로 쓰이는지를 잘 알아둬야 한다.<br>퍼사드 패턴은 단순화된 인터페이스를 통해서 서브시스템을 더 쉽게 사용할 수 있도록 하기위한 용도로 쓰인다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/55419159/140728533-8bf247c6-484d-4375-9746-d49960e445c3.png" alt="image"></p><h3 id="💿-DVD영화를-보려고하면"><a href="#💿-DVD영화를-보려고하면" class="headerlink" title="💿 DVD영화를 보려고하면.."></a>💿 DVD영화를 보려고하면..</h3><blockquote><p>홈씨어터로 퍼사드 패턴을 구현해보자.<br>전선과 프로젝터를 설치하고, 각 장치들을 케이블로 연결하고 등등 여러 인터페이스들이 나열되어 있다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/55419159/140728598-7bcbeb79-d888-413f-bca6-368863c1e56d.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>팝콘 기계를켠다.</span><br><span class="line"><span class="number">2.</span>팝콘 튀기기 시작.</span><br><span class="line"><span class="number">3.</span>전등을 어둡게 조절</span><br><span class="line"><span class="number">4.</span>스크린을 내린다.</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line"><span class="number">12.</span>DVD 플레이어를 켠다</span><br><span class="line"><span class="number">13.</span>DVD를 재생한다.</span><br><span class="line"></span><br><span class="line">poper.on();</span><br><span class="line">poper.pop();</span><br><span class="line">light.dim(<span class="number">10</span>)</span><br><span class="line">screen.down();</span><br><span class="line">.....</span><br><span class="line">dvd.on();</span><br><span class="line">dvd.play(movie);</span><br></pre></td></tr></table></figure><blockquote><p><em>너무 복잡하다… 버튼하나로 모든 세팅이 끝나게 할 수는 없을까?</em></p></blockquote><ul><li>이런 경우에 퍼사드를 사용하면 된다.</li><li>퍼사드 패턴은 <strong>인터페이스를 단순화시키기 위해서</strong> 인터페이스를 변경한다.</li><li><strong>통합 인터페이스</strong>를 제공하는 <strong>퍼사드 클래스</strong>를 구현함으로써 복잡한 시스템을 훨씬 쉽게 사용할 수 있다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeTheaterFacade</span> </span>&#123; <span class="comment">//영화 세팅의 모든것이 담겨있는 파사드 객체</span></span><br><span class="line">    Amplifier amp;</span><br><span class="line">    Tuner tuner;</span><br><span class="line">    Dvdplayer dvd;</span><br><span class="line">    CdPlayer cd;</span><br><span class="line">    Projector projector;</span><br><span class="line">    TheaterLights lights;</span><br><span class="line">    Screen screen;</span><br><span class="line">    PopcornPopper popper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeTheaterFacade</span><span class="params">(Amplifier amp,</span></span></span><br><span class="line"><span class="params"><span class="function">                             Tuner tuner,</span></span></span><br><span class="line"><span class="params"><span class="function">                             DvdPlayer dvd,</span></span></span><br><span class="line"><span class="params"><span class="function">                             CdPlayer cd,</span></span></span><br><span class="line"><span class="params"><span class="function">                             Projector projector,</span></span></span><br><span class="line"><span class="params"><span class="function">                             Screen screen,</span></span></span><br><span class="line"><span class="params"><span class="function">                             TheaterLights lights,</span></span></span><br><span class="line"><span class="params"><span class="function">                             PopcornPopper popper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.amp = amp;</span><br><span class="line">        <span class="keyword">this</span>.tunner = tuner;</span><br><span class="line">        <span class="keyword">this</span>.dvd = dvd;</span><br><span class="line">        <span class="keyword">this</span>.cd = cd;</span><br><span class="line">        <span class="keyword">this</span>.projector = projector;</span><br><span class="line">        <span class="keyword">this</span>.screen = screen;</span><br><span class="line">        <span class="keyword">this</span>.lights = lights;</span><br><span class="line">        <span class="keyword">this</span>.popper = popper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchMovie</span><span class="params">(String movie)</span> </span>&#123;  <span class="comment">//영화를 보고싶으면 그냥 이 메소드만 호출하면 된다!</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Get ready to watch a movie...&quot;</span>);</span><br><span class="line">        popper.on();</span><br><span class="line">        popper.pop();</span><br><span class="line">        lights.dim(<span class="number">10</span>);</span><br><span class="line">        screen.down();</span><br><span class="line">        projector.on();</span><br><span class="line">        projector.wideScreenMode();</span><br><span class="line">        amp.on();</span><br><span class="line">        amp.setDvd(dvd);</span><br><span class="line">        amp.setsurroundSound();</span><br><span class="line">        amp.setVolume(<span class="number">5</span>);</span><br><span class="line">        dvd.on();</span><br><span class="line">        dvd.play(movie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endMovie</span><span class="params">()</span> </span>&#123; <span class="comment">//끌 때도 마찬가지!</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Shutting movie theater down...&quot;</span>);</span><br><span class="line">        popper.off();</span><br><span class="line">        lights.on();</span><br><span class="line">        screen.up();</span><br><span class="line">        projector.off();</span><br><span class="line">        amp.off();</span><br><span class="line">        dvd.stop();</span><br><span class="line">        dvd.eject();</span><br><span class="line">        dvd.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeTheaterTestDrive</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// instantiate components here</span></span><br><span class="line">        HomeTheaterFacade homeTheater =</span><br><span class="line">                <span class="keyword">new</span> HomeTheaterFacade(amp, tuner, dvd, cd, projector, screen, lights, popper);</span><br><span class="line">        homeTheater.watchMovie(<span class="string">&quot;타짜&quot;</span>);</span><br><span class="line">        homeTheater.endMovie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="💰-최소지식원칙"><a href="#💰-최소지식원칙" class="headerlink" title="💰 최소지식원칙"></a>💰 최소지식원칙</h2><blockquote><p><em>‘정말 친한 친구하고만 얘기하라’</em></p></blockquote><p>어떤 객체든 그 객체와 상호작용을 하는 클래스의 개수에 주의해야 하며, 그런 객체들과 어떤 식으로 상호작용을 하는지에도 주의를 기울여야 한다는 뜻이다.</p><h3 id="⚙️-최소지식원칙을-지키는-방법"><a href="#⚙️-최소지식원칙을-지키는-방법" class="headerlink" title="⚙️ 최소지식원칙을 지키는 방법"></a>⚙️ 최소지식원칙을 지키는 방법</h3><p>어떻게 하면 여러 객체하고 인연을 맺는 것을 피할 수 있을까<br>어떤 메소드에서든지 아래와 같은 <strong>네 종류</strong>의 객체의 <code>메소드</code>만을 호출하면 된다.</p><ol><li>객체 <strong>자체</strong></li><li>메소드에 <strong>매개변수</strong>로 전달된 객체</li><li>그 메소드에서 생성하거나 <strong>인스턴스</strong>를 만든 객체</li><li>그 객체에 속하는 <strong>구성요소</strong></li></ol><h3 id="🥊-활용-예시"><a href="#🥊-활용-예시" class="headerlink" title="🥊 활용 예시"></a>🥊 활용 예시</h3><h4 id="원칙을-따르지-않은-경우"><a href="#원칙을-따르지-않은-경우" class="headerlink" title="원칙을 따르지 않은 경우"></a>원칙을 따르지 않은 경우</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thermometer thermometer=station.getThermometer(); <span class="comment">// station 오로부터 thermometer라는 객체를 받은다음</span></span><br><span class="line">        <span class="keyword">return</span> thermometer.getTemperature(); <span class="comment">//그 갹체의 getTemperature()메소드를 직접 호출.</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="원칙을-따르는-경우"><a href="#원칙을-따르는-경우" class="headerlink" title="원칙을 따르는 경우"></a>원칙을 따르는 경우</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> station.getTemperature(); <span class="comment">// Station 클래스에 thermometer에 요청을 해주는 메소드를 추가</span></span><br><span class="line">        <span class="comment">// 이렇게 하면 의존해야 하는 클래스의 개수를 줄일수 있다.</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="자동차로-예시를-들면"><a href="#자동차로-예시를-들면" class="headerlink" title="자동차로 예시를 들면"></a>자동차로 예시를 들면</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    Engine engine; <span class="comment">//이 클래스의 구성요소. 이 구성요소의 메소드는 호출해도 된다.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Key key)</span> </span>&#123; <span class="comment">// 매개변수로 전달된 객체의 메소드는 호출해도 된다.</span></span><br><span class="line"></span><br><span class="line">        Doors doors = <span class="keyword">new</span> Doors(); <span class="comment">//새로운 객체 생성. 이 객체의 메소드는 호출해도 된다.</span></span><br><span class="line">        <span class="keyword">boolean</span> authorized = key.turns(); <span class="comment">//매개변수로 전달된 객체의 메소드는 호출해도 된다.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (authorized) &#123;</span><br><span class="line">            engine.start(); <span class="comment">// 이 객체의 구성요소의 메소드는 호출해도 된다.</span></span><br><span class="line">            updateDashboardDisplay(); <span class="comment">// 객체 내에 있는 메소드는 호출해도 된다.</span></span><br><span class="line">            doors.lock(); <span class="comment">//직접 생성하거나 인스턴스를 만든 객체의 메소드는 호출해도 된다.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDashboardDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;🧤-어댑터-amp-파사드-패턴이란&quot;&gt;&lt;a href=&quot;#🧤-어댑터-amp-파사드-패턴이란&quot; class=&quot;headerlink&quot; title=&quot;🧤 어댑터 &amp;amp; 파사드 패턴이란&quot;&gt;&lt;/a&gt;🧤 어댑터 &amp;amp; 파사드 패턴이란&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="어댑터" scheme="http://won0935.github.io/tags/%EC%96%B4%EB%8C%91%ED%84%B0/"/>
    
    <category term="파사드" scheme="http://won0935.github.io/tags/%ED%8C%8C%EC%82%AC%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>커맨드 패턴</title>
    <link href="http://won0935.github.io/2021/11/06/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/2021-11-06-%EC%BB%A4%EB%A7%A8%EB%93%9C-%ED%8C%A8%ED%84%B4/2021-11-06-%EC%BB%A4%EB%A7%A8%EB%93%9C-%ED%8C%A8%ED%84%B4/"/>
    <id>http://won0935.github.io/2021/11/06/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/2021-11-06-%EC%BB%A4%EB%A7%A8%EB%93%9C-%ED%8C%A8%ED%84%B4/2021-11-06-%EC%BB%A4%EB%A7%A8%EB%93%9C-%ED%8C%A8%ED%84%B4/</id>
    <published>2021-11-06T09:58:47.875Z</published>
    <updated>2021-11-07T12:58:38.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="👋-커맨드패턴이란"><a href="#👋-커맨드패턴이란" class="headerlink" title="👋 커맨드패턴이란"></a>👋 커맨드패턴이란</h2><blockquote><p><em>레스토랑에서 주문을 했다고 가정하자</em><br><em><strong>손님</strong>은 항상 요리의 <strong>요리 방법</strong>을 알아야 하는가?</em><br><em>손님은 그저 <strong>웨이터</strong>에게 주문만 하면 된다. 요리 방법법을 알아야만 하는 건 <strong>요리사</strong> 뿐이다.</em></p></blockquote><p>커맨드 패턴(Command pattern)이란 <strong>요청을 객체의 형태로 캡슐화</strong>하여 사용자가 보낸 요청을 나중에 이용할 수 있도록<br>매서드 이름, 매개변수 등 요청에 필요한 정보를 저장 또는 로깅, 취소할 수 있게 하는 패턴이다.</p><br><ul><li>커맨드 패턴에는 <strong>명령</strong>(<code>command</code>), <strong>수신자</strong>(<code>receiver</code>), <strong>발동자</strong>(<code>invoker</code>), <strong>클라이언트</strong>(<code>client</code>)의 네개의 용어가 항상 따른다. </li><li><strong>커맨드 객체</strong>는 수신자 객체를 가지고 있으며, 수신자의 메서드를 호출하고, 이에 수신자는 자신에게 정의된 메서드를 수행한다. </li><li>커맨드 객체는 별도로 <strong>발동자 객체</strong>에 전달되어 명령을 발동하게 한다. </li><li><strong>발동자 객체</strong>는 필요에 따라 명령 발동에 대한 기록을 남길 수 있다. 한 발동자 객체에 <strong>다수</strong>의 커맨드 객체가 전달될 수 있다. </li><li><strong>클라이언트 객체</strong>는 발동자 객체와 하나 이상의 커맨드 객체를 보유한다. 클라이언트 객체는 어느 시점에서 어떤 명령을 수행할지를 결정한다. </li><li>명령을 수행하려면, <strong>클라이언트 객체</strong>는 발동자 객체로 커맨드 객체를 전달한다.</li></ul><hr><h2 id="🎩-커맨드패턴이-필요한-이유"><a href="#🎩-커맨드패턴이-필요한-이유" class="headerlink" title="🎩 커맨드패턴이 필요한 이유"></a>🎩 커맨드패턴이 필요한 이유</h2><p>커맨드 객체는 일련의 행동을 특정 리시버하고 연결시킴으로써 <strong>요구사항을 캡슐화</strong>한다.</p><p>이렇게 하기 위해 행동과 <strong>리시버</strong>를 한 객체에 집어넣고 메소드 하나만 외부에 공개하는 방법을 사용한다.</p><hr><h2 id="🔧-커맨드패턴-클래스-다이어그램"><a href="#🔧-커맨드패턴-클래스-다이어그램" class="headerlink" title="🔧 커맨드패턴 클래스 다이어그램"></a>🔧 커맨드패턴 클래스 다이어그램</h2><p><img src="https://user-images.githubusercontent.com/55419159/140605872-990096e0-f4bc-4d27-9e0a-40c5ee684c1d.png" alt="image"></p><h3 id="🍔-식당을-예로들어보자"><a href="#🍔-식당을-예로들어보자" class="headerlink" title="🍔 식당을 예로들어보자"></a>🍔 식당을 예로들어보자</h3><ol><li>손님이 웨이터에게 <strong>주문</strong>을 한다.</li><li>웨이터가 고객의 주문을 <strong>주문서</strong>에 적는다.</li><li><strong>웨이터</strong>는 주문서를 주방에 전달하여 주문을 요청한다.</li><li><strong>주방장</strong>은 주문서에 적힌 주문대로 음식을 자신의 노하우로 만든다.</li></ol><blockquote><ul><li>손님 == <code>클라이언트</code></li><li>웨이터 == <code>인보커 객체</code></li><li>주문서 == <code>커맨드 객체</code></li><li>주방장 == <code>리시버 객체</code></li><li>주문을 하는것 == <code>setCommand()</code></li><li>주문을 요청하는것 == <code>execute()</code></li></ul></blockquote><p>으로 볼수있다.</p><hr><h2 id="🎞-구현방법"><a href="#🎞-구현방법" class="headerlink" title="🎞 구현방법"></a>🎞 구현방법</h2><h3 id="1-커맨드-인터페이스-구현"><a href="#1-커맨드-인터페이스-구현" class="headerlink" title="1. 커맨드 인터페이스 구현"></a>1. 커맨드 인터페이스 구현</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-커맨드-구현-객체"><a href="#2-커맨드-구현-객체" class="headerlink" title="2. 커맨드 구현 객체"></a>2. 커맨드 구현 객체</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Light light;   <span class="comment">//이 Light 객체는 실제 불키는 방법을 알고있는 리시버 객체</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(Light light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-인보커"><a href="#3-인보커" class="headerlink" title="3. 인보커"></a>3. 인보커</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleRemoteControl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Command slot;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleRemotecontrol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        slot = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buttonWasPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        slot.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-클라이언트"><a href="#4-클라이언트" class="headerlink" title="4. 클라이언트"></a>4. 클라이언트</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteControlTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SimpleRemoteControl remote = <span class="keyword">new</span> SimpleRemoteControl();</span><br><span class="line">        Light light = <span class="keyword">new</span> Light();</span><br><span class="line">        LightOnCommand lightOn = <span class="keyword">new</span> LightOnCommand(light);</span><br><span class="line"></span><br><span class="line">        remote.setCommand(lightOn);</span><br><span class="line">        remote.buttonWasPressed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="매크로-커맨드"><a href="#매크로-커맨드" class="headerlink" title="+ 매크로 커맨드"></a>+ 매크로 커맨드</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacroCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Command[] commands;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MacroCommand</span><span class="params">(Command[] commands)</span> </span>&#123;  <span class="comment">//커맨드의 묶음으로 메소드 한번으로 실행할 수 있다.</span></span><br><span class="line">        <span class="keyword">this</span>.commands = commands;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> o = <span class="number">0</span>; i &lt; commands.length; i++) &#123;</span><br><span class="line">            commands[i].execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🥊-커맨드-패턴의-활용방식"><a href="#🥊-커맨드-패턴의-활용방식" class="headerlink" title="🥊 커맨드 패턴의 활용방식"></a>🥊 커맨드 패턴의 활용방식</h2><h3 id="메시지-큐"><a href="#메시지-큐" class="headerlink" title="메시지 큐"></a>메시지 큐</h3><ul><li>큐 한 쪽 끝은 커멘드를 추가하고 다른 쪽 끝에는 커맨드를 처리하기 위한 스레드들이 대기.</li><li>각 스레드에서는 execute() 메소드를 호출하고 그 호출이 완료되고 나면 커맨드 객체를 보내고 새로운 커맨드</li><li>객체를 가져온다.</li></ul><h3 id="리퀘스트-로깅"><a href="#리퀘스트-로깅" class="headerlink" title="리퀘스트 로깅"></a>리퀘스트 로깅</h3><ul><li>자바에서는 이런 메소드를 객체 직렬화를 통해 구현할 수도 있지만, 직렬화와 관련된 제약 조건때문에 쉽지않을수 있다.</li><li>커맨더 패턴을 이용한다면, Command 인터페이스에 store(), load() 라는 메소드를 추가하여 기능을 지원 가능하다.</li><li>인보커 클래스가 Command1, Command2, Command3.. 각각 커멘드를 execute() 할때마다 각 Command 들은 store()를 실행시켜 디스크에 각각의 객체를을 저장한다. </li><li>컴퓨터가 다운되어 모든작업이 멈추고 이후 컴퓨터가 복구되었을때, 디스크로 부터 각각의 Command1, Command2 .. 작업완료 하지 못한 객체들을 로딩하고 다시 순서대로 작업을 처리한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;👋-커맨드패턴이란&quot;&gt;&lt;a href=&quot;#👋-커맨드패턴이란&quot; class=&quot;headerlink&quot; title=&quot;👋 커맨드패턴이란&quot;&gt;&lt;/a&gt;👋 커맨드패턴이란&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;레스토랑에서 주문을 했다고 가정하자&lt;/</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="커맨드" scheme="http://won0935.github.io/tags/%EC%BB%A4%EB%A7%A8%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>m1 맥에서 144hz 롤하기</title>
    <link href="http://won0935.github.io/2021/10/30/%EA%B2%8C%EC%9E%84/2021-10-30-m1-league-of-legend/"/>
    <id>http://won0935.github.io/2021/10/30/%EA%B2%8C%EC%9E%84/2021-10-30-m1-league-of-legend/</id>
    <published>2021-10-30T07:18:02.729Z</published>
    <updated>2021-10-30T07:18:02.729Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>결론부터 말하면 롤 <strong>설정 값</strong>을 바꿔주면 <strong>m1 macbook Air</strong>로 <em>144hz 방어</em>가 가능하다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/55419159/139523580-e90497ce-2cab-444b-b137-c17ae0875f05.png"></p><h2 id="테스트-스펙"><a href="#테스트-스펙" class="headerlink" title="테스트 스펙"></a>테스트 스펙</h2><ul><li>macbook air m1(2020) 8g 256gb (깡통 맥북에어 옵션)</li><li>qhd 165hz 외장모니터</li></ul><br><h2 id="방법"><a href="#방법" class="headerlink" title="방법"></a>방법</h2><h3 id="1-finder-‘응용-프로그램’-‘리그오브레전드’-오른쪽클릭-‘패키지-내용보기’"><a href="#1-finder-‘응용-프로그램’-‘리그오브레전드’-오른쪽클릭-‘패키지-내용보기’" class="headerlink" title="1. finder - ‘응용 프로그램’ - ‘리그오브레전드’ 오른쪽클릭 ‘패키지 내용보기’"></a>1. finder - ‘응용 프로그램’ - ‘리그오브레전드’ 오른쪽클릭 ‘패키지 내용보기’</h3><p>   <img src="https://user-images.githubusercontent.com/55419159/139523689-d613a586-55f2-426c-9e10-09e776c04450.png"></p><br><h3 id="2-아래의-경로로-들어감"><a href="#2-아래의-경로로-들어감" class="headerlink" title="2. 아래의 경로로 들어감"></a>2. 아래의 경로로 들어감</h3><ul><li>LoL/Config/game.cfg</li><li>텍스트 에디터로 열기</li></ul><p><img src="https://user-images.githubusercontent.com/55419159/139523809-a896357e-4c3b-413a-8474-6fc4ec9ecca4.png"></p><br><h3 id="3-General-마지막-항목에-“MetalBetaTest-true”-추가"><a href="#3-General-마지막-항목에-“MetalBetaTest-true”-추가" class="headerlink" title="3. [General] 마지막 항목에 “MetalBetaTest=true” 추가"></a>3. [General] 마지막 항목에 “MetalBetaTest=true” 추가</h3><p><img src="https://user-images.githubusercontent.com/55419159/139523849-60136e47-3f6b-4ae4-b22d-15f066f4f16b.png"></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>상옵기준 매우 쾌적하게 플레이 가능 (심지어 발열도 없다.)</li><li>심지어 한타중에도 프레임드랍이 없다…🤔</li><li>게임하려고 맥북사는 사람들은 없겠지만 롤하려고 맥북은 사도 될지도…?</li></ul><br><p>참고 : <a href="!%5B%5D(https://devtrackers.gg/leagueoflegends/p/c1948cdc-mac-on-metal-beta-testing)">Mac on Metal Beta Testing</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;결론부터 말하면 롤 &lt;strong&gt;설정 값&lt;/strong&gt;을 바꿔주면 &lt;strong&gt;m1 macbook Air&lt;/strong&gt;로 &lt;em&gt;144hz 방어&lt;/em&gt;가 가능하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img s</summary>
      
    
    
    
    <category term="게임" scheme="http://won0935.github.io/categories/%EA%B2%8C%EC%9E%84/"/>
    
    
    <category term="m1" scheme="http://won0935.github.io/tags/m1/"/>
    
    <category term="롤" scheme="http://won0935.github.io/tags/%EB%A1%A4/"/>
    
    <category term="league of legend" scheme="http://won0935.github.io/tags/league-of-legend/"/>
    
    <category term="mac on metal" scheme="http://won0935.github.io/tags/mac-on-metal/"/>
    
  </entry>
  
  <entry>
    <title>팩토리 패턴</title>
    <link href="http://won0935.github.io/2021/10/28/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/2021-10-20-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4/2021-10-20-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4/"/>
    <id>http://won0935.github.io/2021/10/28/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/2021-10-20-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4/2021-10-20-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4/</id>
    <published>2021-10-28T11:13:20.382Z</published>
    <updated>2021-10-28T11:13:20.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="⛳-들어가기-전에"><a href="#⛳-들어가기-전에" class="headerlink" title="⛳ 들어가기 전에.."></a>⛳ 들어가기 전에..</h2><p>회사에서 같은 프로세스 내에서 각각의 제휴사에 서비스를 인터페이스해야 하는 경우가 있었다.</p><p>전체적인 프로세스 플로우를 인터페이스로, 제휴사를 클래스(Bean)로 만들어 팩토리 패턴으로 구현하였다. </p><p>동일한 프로세스 플로우 내에서 각기 다른 제휴사의 API와 연동해야 했는데 팩토리 패턴이 많은 도움이 되었다.</p><hr><h2 id="👋-팩토리패턴이란"><a href="#👋-팩토리패턴이란" class="headerlink" title="👋 팩토리패턴이란"></a>👋 팩토리패턴이란</h2><h3 id="⚾-팩토리-메소드-패턴"><a href="#⚾-팩토리-메소드-패턴" class="headerlink" title="⚾ 팩토리 메소드 패턴"></a>⚾ 팩토리 메소드 패턴</h3><blockquote><p>객체를 생성하기 위한 인터페이스를 정의하는데,<br>어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정하게 만든다.<br>즉, 팩토리 메소드 패턴을 이용하면 <strong>클래스의 인스턴스를 만드는 일을 서브클래스에게 맡기는 것</strong>.</p></blockquote><h3 id="🥎-추상-팩토리-패턴"><a href="#🥎-추상-팩토리-패턴" class="headerlink" title="🥎 추상 팩토리 패턴"></a>🥎 추상 팩토리 패턴</h3><blockquote><p><strong>인터페이스를 이용</strong>하여 서로 연관된,<br>또는 의존하는 객체를 구상 클래스를 지정하지 않고도 생성한다.</p></blockquote><hr><h2 id="🎩-팩토리패턴이-필요한-이유"><a href="#🎩-팩토리패턴이-필요한-이유" class="headerlink" title="🎩 팩토리패턴이 필요한 이유"></a>🎩 팩토리패턴이 필요한 이유</h2><p><code>new</code>를 사용하는 것은 구상 클래스의 인스턴스를 만드는 것이다.<br>당연히! 인터페이스가 아닌 <em>특정 구현을 사용하게 되어버리는 것</em>.<br>일련의 구상 클래스들이 있을때는 어쩔수 없이 다음과 같은 코드를 만들어야 하는 경우가 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Duck duck;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( type == picnic ) duck = <span class="keyword">new</span> MallardDuck();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( type == hunting ) duck = <span class="keyword">new</span> DecoyDuck();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( type == inBathTub) duck = <span class="keyword">new</span> RubberDuck();</span><br></pre></td></tr></table></figure><p>이런 코드가 있다는 것은, 뭔가 변경하거나 확장해야 할 때 <em>코드를 다시 확인하고 추가 또는 제거해야 한다는 것</em>을 의미한다.<br><strong>인터페이스</strong>에 맞춰서 코딩을 하면 시스템에서 일어날 수 있는 여러 변화를 이겨낼 수 있다.<br><strong>다형성</strong> 덕분에 어떤 클래스든 특정 인터페이스만 구현하면 사용할수 있기 때문이다.</p><p>반대로. 구상 클래스를 많이 사용하면 새로운 구상 클래스가 추가될 때마다 코드를 고쳐야 하기때문에 많은 문제가 생길수 있다.<br>즉, <em>변화에 대해 닫혀 있는 코드</em>가 되어버리는 것이다.</p><blockquote><p>바뀔 수 있는 부분을 찾아내서 바뀌지 않는 부분하고 분리시켜야 한다는 원칙.</p></blockquote><hr><h2 id="🎢-고전적인-팩토리-패턴"><a href="#🎢-고전적인-팩토리-패턴" class="headerlink" title="🎢 고전적인 팩토리 패턴"></a>🎢 고전적인 팩토리 패턴</h2><ul><li><strong>피자 가게</strong>를 운영하고 있고 <strong>피자가게 클래스</strong>를 만들어야 된다고 가정한다.<blockquote><p>피자가게는 다양한 피자가 있을 수 있다.<br>또한 다양한 피자가게가 있을 수 있다.</p></blockquote></li></ul><h3 id="🎞-기존소스"><a href="#🎞-기존소스" class="headerlink" title="🎞 기존소스"></a>🎞 기존소스</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       Pizza pizza;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//추가하거나 제거 시 매번 바뀌어야 하는부분</span></span><br><span class="line">       <span class="keyword">if</span>(type.equals(<span class="string">&quot;cheese&quot;</span>)) pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">&quot;greek&quot;</span>)) pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">&quot;pepperoni&quot;</span>)) pizza = <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">       <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">       pizza.prepare();</span><br><span class="line">       pizza.bake();</span><br><span class="line">       pizza.cut();</span><br><span class="line">       pizza.box();</span><br><span class="line">       <span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-피자-팩토리를-만든다"><a href="#1-피자-팩토리를-만든다" class="headerlink" title="1. 피자 팩토리를 만든다."></a>1. 피자 팩토리를 만든다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>&#123; <span class="comment">//이런 경우에는 static메소드로 선언하는 경우가 종종 있음.</span></span><br><span class="line"></span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pizza.equals(<span class="string">&quot;cheese&quot;</span>)) pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line"><span class="keyword">if</span>(pizza.equals(<span class="string">&quot;pepper&quot;</span>)) pizza = <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line"><span class="keyword">if</span>(pizza.equals(<span class="string">&quot;clam&quot;</span>)) pizza = <span class="keyword">new</span> ClamPizza();</span><br><span class="line"><span class="keyword">if</span>(pizza.equals(<span class="string">&quot;veggie&quot;</span>)) pizza = <span class="keyword">new</span> VeggiePizza();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-피자-가게를-만든다"><a href="#2-피자-가게를-만든다" class="headerlink" title="2. 피자 가게를 만든다."></a>2. 피자 가게를 만든다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span></span>&#123;</span><br><span class="line"></span><br><span class="line">SimplePizzaFactory simplePizzaFactory;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PizzaStore</span><span class="params">(SimplePizzaFactory simplePizzaFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.simplePizzaFactory = simplePizzaFactory;  <span class="comment">//피자 가게를 동적으로 설정</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Pizza pizza;</span><br><span class="line">pizza = simplePizzaFactory.createPizza(type); <span class="comment">//수정 안해도 됨</span></span><br><span class="line">pizza.prepare();</span><br><span class="line">pizza.bake();</span><br><span class="line">pizza.cut();</span><br><span class="line">pizza.box();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-다양한-피자가게가-생긴다"><a href="#3-다양한-피자가게가-생긴다" class="headerlink" title="3. 다양한 피자가게가 생긴다."></a>3. 다양한 피자가게가 생긴다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PizzaStore nyStore = <span class="keyword">new</span> PizzaStore(<span class="keyword">new</span> NYPizzaFactory());</span><br><span class="line">nyStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br><span class="line"></span><br><span class="line">PizzaStore chicagoStore = <span class="keyword">new</span> PizzaStore(<span class="keyword">new</span> ChicagoPizzafactory());</span><br><span class="line">chicagoStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>각 피자가게에서 <code>orderPizza()</code> 만 호출하면 피자를 생성할 수 있게 되었다.</li></ul><blockquote><p>그러나, 각 팩토리를 가진 피자가게 체인점들이 서로의 구현방식이 달라지는 일이 발생할수도 있게 되었다.<br>(PizzaStore가 각각 있다보니 굽는 방식이 달라진다거나 피자를 자르는 단계를 빼먹거나 하는..)</p></blockquote><hr><h2 id="🎟-팩토리-메소드-패턴"><a href="#🎟-팩토리-메소드-패턴" class="headerlink" title="🎟 팩토리 메소드 패턴"></a>🎟 팩토리 메소드 패턴</h2><blockquote><p>피자가게와 피자 <strong>제작 과정 전체를 하나로 묶어주는 프레임워크</strong>를 만들어야 된다는 결론!!<br>파자를 만드는 활동 자체는 전부 PizzaStore 클래스에 국한시키면서도 분점마다 고유의 스타일을 살릴 수 있는 방법은 ??</p></blockquote><h3 id="4-피자가게를-묶는-추상-클래스를-만든다-프렌차이즈-본사랄까"><a href="#4-피자가게를-묶는-추상-클래스를-만든다-프렌차이즈-본사랄까" class="headerlink" title="4. 피자가게를 묶는 추상 클래스를 만든다. (프렌차이즈 본사랄까..)"></a>4. 피자가게를 묶는 추상 클래스를 만든다. (프렌차이즈 본사랄까..)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span></span>&#123; <span class="comment">//추상 클래스로 구현</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Pizza pizza;</span><br><span class="line">pizza = createPizza(type);</span><br><span class="line">pizza.prepare();</span><br><span class="line">pizza.bake();</span><br><span class="line">pizza.cut();</span><br><span class="line">pizza.box();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>; <span class="comment">//Pizza 인스턴스를 만드는 일은 팩토리 역할을 하는 메소드에서 맡아 처리</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-각-피자가게에서-추상클래스-본사-를-상속받게-한다"><a href="#5-각-피자가게에서-추상클래스-본사-를-상속받게-한다" class="headerlink" title="5. 각 피자가게에서 추상클래스(본사)를 상속받게 한다."></a>5. 각 피자가게에서 추상클래스(본사)를 상속받게 한다.</h3><p>이제 각 분점을 위한 지역별로 서브클래스를 만들어줘야 한다. 피자의 스타일은 각 서브클래스에서 결정.</p><p><img src="https://user-images.githubusercontent.com/55419159/139077742-76ac1027-09c3-4e42-8046-82a2b4e0cb54.jpg" alt="image"></p><p>이제 <code>ChicagoPizzaStore</code>, <code>NYPizzaStore</code> 에는 구상 피자클래스를 분기해주는 각각의 <code>createPizza()</code> 메소드가 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStore</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(type.equals(<span class="string">&quot;cheese&quot;</span>)) pizza = <span class="keyword">new</span> NYStyleCheesePizza();</span><br><span class="line"><span class="keyword">if</span>(type.equals(<span class="string">&quot;peper&quot;</span>)) pizza = <span class="keyword">new</span> NYStylePepperoniPizza();</span><br><span class="line"><span class="keyword">if</span>(type.equals(<span class="string">&quot;clam&quot;</span>)) pizza = <span class="keyword">new</span> NYStyleClamPizza();</span><br><span class="line"><span class="keyword">if</span>(type.equals(<span class="string">&quot;veggie&quot;</span>)) pizza = <span class="keyword">new</span> NYStyleVeggiePizza();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChicagoPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStore</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(type.equals(<span class="string">&quot;cheese&quot;</span>)) pizza = <span class="keyword">new</span> ChicagoStyleCheesePizza();</span><br><span class="line">        <span class="keyword">if</span>(type.equals(<span class="string">&quot;peper&quot;</span>)) pizza = <span class="keyword">new</span> ChicagoStylePepperoniPizza();</span><br><span class="line">        <span class="keyword">if</span>(type.equals(<span class="string">&quot;clam&quot;</span>)) pizza = <span class="keyword">new</span> ChicagoStyleClamPizza();</span><br><span class="line">        <span class="keyword">if</span>(type.equals(<span class="string">&quot;veggie&quot;</span>)) pizza = <span class="keyword">new</span> ChicagoStyleVeggiePizza();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="6-피자-추상클래스를-만든다-순수한-피자-그-자체"><a href="#6-피자-추상클래스를-만든다-순수한-피자-그-자체" class="headerlink" title="6. 피자 추상클래스를 만든다.(순수한 피자 그 자체)"></a>6. 피자 추상클래스를 만든다.(순수한 피자 그 자체)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line">String dough;</span><br><span class="line">String sauce;</span><br><span class="line">ArrayList&lt;String&gt; toppings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Preparing : &quot;</span>+name);</span><br><span class="line">System.out.println(<span class="string">&quot;Tossing dough...&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Adding source&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Adding toppings&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String topping : toppings) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;\ttopping : &quot;</span>+topping);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">&quot;Bake for 25 minutes at 350&quot;</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">&quot;Cutting the pizza into diagonal slices&quot;</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">&quot;Place pizza in official PizzaStore box&quot;</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name; &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="7-다양한-피자를-만들어-피자-추상클래스를-상속한다"><a href="#7-다양한-피자를-만들어-피자-추상클래스를-상속한다" class="headerlink" title="7. 다양한 피자를 만들어 피자 추상클래스를 상속한다."></a>7. 다양한 피자를 만들어 피자 추상클래스를 상속한다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYStyleCheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NYStyleCheesePizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">&quot;NY Style CheesePizza&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>.dough = <span class="string">&quot;Thin Crust Dough&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>.sauce = <span class="string">&quot;Marinara Sauce&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>.toppings.add(<span class="string">&quot;Grated Reggiano Cheese&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChicagoStyleCheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChicagoStyleCheesePizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">&quot;Chicago Style CheesePizza&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>.dough = <span class="string">&quot;Extra Thick Crust Dough&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>.sauce = <span class="string">&quot;Plum Tomato Sauce&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>.toppings.add(<span class="string">&quot;Shredded mozzarella Cheese&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;Cutting the pizza into square slices&quot;</span>); &#125; <span class="comment">//바꾸고 싶은 메소드만 오버라이딩</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="8-피자를-주문한다"><a href="#8-피자를-주문한다" class="headerlink" title="8. 피자를 주문한다."></a>8. 피자를 주문한다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaTestDrive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">PizzaStore nyStore = <span class="keyword">new</span> NYPizzaStore();</span><br><span class="line">PizzaStore chicagoStore = <span class="keyword">new</span> ChicagoPizzaStore();</span><br><span class="line"></span><br><span class="line">Pizza nySytpePizza = nyStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br><span class="line">System.out.println(nySytpePizza.getname());</span><br><span class="line"></span><br><span class="line">Pizza chicagoStypePizza = chicagoStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br><span class="line">System.out.println(chicagoStypePizza.getname());</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>모든 팩토리 패턴에서는 <strong>객체 생성을 캡슐화</strong> 한다.</li><li>팩토리 메소드 패턴에서는 <em>서브 클래스에서 어떤 클래스를 만들지를 결정하게 함</em>으로써 객체 생성을 캡슐화 한다.</li></ul><ul><li>생산자 클래스(피자가게)</li></ul><p><img src="https://user-images.githubusercontent.com/55419159/139077751-6a262811-5faf-4937-b7f1-5fb3447d8b90.jpg" alt="image2"></p><ul><li>제품 클래스(피자)</li></ul><p><img src="https://user-images.githubusercontent.com/55419159/139077752-b27d2d2f-57fb-4226-bab6-f890d0f70a74.jpg" alt="image3"></p><p>위 클래스 다이어그램에서는 <code>PizzaStore</code> 추상 클래스에서 객체를 만들기 위한 메소드,<br>즉 팩토리 메소드를 위한 인터페이스를 제공한다는 것을 알수있다. </p><p><code>PizzaStore</code>에 구현되어 있는 다른 메소드 <code>orderPizza()</code> 에서는 팩토리 메소드에 의해 생산된 제품을 가지고 필요한 작업을 처리한다.<br>하지만 실제 팩토리 메소드를 구현하고 제품(객체 인스턴스)을 만들어 내는 일은 <strong>서브클래스</strong>에서만 할수 있다.</p><hr><h2 id="🎭-디자인원칙-의존성-뒤집기-원칙"><a href="#🎭-디자인원칙-의존성-뒤집기-원칙" class="headerlink" title="🎭 디자인원칙 : 의존성 뒤집기 원칙"></a>🎭 디자인원칙 : 의존성 뒤집기 원칙</h2><blockquote><p>추상화된 것에 의존하도록 만들어라. 구상 클래스에 의존하도록 만들지 않도록 한다.</p></blockquote><p><del>구현클래스에 의존하는 형태</del></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PizzaStore -&gt; NYStyleCheesePizza</span><br><span class="line">PizzaStore -&gt; ChicagoStypeCheesePizza</span><br><span class="line">PizzaStore -&gt; NYStyleVeggiePizza</span><br></pre></td></tr></table></figure><p><del>-&gt; 좋지않음</del></p><p>추상클래스(인터페이스)를 의존하는 형태</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PizzaStore -&gt; Pizza</span><br><span class="line">Pizza &lt;- NYStyleCheesePizza</span><br><span class="line">Pizza &lt;- ChicagoStyleCheesePizza</span><br><span class="line">Pizza &lt;- NYStyleVeggiePizza</span><br></pre></td></tr></table></figure><p> -&gt; <strong>좋음</strong></p><h3 id="🛒-원칙에-도움이-되는-가이드"><a href="#🛒-원칙에-도움이-되는-가이드" class="headerlink" title="🛒 원칙에 도움이 되는 가이드"></a>🛒 원칙에 도움이 되는 가이드</h3><p><em><strong>1. 어떤 변수에도 구상 클래스에 대한 레퍼런스를 지정하지 않는다.</strong></em></p><ul><li><code>new</code> 연산자를 사용하면 레퍼런스를 사용하게 되는 것이다.</li></ul><p><em><strong>2. 구상 클래스에서 유도된 클래스를 만들지 않는다.</strong></em></p><ul><li>구상클래스에서 유도된 클래스를 만들면 특정 구상 클래스에 의존하게된다, 추상화 된 것을 사용해야 한다.</li></ul><p><em><strong>3. 베이스 클래스에 이미 구현되어 있던 메소드를 오버라이드 하지 않는다.</strong></em></p><ul><li>이미 구현되어 있는 메소드를 오버라이드 한다는 것은 애초부터 베이스 클래스가 제대로 추상화 된것이 아니었다고 볼 수 있다. </li><li>베이스 클래스에서 메소드를 정의할 때는 모든 서브 클래스에서 공유할 수 있는 것만 정의해야한다.</li></ul><hr><h2 id="🦺-추상-팩토리-패턴"><a href="#🦺-추상-팩토리-패턴" class="headerlink" title="🦺 추상 팩토리 패턴"></a>🦺 추상 팩토리 패턴</h2><p>이렇게 PizzaStore 디자인이 모양새를 갖췄다. 유연한 프레임워크도 만들어 졌고, 디자인 원칙도 충실하게 지켰다.</p><p>각각 체인점들이 미리 정해놓은 절차를 잘 따르고 있지만 몇몇 체인점들이 자잘한 재료를 더 싼 재료로 바꿔서 원가를 절감해 마진을 남기고 있다. </p><p>원재료의 품질까지 관리하는 방법이 있을까??</p><ul><li><strong>원재료 군</strong>을 만들어 파악하자. </li><li>제품에 들어가는 재료군(반죽, 소스, 치즈, 야채, 고기)은 같지만, 지역마다 재료의 구체적인 내용이 조금씩 다르다.</li></ul><ol><li>지역별로 팩토리를 만들어 각 생성 메소드를 구현하는 <code>PizzaingredientFactory</code> 클래스를 만든다.</li><li><code>ReggianoCheese</code>, <code>RedPeppers</code>, <code>ThickCrustDough</code>와 같이 팩토리에서 사용할 원재료 클래스들을 구현한다.</li><li>만든 원재료 공장을 <code>PizzaStore</code> 코드에서 사용하도록 함으로써 하나로 묶어준다.</li></ol><h3 id="9-원재료-공장을-만든다"><a href="#9-원재료-공장을-만든다" class="headerlink" title="9. 원재료 공장을 만든다."></a>9. 원재료 공장을 만든다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Dough <span class="title">createDough</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Cheese <span class="title">createCheese</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span> Veggies[] createVeggies();</span><br><span class="line"><span class="function"><span class="keyword">public</span> Pepperoni <span class="title">createPepperoni</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Clams <span class="title">createClams</span><span class="params">()</span></span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaingredientFactory</span> <span class="keyword">implements</span> <span class="title">PizzaIngredientFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dough <span class="title">createDough</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> ThinCrustdough(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> MarinaraSauce(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Cheese <span class="title">createCheese</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> ReggianoCheese(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Veggies[] createVeggies() &#123;</span><br><span class="line">Veggies veggies[] = &#123; <span class="keyword">new</span> Farlic(), <span class="keyword">new</span> Onion(), <span class="keyword">new</span> Mushroom(), <span class="keyword">new</span> RedPepper() &#125;;</span><br><span class="line"><span class="keyword">return</span> veggies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pepperoni <span class="title">createPepperoni</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> SlicedPepperoni(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Clams <span class="title">createClams</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Freshclams(); &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChicagoPizzaingredientFactory</span> <span class="keyword">implements</span> <span class="title">PizzaIngredientFactory</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dough <span class="title">createDough</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> ThickCrustDough(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> PlumTomatoSauce(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cheese <span class="title">createCheese</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> MozzarellaCheese(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Veggies[] createVeggies() &#123;</span><br><span class="line">        Veggies veggies[] = &#123; <span class="keyword">new</span> BlackOlives(), <span class="keyword">new</span> Spinach(), <span class="keyword">new</span> EggPlant()&#125;;</span><br><span class="line">        <span class="keyword">return</span> veggies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pepperoni <span class="title">createPepperoni</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Slicedpepperoni(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Clams <span class="title">createClams</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> FrozenClam(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-피자마다-재료는-다르다"><a href="#10-피자마다-재료는-다르다" class="headerlink" title="10. 피자마다 재료는 다르다."></a>10. 피자마다 재료는 다르다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line">Dough dough;</span><br><span class="line">Sauce sauce;</span><br><span class="line">Veggies veggies[];</span><br><span class="line">Cheese cheese;</span><br><span class="line">Pepperoni pepperoni;</span><br><span class="line">Clams clams;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>; <span class="comment">//추상 메소드로 변경됨.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">&quot;Bake for 25 minutes at 350&quot;</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">&quot;Cutting the pizza into diagonal slices&quot;</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">&quot;Place pizza in official PizzaStore box&quot;</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name; &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line"></span><br><span class="line">PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CheesePizza</span><span class="params">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dough = ingredientFactory.createDough();</span><br><span class="line"><span class="keyword">this</span>.sauce = ingredientFactory.createSauce();</span><br><span class="line"><span class="keyword">this</span>.cheese = ingredientFactory.createCheese();</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClamPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClamPizza</span><span class="params">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dough = ingredientFactory.createDough();</span><br><span class="line">        <span class="keyword">this</span>.sauce = ingredientFactory.createSauce();</span><br><span class="line">        <span class="keyword">this</span>.cheese = ingredientFactory.createCheese();</span><br><span class="line">        <span class="keyword">this</span>.clams = ingredientFactory.createClams();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-피자마다-지역마다-다른-피자를-만든다"><a href="#11-피자마다-지역마다-다른-피자를-만든다" class="headerlink" title="11. 피자마다, 지역마다 다른 피자를 만든다."></a>11. 피자마다, 지역마다 다른 피자를 만든다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStore</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">PizzaIngredientFactory ingredientFactory = <span class="keyword">new</span> NYPizzaingredientFactory();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(type.equals(<span class="string">&quot;cheese&quot;</span>))&#123;</span><br><span class="line">pizza = <span class="keyword">new</span> CheesePizza(ingredientFactory);</span><br><span class="line">pizza.setName(ingredientFactory.NY_STYLE+<span class="string">&quot; Cheese Pizza&quot;</span>);</span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">&quot;peper&quot;</span>))&#123;</span><br><span class="line">pizza = <span class="keyword">new</span> PepperoniPizza(ingredientFactory);</span><br><span class="line">pizza.setName(ingredientFactory.NY_STYLE+<span class="string">&quot; Pepperoni Pizza&quot;</span>);</span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">&quot;clam&quot;</span>))&#123;</span><br><span class="line">pizza = <span class="keyword">new</span> ClamPizza(ingredientFactory);</span><br><span class="line">pizza.setName(ingredientFactory.NY_STYLE+<span class="string">&quot; Clam Pizza&quot;</span>);</span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">&quot;veggie&quot;</span>))&#123;</span><br><span class="line">pizza = <span class="keyword">new</span> VeggiePizza(ingredientFactory);</span><br><span class="line">pizza.setName(ingredientFactory.NY_STYLE+<span class="string">&quot; Veggie Pizza&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="⛳-프로세스-정리"><a href="#⛳-프로세스-정리" class="headerlink" title="⛳ 프로세스 정리"></a>⛳ 프로세스 정리</h3><p><img src="https://user-images.githubusercontent.com/55419159/139077755-c920f73b-e347-41d4-b1a8-9f0bc5e028fa.jpg" alt="image4"></p><p>이제 전체적인 흐름은.</p><ol><li><p>뉴욕 피자가게를 만든다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PizzaStore nyPizzaStore = <span class="keyword">new</span> NYPizzaStore();</span><br></pre></td></tr></table></figure></li><li><p>주문을 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nyPizzaStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>orderPizza 메소드에서는 우선 createPizza() 메소드를 호출한다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pizza pizza = createPizza(<span class="string">&quot;cheese&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>createPizza() 메소드가 호출되면 원재료 공장이 돌아가기 시작한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pizza pizza = <span class="keyword">new</span> CheesePizza(nyIngredientFactory);</span><br></pre></td></tr></table></figure></li><li><p>피자를 준비하는 prepare()메소드가 호출되면 팩토리에 원재료 주문이 들어간다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dough = nyIngredientFactory.createDough();</span><br><span class="line">        sauce = nyIngredientFactory.createSauce();</span><br><span class="line">        cheese = nyIngredientFactory.createCheese();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>준비단계가 끝나고 orderPizza() 메소드에서는 피자를 굽고, 자르고, 포장한다.</p></li></ol><hr><h2 id="💎-요약"><a href="#💎-요약" class="headerlink" title="💎 요약"></a>💎 요약</h2><h3 id="추상-팩토리-패턴"><a href="#추상-팩토리-패턴" class="headerlink" title="추상 팩토리 패턴"></a>추상 팩토리 패턴</h3><blockquote><p>제품군을 생성하기 위한 <strong>인터페이스</strong>를 생성하고, 그 <strong>인터페이스를 구성</strong>하여 사용할수 있게끔 하는것.</p></blockquote><h3 id="추상-메소드-패턴"><a href="#추상-메소드-패턴" class="headerlink" title="추상 메소드 패턴"></a>추상 메소드 패턴</h3><blockquote><p>하나의 추상클래스에서 <strong>추상 메소드</strong>를 만들고, 서브클래스들이 <strong>그 추상메소드를 구현</strong>하여 인스턴스를 만들게끔 하는것.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;⛳-들어가기-전에&quot;&gt;&lt;a href=&quot;#⛳-들어가기-전에&quot; class=&quot;headerlink&quot; title=&quot;⛳ 들어가기 전에..&quot;&gt;&lt;/a&gt;⛳ 들어가기 전에..&lt;/h2&gt;&lt;p&gt;회사에서 같은 프로세스 내에서 각각의 제휴사에 서비스를 인터페이스해야</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="팩토리" scheme="http://won0935.github.io/tags/%ED%8C%A9%ED%86%A0%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>싱글톤 패턴</title>
    <link href="http://won0935.github.io/2021/10/27/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/2021-10-19-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4/2021-10-19-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4/"/>
    <id>http://won0935.github.io/2021/10/27/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/2021-10-19-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4/2021-10-19-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4/</id>
    <published>2021-10-27T13:48:15.469Z</published>
    <updated>2021-10-27T13:48:15.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 클래스의 인스턴스가 하나만 만들어지고,<br>어디서든지 그 인스턴스에 접근할 수 있도록 하기 위한 패턴</p></blockquote><h2 id="고전적인-싱글톤-패턴-문제-있음"><a href="#고전적인-싱글톤-패턴-문제-있음" class="headerlink" title="고전적인 싱글톤 패턴 (문제 있음)"></a>고전적인 싱글톤 패턴 (문제 있음)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> uniqueInstance;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>멀티쓰레드 환경에서는 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 부분에서  2개 이상의 인스턴스가 생성될 수 있다.</p><h2 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h2><h3 id="1-synchronized-사용"><a href="#1-synchronized-사용" class="headerlink" title="1. synchronized 사용"></a>1. <code>synchronized</code> 사용</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> uniqueInstance;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>단점 : 속도 저하  → 메소드가  <code>synchronized</code> 되면 약 100배 정도 성능 저하가 일어난다고 한다.</li></ul><h3 id="2-인스턴스를-처음부터-만들어-버림"><a href="#2-인스턴스를-처음부터-만들어-버림" class="headerlink" title="2. 인스턴스를 처음부터 만들어 버림"></a>2. 인스턴스를 처음부터 만들어 버림</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> uniqueInstance;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>클래스가 로딩될 때 JVM에서 Singleton의 유일한 인스턴스를 생성해준다.</li></ul><h3 id="3-DCL-Double-Checking-Locking-사용"><a href="#3-DCL-Double-Checking-Locking-사용" class="headerlink" title="3. DCL(Double-Checking Locking) 사용"></a>3. DCL(Double-Checking Locking) 사용</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                                  <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                                             uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                                  &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> uniqueInstance;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><code>volatile</code> 키워드를 사용하면 자바의 일종의 최적화인 리오더링(보통 컴파일 과정에서 일어나며, 프로그래머가 만들어낸 코드는 컴파일 될 때 좀더 빠르게 실행될 수 있도록 조작이 가해져 최적하됨)을 회피하여 읽기와 쓰기순서를 보장한다.</li><li>멀티스레딩을 쓰더라도 uniqueInstance변수가 Singleton 인스턴스로 초기화 되는 과정이 올바르게 진행되도록 할 수 있다.</li><li><strong>DCL은 자바1.5이상의 버전에서만 사용가능</strong>하다.</li><li>자바 1.4 및 그 전에 나온 버전의 JVM 중에는 volatile 키워드를 사용하더라도 동기화가 잘 안되는 것이 많다. 일종의 버그.</li></ul><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li>우리가 알고있던 싱글톤 패턴은 사실 <strong>싱글톤 패턴이 아님</strong>!</li><li>위의 3가지 방법을 사용하자</li><li>개인적으론 **생성자(2번)**가 가장 간단한 것 같음</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;해당 클래스의 인스턴스가 하나만 만들어지고,&lt;br&gt;어디서든지 그 인스턴스에 접근할 수 있도록 하기 위한 패턴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;고전적인-싱글톤-패턴-문제-있음&quot;&gt;&lt;a href=&quot;#고전적인-싱글톤</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="싱글톤" scheme="http://won0935.github.io/tags/%EC%8B%B1%EA%B8%80%ED%86%A4/"/>
    
  </entry>
  
  <entry>
    <title>처리율 제한 장치의 설계</title>
    <link href="http://won0935.github.io/2021/10/26/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/2021-10-13-%EC%B2%98%EB%A6%AC%EC%9C%A8-%EC%A0%9C%ED%95%9C-%EC%9E%A5%EC%B9%98%EC%9D%98-%EC%84%A4%EA%B3%84/2021-10-13-%EC%B2%98%EB%A6%AC%EC%9C%A8-%EC%A0%9C%ED%95%9C-%EC%9E%A5%EC%B9%98%EC%9D%98-%EC%84%A4%EA%B3%84/"/>
    <id>http://won0935.github.io/2021/10/26/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/2021-10-13-%EC%B2%98%EB%A6%AC%EC%9C%A8-%EC%A0%9C%ED%95%9C-%EC%9E%A5%EC%B9%98%EC%9D%98-%EC%84%A4%EA%B3%84/2021-10-13-%EC%B2%98%EB%A6%AC%EC%9C%A8-%EC%A0%9C%ED%95%9C-%EC%9E%A5%EC%B9%98%EC%9D%98-%EC%84%A4%EA%B3%84/</id>
    <published>2021-10-26T12:57:04.929Z</published>
    <updated>2021-10-26T12:57:04.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="처리율-제한-장치의-설계"><a href="#처리율-제한-장치의-설계" class="headerlink" title="처리율 제한 장치의 설계"></a>처리율 제한 장치의 설계</h1><blockquote><p>API 요청횟수가 특정 임계치를 넘어가면 추가로 도달한 요청은 처리를 중단하는 것</p></blockquote><hr><h2 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h2><ol><li>DoS공격 방지</li><li>비용절감</li><li>서버 과부하 방지</li></ol><hr><h1 id="처리율-제한-알고리즘"><a href="#처리율-제한-알고리즘" class="headerlink" title="처리율 제한 알고리즘"></a>처리율 제한 알고리즘</h1><h2 id="토큰-버킷"><a href="#토큰-버킷" class="headerlink" title="토큰 버킷"></a>토큰 버킷</h2><pre><code>&gt; 토큰을 발급하고 토큰의 갯수 만큼만 API 요청을 버킷에 담음버킷이 가득 찬 경우 API요청은 버려짐(overflow)&gt;</code></pre><p><img src="https://user-images.githubusercontent.com/55419159/138881073-2532be82-cc51-4872-a6be-f7e256b1a74e.png" alt="image"></p><pre><code>- 가장 간단하고 폭넓게 사용됨(아마존 등)- 메모리 효율성 높음- 버킷크기:토큰공급률 비율 튜닝이 관건</code></pre><hr><h2 id="누출-버킷"><a href="#누출-버킷" class="headerlink" title="누출 버킷"></a>누출 버킷</h2><pre><code>&gt; 토큰 버킷 알고리즘과 유사하지만 처리율이 고정큐(FIFO)로 구현&gt; </code></pre><p><img src="https://user-images.githubusercontent.com/55419159/138881283-90475661-ca10-481f-a3fb-2e7e3cae0168.png" alt="image"></p><ul><li>동작방식<ol><li>요청이 도착하면 큐가 가득 차 있는지 확인, 빈자리가 있는 경우 큐에 요청 추가</li><li>큐가 가득 차있는 경우 새 요청은 버림</li><li>지정된 시간마다 큐에서 요청을 꺼내어 처리</li></ol><ul><li>토큰 버킷 알고리즘과 유사</li><li>고정된 처리율을 가지고 있어 안정적 출력이 필요한 환경에 적합</li><li>단시간에 많은 처리율이 들어올 경우 취약함</li></ul></li></ul><hr><h2 id="고정-윈도-카운터"><a href="#고정-윈도-카운터" class="headerlink" title="고정 윈도 카운터"></a>고정 윈도 카운터</h2><ul><li>동작방식<ol><li>타임라인을 고정된 간격의 윈도로 나누고, 각 윈도마다 카운터를 붙임</li><li>요청이 접수될 때마다 이 카운터의 값은 1씩 증가함</li><li>이 카운터 값이 사전에 설정된 임계치에 도달하면 새로운 요청은<br>새 윈도가 열릴 때 까지 버려짐</li></ol></li></ul><p><img src="https://user-images.githubusercontent.com/55419159/138881425-aaf0ecc3-a73c-4007-9d36-3c9693f2062f.png" alt="image"></p><pre><code>- 메모리 효율 좋음- 윈도 경계에서 일시적으로 많은 트래픽이 몰려드는 경우, 기대했던 시스템의 처리 한도보다 많은 양의 요청을 처리하게 됨</code></pre><hr><h2 id="이동-윈도-로그"><a href="#이동-윈도-로그" class="headerlink" title="이동 윈도 로그"></a>이동 윈도 로그</h2><pre><code>&gt; 고정 윈도 카운터 알고리즘의 윈도 경계 부분에서 트래픽이 몰리는 경우를 보완하기 위한 알고리즘&gt; </code></pre><ul><li>동작방식<ol><li>요청의 타임스탬프를 추적함<br>타임스탬프는 보통 Redis의 Sorted Set과 같은 정렬 집합 캐시에 보관</li><li>새 요청이 오면 만료된 타임스탬프는 제거</li><li>새 요청의 타임 스탬프를 로그에 추가</li><li>로그의 크기가 허용치보다 같거나 작으면 요청을 시스템에 전달함<br>그렇지 않은 경우 처리는 거부됨</li></ol><ul><li>윈도 알고리즘의 처리율 한도를 넘지 않음</li><li>다량의 메모리 사용, 거부된 요청의 타임스탬프도 보관하기 때문</li></ul></li></ul><hr><h2 id="이동-윈도-카운터"><a href="#이동-윈도-카운터" class="headerlink" title="이동 윈도 카운터"></a>이동 윈도 카운터</h2><pre><code>&gt; 고정 윈도 카운터 + 이동 윈도 로그&gt; - 이전 시간대의 평균 처리율에 따라 현재 윈도의 상태를 계산하므로 짧은 시간에 몰리는 트래픽에도 잘 대응- 메모리 효율이 좋음- 직전 시간의 추정치를 계산하기 때문에 기준이 느슨함, But 심각한 건 아님</code></pre><hr><h1 id="프로세스"><a href="#프로세스" class="headerlink" title="프로세스"></a>프로세스</h1><ol><li>처리율 제한 규칙은 디스크에 보관한다.<br>작업 프로세스는 수시로 규칙을 디스크에서 읽어 캐시에 저장한다.</li><li>클라이언트가 요청을 서버에 보내면 요청은 먼저 처리율 제한 미들웨어에 도달한다.<br>카운터 및 마지막 요청의 타임스탬프를 레디스 캐시에서 가져온다. <ul><li>해당 요청이 처리율 제한에 걸리지 않은 경우 API서버로 보낸다.</li><li>해당 요청이 처리율 제한에 걸렸다면 429(too many request) 에러를 클라이언트에 보낸다.<br>한편 해당 요청은 그대로 버릴 수도 있고 메시지 큐에 저장할 수도 있다.</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;처리율-제한-장치의-설계&quot;&gt;&lt;a href=&quot;#처리율-제한-장치의-설계&quot; class=&quot;headerlink&quot; title=&quot;처리율 제한 장치의 설계&quot;&gt;&lt;/a&gt;처리율 제한 장치의 설계&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;API 요청횟수가 특정 </summary>
      
    
    
    
    <category term="가상면접 사례로 배우는 대규모 시스템 설계기초" scheme="http://won0935.github.io/categories/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/"/>
    
    
    <category term="시스템설계" scheme="http://won0935.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%84%A4%EA%B3%84/"/>
    
    <category term="대규모설계" scheme="http://won0935.github.io/tags/%EB%8C%80%EA%B7%9C%EB%AA%A8%EC%84%A4%EA%B3%84/"/>
    
    <category term="처리율제한" scheme="http://won0935.github.io/tags/%EC%B2%98%EB%A6%AC%EC%9C%A8%EC%A0%9C%ED%95%9C/"/>
    
    <category term="토큰버킷" scheme="http://won0935.github.io/tags/%ED%86%A0%ED%81%B0%EB%B2%84%ED%82%B7/"/>
    
    <category term="누출버킷" scheme="http://won0935.github.io/tags/%EB%88%84%EC%B6%9C%EB%B2%84%ED%82%B7/"/>
    
    <category term="이동윈도로그" scheme="http://won0935.github.io/tags/%EC%9D%B4%EB%8F%99%EC%9C%88%EB%8F%84%EB%A1%9C%EA%B7%B8/"/>
    
    <category term="고정윈도카운터" scheme="http://won0935.github.io/tags/%EA%B3%A0%EC%A0%95%EC%9C%88%EB%8F%84%EC%B9%B4%EC%9A%B4%ED%84%B0/"/>
    
  </entry>
  
  <entry>
    <title>안정 해시 설계</title>
    <link href="http://won0935.github.io/2021/10/26/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/2021-10-13-%EC%95%88%EC%A0%95-%ED%95%B4%EC%8B%9C-%EC%84%A4%EA%B3%84/2021-10-13-%EC%95%88%EC%A0%95-%ED%95%B4%EC%8B%9C-%EC%84%A4%EA%B3%84/"/>
    <id>http://won0935.github.io/2021/10/26/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/2021-10-13-%EC%95%88%EC%A0%95-%ED%95%B4%EC%8B%9C-%EC%84%A4%EA%B3%84/2021-10-13-%EC%95%88%EC%A0%95-%ED%95%B4%EC%8B%9C-%EC%84%A4%EA%B3%84/</id>
    <published>2021-10-26T12:53:30.299Z</published>
    <updated>2021-10-26T12:53:30.299Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>수평적 규모 확장을 위해서는 요청 또는 데이터를 서버로 균등하게 나누는 것이 중요<br>안정 해시는 이 목표를 달성하기 위해 보편적으로 사용하는 기술</p></blockquote><hr><h2 id="안정-해시-설계의-이점"><a href="#안정-해시-설계의-이점" class="headerlink" title="안정 해시 설계의  이점"></a>안정 해시 설계의  이점</h2><ul><li>서버가 추가되거나 삭제될 때 재배치되는 키의 수가 최소화된다.</li><li>데이터가 보다 균등하게 분포하게 되므로 수평적 규모 확장성을 달성하기 쉽다.</li><li>핫스팟(hotspot) 키 문제를 줄인다.</li></ul><hr><h3 id="만약-잘-분배가-되어있던-서버-하나가-죽었을-경우"><a href="#만약-잘-분배가-되어있던-서버-하나가-죽었을-경우" class="headerlink" title="만약 잘 분배가 되어있던 서버 하나가 죽었을 경우?"></a>만약 잘 분배가 되어있던 서버 하나가 죽었을 경우?</h3><h3 id="기존-해시-테이블"><a href="#기존-해시-테이블" class="headerlink" title="기존 해시 테이블"></a>기존 해시 테이블</h3><ul><li>모든 키를 재배치함</li></ul><p><img src="https://user-images.githubusercontent.com/55419159/138881514-e09e12fd-2764-40ee-9eef-2cf3a4a84f3f.png"></p><h3 id="안정-해시"><a href="#안정-해시" class="headerlink" title="안정 해시"></a>안정 해시</h3><ul><li>이상이 있는 부분만 재배치</li></ul><p><img src="https://user-images.githubusercontent.com/55419159/138881565-e60403c1-c98e-48ab-bb80-8a8c5f10320b.png"></p><hr><h2 id="기본-구현법"><a href="#기본-구현법" class="headerlink" title="기본 구현법"></a>기본 구현법</h2><ol><li>서버와 키를 균등 분포 해시 함수를 사용해 해시 링에 배치한다.</li><li>키의 위치에서 링을 시계 방향을 탐색하다 만나는 최초의 서버가 키가 저장될 서버다.</li></ol><p><strong>문제점</strong></p><ul><li>서버가 추가되거나 삭제될 때 파티션의 크기를 균등하게 유지하는게 불가능</li><li>키의 균등 분포를 달성하기가 어려움</li></ul><hr><h2 id="가상-노드"><a href="#가상-노드" class="headerlink" title="가상 노드"></a>가상 노드</h2><blockquote><p>기본 구현법의 문제를 해결하기 위한 방법<br>실제 노드를 가르키는 가상 노드를 만들어 해시 링에 균등하게 배치하는 방법</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;수평적 규모 확장을 위해서는 요청 또는 데이터를 서버로 균등하게 나누는 것이 중요&lt;br&gt;안정 해시는 이 목표를 달성하기 위해 보편적으로 사용하는 기술&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;안정-해시-설계의</summary>
      
    
    
    
    <category term="가상면접 사례로 배우는 대규모 시스템 설계기초" scheme="http://won0935.github.io/categories/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/"/>
    
    
    <category term="시스템설계" scheme="http://won0935.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%84%A4%EA%B3%84/"/>
    
    <category term="대규모설계" scheme="http://won0935.github.io/tags/%EB%8C%80%EA%B7%9C%EB%AA%A8%EC%84%A4%EA%B3%84/"/>
    
    <category term="안정해시" scheme="http://won0935.github.io/tags/%EC%95%88%EC%A0%95%ED%95%B4%EC%8B%9C/"/>
    
    <category term="가상노드" scheme="http://won0935.github.io/tags/%EA%B0%80%EC%83%81%EB%85%B8%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>시스템 설계 면접 공략법</title>
    <link href="http://won0935.github.io/2021/10/26/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/2021-10-13-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EB%A9%B4%EC%A0%91-%EA%B3%B5%EB%9E%B5%EB%B2%95/2021-10-13-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EB%A9%B4%EC%A0%91-%EA%B3%B5%EB%9E%B5%EB%B2%95/"/>
    <id>http://won0935.github.io/2021/10/26/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/2021-10-13-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EB%A9%B4%EC%A0%91-%EA%B3%B5%EB%9E%B5%EB%B2%95/2021-10-13-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EB%A9%B4%EC%A0%91-%EA%B3%B5%EB%9E%B5%EB%B2%95/</id>
    <published>2021-10-26T12:52:30.866Z</published>
    <updated>2021-10-26T12:52:30.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="효과적-면접을-위한-4단계-접근법"><a href="#효과적-면접을-위한-4단계-접근법" class="headerlink" title="효과적 면접을 위한 4단계 접근법"></a>효과적 면접을 위한 4단계 접근법</h1><h2 id="1-문제-이해-및-설계-범위-확정"><a href="#1-문제-이해-및-설계-범위-확정" class="headerlink" title="1. 문제 이해 및 설계 범위 확정"></a>1. 문제 이해 및 설계 범위 확정</h2><ul><li>구체적으로 어떤 기능들을 만들어야 하나</li><li>제품 사용자 수는 얼마나 되나</li><li>회사의 규모는 얼마나 빨리 커지리라 예상하나? 석 달, 여섯 달, 일년 뒤의 규모는 얼마가 되리라 예상하는가</li><li>회사가 주로 사용하는 기술 스택은 무엇인가</li><li>설계를 단순화 하기 위한 기존 서비스로는 어떤 것이 있는가</li></ul><p>→ 중요한 것은 모호함을 없에는 것</p><hr><h2 id="2-개략적인-설계안-제시-및-동의-구하기"><a href="#2-개략적인-설계안-제시-및-동의-구하기" class="headerlink" title="2. 개략적인 설계안 제시 및 동의 구하기"></a>2. 개략적인 설계안 제시 및 동의 구하기</h2><ul><li>청사진을 만들고 의견을 구하라ㅋ</li><li>화이트보드에 다이어그램 그리기<ul><li>클라이언트, API, 웹서버, DB, 캐시, CDN, MQ 등</li></ul></li><li>청사진이 제약사항에 부합하는지 확인하라</li></ul><hr><h2 id="3-상세-설계"><a href="#3-상세-설계" class="headerlink" title="3. 상세 설계"></a>3. 상세 설계</h2><ul><li>시스템에서 전반적으로 달성해야 할 목표와 기능 범위 확인</li><li>전체 설계의 개략적 청사진 마련</li><li>해당 청사진에 대한 면접관의 의견 청취</li><li>상세 설계에서 집중해야 할 영역들 확인</li></ul><hr><h2 id="4-마무리"><a href="#4-마무리" class="headerlink" title="4. 마무리"></a>4. 마무리</h2><ul><li>개선점 찾기 ex&gt; 병목구간</li><li>설계 핵심 요약</li><li>운영 관련 이슈<ul><li>메트릭, 모니터링, 로그, 배포 등</li></ul></li><li>시스템 확장 방식</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;효과적-면접을-위한-4단계-접근법&quot;&gt;&lt;a href=&quot;#효과적-면접을-위한-4단계-접근법&quot; class=&quot;headerlink&quot; title=&quot;효과적 면접을 위한 4단계 접근법&quot;&gt;&lt;/a&gt;효과적 면접을 위한 4단계 접근법&lt;/h1&gt;&lt;h2 id=&quot;1</summary>
      
    
    
    
    <category term="가상면접 사례로 배우는 대규모 시스템 설계기초" scheme="http://won0935.github.io/categories/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/"/>
    
    
    <category term="시스템설계" scheme="http://won0935.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%84%A4%EA%B3%84/"/>
    
    <category term="대규모설계" scheme="http://won0935.github.io/tags/%EB%8C%80%EA%B7%9C%EB%AA%A8%EC%84%A4%EA%B3%84/"/>
    
    <category term="면접" scheme="http://won0935.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>키-값 저장소 설계</title>
    <link href="http://won0935.github.io/2021/10/26/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/2021-10-13-%ED%82%A4-%EA%B0%92-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%84%A4%EA%B3%84/2021-10-13-%ED%82%A4-%EA%B0%92-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%84%A4%EA%B3%84/"/>
    <id>http://won0935.github.io/2021/10/26/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/2021-10-13-%ED%82%A4-%EA%B0%92-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%84%A4%EA%B3%84/2021-10-13-%ED%82%A4-%EA%B0%92-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%84%A4%EA%B3%84/</id>
    <published>2021-10-26T12:52:30.860Z</published>
    <updated>2021-10-26T12:52:30.860Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>비 관계형 데이터베이스<br>고유식별자(key)를 키로 가짐</li><li>키와 값 사이의 연결 관계를 “키-값” 쌍(pair)라고 표현</li></ul></blockquote><hr><h2 id="분산-키-값-저장소의-CAP-정리"><a href="#분산-키-값-저장소의-CAP-정리" class="headerlink" title="분산 키-값 저장소의 CAP 정리"></a>분산 키-값 저장소의 CAP 정리</h2><p>데이터 일관성(Consistency), 가용성(Availability), 파티션 감내성(Partition Tolerance)라 표현하며,<br>동시에 3가지 요구사항을 만족하는 것은 불가능하다는 정리</p><p><img src="https://user-images.githubusercontent.com/55419159/138880667-4a4e727b-07d8-44e0-99b5-14088750a4b2.png" alt="image">{: .image-center}</p><hr><h3 id="용어-정리"><a href="#용어-정리" class="headerlink" title="용어 정리"></a>용어 정리</h3><p>데이터 일관성(Consistency)</p><ul><li>분산 시스템에 접속하는 모든 클라이언트는 어떤 노드에 접속했느냐에 관계 없이 언제나 같은 데이터를 보게 되어야 한다.</li></ul><p>가용성(Availability)</p><ul><li>분산 시스템에 접속하는 클라이언트는 일부 노드에 장애가 발생하더라도 항상 응답을 받을 수 있어야 한다.</li></ul><p>파티션 감내성(Partition Tolerance)</p><ul><li>파티션은 두 노드 사이에 통신 장애가 발생하였음을 의미한다. 파티션 감내는 네트워크에 파티션이 생기더라도 시스템은 계속 동작하여야 한다는 것을 뜻한다.</li></ul><hr><h3 id="분산-키-값-저장소가-가져야하는-기능"><a href="#분산-키-값-저장소가-가져야하는-기능" class="headerlink" title="분산 키-값 저장소가 가져야하는 기능"></a>분산 키-값 저장소가 가져야하는 기능</h3><table><thead><tr><th>목표/문제</th><th>기술</th></tr></thead><tbody><tr><td>대규모 데이터 저장</td><td>안정 해시를 사용해 서버들에 부하 분산</td></tr><tr><td>읽기 연산에 대한 높은 가용성 보장</td><td>여러 데이터센터에 다중화</td></tr><tr><td>쓰기 연산에 대한 높은 가용성 보장</td><td>버저닝 및 벡터 시계를 사용한 충돌 해소</td></tr><tr><td>데이터 파티션</td><td>안정 해시</td></tr><tr><td>점진적 규모 확장성</td><td>안정 해시</td></tr><tr><td>다양성(heterogeneity)</td><td>안정 해시</td></tr><tr><td>조절 가능한 데이터 일관성</td><td>정족수 합의</td></tr><tr><td>일시적 장애 처리</td><td>느슨한 정족수 프로토콜과 단서 후 임시 위탁</td></tr><tr><td>영구적 장애 처리</td><td>머클 트리</td></tr><tr><td>데이터 센터 장애 대응</td><td>여러 데이터 센터에 걸친 데이터 다중화</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;비 관계형 데이터베이스&lt;br&gt;고유식별자(key)를 키로 가짐&lt;/li&gt;
&lt;li&gt;키와 값 사이의 연결 관계를 “키-값” 쌍(pair)라고 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;분산</summary>
      
    
    
    
    <category term="가상면접 사례로 배우는 대규모 시스템 설계기초" scheme="http://won0935.github.io/categories/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/"/>
    
    
    <category term="시스템설계" scheme="http://won0935.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%84%A4%EA%B3%84/"/>
    
    <category term="대규모설계" scheme="http://won0935.github.io/tags/%EB%8C%80%EA%B7%9C%EB%AA%A8%EC%84%A4%EA%B3%84/"/>
    
    <category term="키값저장소" scheme="http://won0935.github.io/tags/%ED%82%A4%EA%B0%92%EC%A0%80%EC%9E%A5%EC%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>개략적인 규모 추정</title>
    <link href="http://won0935.github.io/2021/10/26/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/2021-10-13-%EA%B0%9C%EB%9E%B5%EC%A0%81%EC%9D%B8-%EA%B7%9C%EB%AA%A8-%EC%B6%94%EC%A0%95/2021-10-13-%EA%B0%9C%EB%9E%B5%EC%A0%81%EC%9D%B8-%EA%B7%9C%EB%AA%A8-%EC%B6%94%EC%A0%95/"/>
    <id>http://won0935.github.io/2021/10/26/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/2021-10-13-%EA%B0%9C%EB%9E%B5%EC%A0%81%EC%9D%B8-%EA%B7%9C%EB%AA%A8-%EC%B6%94%EC%A0%95/2021-10-13-%EA%B0%9C%EB%9E%B5%EC%A0%81%EC%9D%B8-%EA%B7%9C%EB%AA%A8-%EC%B6%94%EC%A0%95/</id>
    <published>2021-10-26T12:52:30.856Z</published>
    <updated>2021-10-26T12:52:30.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2의-제곱-수"><a href="#2의-제곱-수" class="headerlink" title="2의 제곱 수"></a>2의 제곱 수</h1><ul><li>최소단위는 1바이트, 8비트</li><li>아스키 문자 하나 메모리크기가 1바이트</li></ul><h1 id="모든-프로그래머가-알아야-하는-응답-지연-값"><a href="#모든-프로그래머가-알아야-하는-응답-지연-값" class="headerlink" title="모든 프로그래머가 알아야 하는 응답 지연 값"></a>모든 프로그래머가 알아야 하는 응답 지연 값</h1><ul><li>메모리는 빠르지만 디스크는 아직도 느리다</li><li>디스크 탐색은 가능한 한 피하라</li><li>단순한 압축 알고리즘은 빠르다</li><li>데이터를 인터넷으로 전송하기 전에 가능하면 압축하라</li><li>데이터 센터는 보통 여러 지역에 분산되어있고, 센터들 간에 데이터를 주고 받는 데는 시간이 걸린다</li></ul><h1 id="가용성에-관계된-수치들"><a href="#가용성에-관계된-수치들" class="headerlink" title="가용성에 관계된 수치들"></a>가용성에 관계된 수치들</h1><blockquote><p>고가용성</p><p>시스템이 오랜 기간동안 지속적으로 중단 없이 운영될 수 있는 능력</p></blockquote><hr><h1 id="예제-트위터-QPS와-저장소-요구량-추정"><a href="#예제-트위터-QPS와-저장소-요구량-추정" class="headerlink" title="예제: 트위터 QPS와 저장소 요구량 추정"></a>예제: 트위터 QPS와 저장소 요구량 추정</h1><h2 id="가정"><a href="#가정" class="headerlink" title="가정"></a>가정</h2><ul><li>월간 능동 사용자(mau) 3억 명</li><li>50%가 매일 사용</li><li>각 사용자는 매일 2건</li><li>미디어 포함 10%</li><li>데이터는 5년 보관</li></ul><h2 id="추정"><a href="#추정" class="headerlink" title="추정"></a>추정</h2><ul><li>QPS(Query Per Second) 추정치</li><li>일간 능동 사용자(dau) = 3억 x 50% = 1.5억</li><li>QPS = 1.5억 x 2건 / 24시간 / 3600초 = 약 3500</li><li>최대 QPS = 2 x QPS = 약 7000</li></ul><h2 id="미디어-저장을-위한-저장소-요구량"><a href="#미디어-저장을-위한-저장소-요구량" class="headerlink" title="미디어 저장을 위한 저장소 요구량"></a>미디어 저장을 위한 저장소 요구량</h2><ul><li>평균 크기<ul><li>id = 64바이트</li><li>body = 140바이트</li><li>미디어 = 1MB</li></ul></li><li>미디어 저장소 요구량 : 1.5억 x 2 x 10% x 1MB = 30TB/day</li><li>5년간 미디어를 보관하기 위한 저장소 요구량 : 30TB x 365 x 5 = 약 55PB</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2의-제곱-수&quot;&gt;&lt;a href=&quot;#2의-제곱-수&quot; class=&quot;headerlink&quot; title=&quot;2의 제곱 수&quot;&gt;&lt;/a&gt;2의 제곱 수&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;최소단위는 1바이트, 8비트&lt;/li&gt;
&lt;li&gt;아스키 문자 하나 메모리크기가 1바</summary>
      
    
    
    
    <category term="가상면접 사례로 배우는 대규모 시스템 설계기초" scheme="http://won0935.github.io/categories/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/"/>
    
    
    <category term="시스템설계" scheme="http://won0935.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%84%A4%EA%B3%84/"/>
    
    <category term="대규모설계" scheme="http://won0935.github.io/tags/%EB%8C%80%EA%B7%9C%EB%AA%A8%EC%84%A4%EA%B3%84/"/>
    
  </entry>
  
  <entry>
    <title>사용자 수에 따른 규모 확장성</title>
    <link href="http://won0935.github.io/2021/10/26/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/2021-10-13-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%88%98%EC%97%90-%EB%94%B0%EB%A5%B8-%EA%B7%9C%EB%AA%A8-%ED%99%95%EC%9E%A5%EC%84%B1/2021-10-13-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%88%98%EC%97%90-%EB%94%B0%EB%A5%B8-%EA%B7%9C%EB%AA%A8-%ED%99%95%EC%9E%A5%EC%84%B1/"/>
    <id>http://won0935.github.io/2021/10/26/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/2021-10-13-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%88%98%EC%97%90-%EB%94%B0%EB%A5%B8-%EA%B7%9C%EB%AA%A8-%ED%99%95%EC%9E%A5%EC%84%B1/2021-10-13-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%88%98%EC%97%90-%EB%94%B0%EB%A5%B8-%EA%B7%9C%EB%AA%A8-%ED%99%95%EC%9E%A5%EC%84%B1/</id>
    <published>2021-10-26T12:50:02.725Z</published>
    <updated>2021-10-26T12:50:02.725Z</updated>
    
    <content type="html"><![CDATA[<ul><li>요약<ul><li>웹 계층은 무상태 계층으로</li><li>모든 계층에 다중화 도입</li><li>가능한 많은 데이터를 캐시할 것</li><li>여러 데이터 센터를 지원할 것</li><li>정적 콘텐츠는 CDN을 통해 서비스할 것</li><li>데이터 계층은 샤딩을 통에 그 규모를 확장할 것</li><li>각 계층은 독립적 서비스로 분할할 것</li><li>시스템을 지속적으로 모니터링 하고, 자동화 도구들을 활용할 것</li></ul></li></ul><hr><h1 id="단일서버"><a href="#단일서버" class="headerlink" title="단일서버"></a>단일서버</h1><h2 id="시스템이-단일-서버로-구현되어있다고-가정할-시-프로세스"><a href="#시스템이-단일-서버로-구현되어있다고-가정할-시-프로세스" class="headerlink" title="시스템이 단일 서버로 구현되어있다고 가정할 시 프로세스"></a>시스템이 단일 서버로 구현되어있다고 가정할 시 프로세스</h2><ol><li>사용자가 도메인(api.mysite.com)으로 접속한다.</li><li>DNS에 질의하여 IP주소로 반환된다. (DNS는 제3사업자임)</li><li>IP주소로 HTTP 요청</li><li>HTML or Json으로 응답</li></ol><hr><h1 id="데이터베이스"><a href="#데이터베이스" class="headerlink" title="데이터베이스"></a>데이터베이스</h1><h2 id="RDBMS-vs-NoSQL"><a href="#RDBMS-vs-NoSQL" class="headerlink" title="RDBMS vs NoSQL"></a>RDBMS vs NoSQL</h2><ul><li>RDBMS<ul><li>오라클, MySQL, PostegreSQL</li><li>열, 컬럼으로 표현</li><li>Join으로 합침</li></ul></li><li>NoSQL<ul><li>MongoDB …</li><li>Join 지원 안함</li></ul></li></ul><h2 id="NoSQL-쓰는-경우"><a href="#NoSQL-쓰는-경우" class="headerlink" title="NoSQL 쓰는 경우"></a>NoSQL 쓰는 경우</h2><ul><li>속도 중요할 시</li><li>비정형 데이터일 시</li><li>데이터 직렬화, 역직렬화 용</li><li>대량의 데이터</li></ul><hr><h1 id="수직적-규모-확장-vs-수평적-규모-확장"><a href="#수직적-규모-확장-vs-수평적-규모-확장" class="headerlink" title="수직적 규모 확장 vs 수평적 규모 확장"></a>수직적 규모 확장 vs 수평적 규모 확장</h1><h2 id="Sacale-Up-vs-Sacale-Out"><a href="#Sacale-Up-vs-Sacale-Out" class="headerlink" title="Sacale-Up vs Sacale-Out"></a>Sacale-Up vs Sacale-Out</h2><p>Scale-Up : 단일 서버 사양을 높임</p><p>Scale-Out : 서버 수를 추가</p><h2 id="Sacale-Up-아닌-Sacale-Out이-유리한-이유"><a href="#Sacale-Up-아닌-Sacale-Out이-유리한-이유" class="headerlink" title="Sacale-Up 아닌 Sacale-Out이 유리한 이유"></a>Sacale-Up 아닌 Sacale-Out이 유리한 이유</h2><ul><li>한 대의 서버 메모리를 무한대로 증설할 방법이 없음</li><li>장애에 대한 자동복구 방안이나 다중화 제시 X</li></ul><h2 id="로드밸런서-LB"><a href="#로드밸런서-LB" class="headerlink" title="로드밸런서(LB)"></a>로드밸런서(LB)</h2><ul><li>트래픽 분산의 역할</li></ul><h2 id="DB-다중화"><a href="#DB-다중화" class="headerlink" title="DB 다중화"></a>DB 다중화</h2><ul><li>이중화 시 master-slave로 나눔</li><li>master는 write, slave는 read</li><li>보통 read연산 비중이 훨씬 높고 slave DB가 더 많음 → 성능</li></ul><hr><h1 id="캐시"><a href="#캐시" class="headerlink" title="캐시"></a>캐시</h1><ul><li>값비싼 연산 결과나 자주 참조되는 데이터를 저장하는 메모리</li></ul><h2 id="캐시-사용-시-고려해야-할-것"><a href="#캐시-사용-시-고려해야-할-것" class="headerlink" title="캐시 사용 시 고려해야 할 것"></a>캐시 사용 시 고려해야 할 것</h2><ul><li>영속적인 데이터 X</li><li>만료(expire) 방식<ul><li>LRU → 가장 자주 씀</li><li>LFU</li><li>FIFO</li></ul></li><li>데이터 일관성 유지 방식</li></ul><hr><h1 id="콘텐츠-전송-네크워크-CDN"><a href="#콘텐츠-전송-네크워크-CDN" class="headerlink" title="콘텐츠 전송 네크워크(CDN)"></a>콘텐츠 전송 네크워크(CDN)</h1><ul><li>정적 콘텐츠 캐싱</li><li>CSS, JS, 이미지, 비디오</li></ul><hr><h1 id="무상태-stateless-웹-계층"><a href="#무상태-stateless-웹-계층" class="headerlink" title="무상태(stateless) 웹 계층"></a>무상태(stateless) 웹 계층</h1><ul><li>Scale-Out 시 중요</li><li>상태정보를 웹 계층에서 제거</li></ul><h2 id="상태-정보를-웹-말고-DB에-저장"><a href="#상태-정보를-웹-말고-DB에-저장" class="headerlink" title="상태 정보를 웹 말고 DB에 저장"></a>상태 정보를 웹 말고 DB에 저장</h2><ul><li>MSA시 <strong>공유저장소</strong>를 활용</li><li>Redis, NoSQL 활용</li></ul><hr><h1 id="데이터센터"><a href="#데이터센터" class="headerlink" title="데이터센터"></a>데이터센터</h1><ul><li>통상적으로 지리적으로 가장 가까운 곳으로 라우팅(Geo-routing)</li></ul><h2 id="구축-시-신경써야-할-것"><a href="#구축-시-신경써야-할-것" class="headerlink" title="구축 시 신경써야 할 것"></a>구축 시 신경써야 할 것</h2><ul><li>트래픽 우회</li><li>데이터 동기화</li><li>테스트와 배포</li></ul><p>→ Message Queue는 시스템이 독립적으로 확장할 수 있는 핵심전략</p><hr><h1 id="메시지-큐"><a href="#메시지-큐" class="headerlink" title="메시지 큐"></a>메시지 큐</h1><ul><li>무손실, 비동기</li><li>pub-sub 방식</li></ul><hr><h1 id="데이터베이스의-규모-확장"><a href="#데이터베이스의-규모-확장" class="headerlink" title="데이터베이스의 규모 확장"></a>데이터베이스의 규모 확장</h1><h2 id="샤딩-sharding"><a href="#샤딩-sharding" class="headerlink" title="샤딩(sharding)"></a>샤딩(sharding)</h2><ul><li>DB를 scale-out 하는 것</li><li><strong>모든 샤드는 같은 스키마를 쓰지만 데이터 중복은 없음</strong></li><li>샤딩 키를 정하는 것이 중요</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;요약&lt;ul&gt;
&lt;li&gt;웹 계층은 무상태 계층으로&lt;/li&gt;
&lt;li&gt;모든 계층에 다중화 도입&lt;/li&gt;
&lt;li&gt;가능한 많은 데이터를 캐시할 것&lt;/li&gt;
&lt;li&gt;여러 데이터 센터를 지원할 것&lt;/li&gt;
&lt;li&gt;정적 콘텐츠는 CDN을 통해 서비스할</summary>
      
    
    
    
    <category term="가상면접 사례로 배우는 대규모 시스템 설계기초" scheme="http://won0935.github.io/categories/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/"/>
    
    
    <category term="시스템설계" scheme="http://won0935.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%84%A4%EA%B3%84/"/>
    
    <category term="대규모설계" scheme="http://won0935.github.io/tags/%EB%8C%80%EA%B7%9C%EB%AA%A8%EC%84%A4%EA%B3%84/"/>
    
    <category term="DB설계" scheme="http://won0935.github.io/tags/DB%EC%84%A4%EA%B3%84/"/>
    
    <category term="서버설계" scheme="http://won0935.github.io/tags/%EC%84%9C%EB%B2%84%EC%84%A4%EA%B3%84/"/>
    
    <category term="분산설계" scheme="http://won0935.github.io/tags/%EB%B6%84%EC%82%B0%EC%84%A4%EA%B3%84/"/>
    
  </entry>
  
</feed>
