{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1635595686038},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"423a472c51dd8c232d61014c9e99cf1474614e38","modified":1635595691244},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"source/.DS_Store","hash":"bc1078110f49d1f6e7871d7f1acbe9493416f50b","modified":1635658496803},{"_id":"themes/icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635595792125},{"_id":"themes/icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635595792126},{"_id":"themes/icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635595792126},{"_id":"themes/icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635595792127},{"_id":"themes/icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635595792127},{"_id":"themes/icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635595792119},{"_id":"themes/icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635595792121},{"_id":"themes/icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635595792121},{"_id":"themes/icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635595792121},{"_id":"themes/icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635595792121},{"_id":"themes/icarus/.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1635595792117},{"_id":"themes/icarus/.gitignore","hash":"36084c0851a22bfd393933abb8e262562ffc6802","modified":1635595792118},{"_id":"themes/icarus/.eslintrc.json","hash":"43c7740158c8690242720b4ff7fa11426fc20c79","modified":1635595792117},{"_id":"themes/icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1635595792119},{"_id":"themes/icarus/package.json","hash":"653d306a010f669192883483414da500d48cf592","modified":1635595792127},{"_id":"themes/icarus/.npmignore","hash":"42242c8da7a020a3295e7dd3d18bf022cb08b661","modified":1635595792118},{"_id":"themes/icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1635595792119},{"_id":"themes/icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":1635595792119},{"_id":"themes/icarus/include/dependency.js","hash":"d30dbcefd58619f6705d6369b644bc7ba44d2421","modified":1635595792119},{"_id":"themes/icarus/include/register.js","hash":"a974b56a1fbb254f1ae048cc2221363faaccec25","modified":1635595792119},{"_id":"themes/icarus/.github/dependabot.yml","hash":"d532d0db30e42211f35823b9885f3ed1b2d51777","modified":1635595792118},{"_id":"themes/icarus/.github/stale.yml","hash":"88c73f6216c5666d2f60b1e8fe690a3f6e561e42","modified":1635595792118},{"_id":"themes/icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1635595792119},{"_id":"themes/icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1635595792123},{"_id":"themes/icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1635595792123},{"_id":"themes/icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1635595792123},{"_id":"themes/icarus/languages/fr.yml","hash":"06d5c819d6108a42b28cff7b52e5410d0bed55d1","modified":1635595792123},{"_id":"themes/icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1635595792123},{"_id":"themes/icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1635595792123},{"_id":"themes/icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1635595792123},{"_id":"themes/icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1635595792124},{"_id":"themes/icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1635595792124},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1635595792124},{"_id":"themes/icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1635595792124},{"_id":"themes/icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1635595792124},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1635595792124},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1635595792124},{"_id":"themes/icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1635595792125},{"_id":"themes/icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1635595792125},{"_id":"themes/icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":1635595792125},{"_id":"themes/icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1635595792124},{"_id":"themes/icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1635595792126},{"_id":"themes/icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1635595792126},{"_id":"themes/icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1635595792127},{"_id":"themes/icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1635595792126},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/Bug反馈.md","hash":"d801be6937df21e63113be8840b2e23c465db87b","modified":1635595792117},{"_id":"themes/icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1635595792127},{"_id":"themes/icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1635595792127},{"_id":"themes/icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1635595792127},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/bug_report.md","hash":"5d3abdc1a2a79ef9822865184eced6e31066d8f6","modified":1635595792117},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/config.yml","hash":"b49270a202d839c298e584b5d017f56140c7e7a0","modified":1635595792117},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/feature_request.md","hash":"05313e241a3d43fdadb0f74390b562c07c25d4d0","modified":1635595792117},{"_id":"themes/icarus/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md","hash":"e106fa240c24c8bfbdd623549651600c6d786c9c","modified":1635595792118},{"_id":"themes/icarus/.github/workflows/lint.yml","hash":"71f04b66e48f065285ba109939999876ef411598","modified":1635595792118},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/功能建议.md","hash":"c6f60f37e6cd0bc21a81b3b07f84e04e9e80fb57","modified":1635595792118},{"_id":"themes/icarus/include/migration/head.js","hash":"269ba172013cbd2f10b9bc51af0496628081329b","modified":1635595792119},{"_id":"themes/icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1635595792119},{"_id":"themes/icarus/.github/workflows/test.yml","hash":"69046b3b5c3d12cdca26380b7458cebeb2546dae","modified":1635595792118},{"_id":"themes/icarus/include/schema/config.json","hash":"ac633f9d349bca4f089d59d2c3738b57376f1b31","modified":1635595792121},{"_id":"themes/icarus/.github/workflows/npm-publish.yml","hash":"4eabc0c60cb7102fdd5e4b0fbd8c0ac4c17cc8d0","modified":1635595792118},{"_id":"themes/icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1635595792119},{"_id":"themes/icarus/.github/workflows/github-release.yml","hash":"48b6bd2cc567687a7b1648c55c8f9de9d44fa9e1","modified":1635595792118},{"_id":"themes/icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1635595792121},{"_id":"themes/icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1635595792122},{"_id":"themes/icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1635595792122},{"_id":"themes/icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1635595792121},{"_id":"themes/icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1635595792122},{"_id":"themes/icarus/include/style/codeblock.styl","hash":"30bee4cf6792e9665eb648cc20b352d9eaff1207","modified":1635595792122},{"_id":"themes/icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1635595792122},{"_id":"themes/icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1635595792122},{"_id":"themes/icarus/include/style/plugin.styl","hash":"679b61b5fc5b3281735a21c37aeb64229d9c51ea","modified":1635595792122},{"_id":"themes/icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1635595792122},{"_id":"themes/icarus/include/style/navbar.styl","hash":"ecc73c8ad504c0fa4bb910eb51500c14e0a8d662","modified":1635595792122},{"_id":"themes/icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1635595792123},{"_id":"themes/icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1635595792123},{"_id":"themes/icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1635595792123},{"_id":"themes/icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1635595792123},{"_id":"themes/icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1635595792122},{"_id":"themes/icarus/layout/common/article.jsx","hash":"e2765287c6bc6eb97975a1bb4e325b046e95b392","modified":1635595792125},{"_id":"themes/icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1635595792125},{"_id":"themes/icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1635595792125},{"_id":"themes/icarus/layout/common/footer.jsx","hash":"baa8e40e036a3ec0114d96893b708435104b4ba9","modified":1635595792125},{"_id":"themes/icarus/layout/common/scripts.jsx","hash":"0fe1fddab431fb9f63906d8c480d5cd6b33abc32","modified":1635595792126},{"_id":"themes/icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1635595792126},{"_id":"themes/icarus/layout/common/head.jsx","hash":"0bf1c4fc3247cd7f4244080c4333e33ffef2c337","modified":1635595792125},{"_id":"themes/icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1635595792126},{"_id":"themes/icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1635595792126},{"_id":"themes/icarus/layout/common/navbar.jsx","hash":"fcd9fd4624dee49207ef09ea2a1c63f524f3710c","modified":1635595792126},{"_id":"themes/icarus/layout/common/widgets.jsx","hash":"251263b97de12f2b8d1fce2514e83430f2515b94","modified":1635595792126},{"_id":"themes/icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1635595792126},{"_id":"themes/icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1635595792127},{"_id":"themes/icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1635595792128},{"_id":"themes/icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1635595792128},{"_id":"themes/icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1635595792127},{"_id":"themes/icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1635595792128},{"_id":"themes/icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1635595792128},{"_id":"themes/icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1635595792128},{"_id":"themes/icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1635595792128},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1635595792129},{"_id":"themes/icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1635595792129},{"_id":"themes/icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1635595792129},{"_id":"themes/icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1635595792129},{"_id":"themes/icarus/source/js/.eslintrc.json","hash":"6bf0641cb69dffac97f69baea192d7fa3ab612cb","modified":1635595792129},{"_id":"themes/icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1635595792129},{"_id":"themes/icarus/include/schema/common/comment.json","hash":"7d744391a8abee9a2c450b6fdd36a3866a488025","modified":1635595792120},{"_id":"themes/icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1635595792120},{"_id":"themes/icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1635595792120},{"_id":"themes/icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1635595792120},{"_id":"themes/icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1635595792120},{"_id":"themes/icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1635595792120},{"_id":"themes/icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1635595792120},{"_id":"themes/icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1635595792120},{"_id":"themes/icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1635595792120},{"_id":"themes/icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1635595792120},{"_id":"themes/icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1635595792129},{"_id":"themes/icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1635595792120},{"_id":"themes/icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1635595792120},{"_id":"themes/icarus/source/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1635595792129},{"_id":"themes/icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1635595792121},{"_id":"themes/icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1635595792121},{"_id":"themes/icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1635595792121},{"_id":"source/_posts/2021-10-19-싱글톤-패턴.md","hash":"d15fde3e7bd7bb136cecae5226eec056e1d07594","modified":1635342495469},{"_id":"source/_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-안정-해시-설계/2021-10-13-안정-해시-설계.md","hash":"0f6e91ffebca80df965031e26dd7d734e8947b34","modified":1635252810299},{"_id":"source/_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-개략적인-규모-추정/2021-10-13-개략적인-규모-추정.md","hash":"25a2eb4bd58a58b08d54a66e2a53b31c2e6bea62","modified":1635252750856},{"_id":"source/_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-키-값-저장소-설계/2021-10-13-키-값-저장소-설계.md","hash":"64aa6b25c3d24f972699a4f21410d84b5f991e82","modified":1635252750860},{"_id":"source/_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-키-값-저장소-설계/image-file-1.png","hash":"561912face0b03e806b168f7cbb94ba274da95f2","modified":1635248760364},{"_id":"source/_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-시스템-설계-면접-공략법/2021-10-13-시스템-설계-면접-공략법.md","hash":"d0fff4f054477f4c0e3cf73048e43154aedf0015","modified":1635252750866},{"_id":"source/_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-안정-해시-설계/Untitled 1.png","hash":"56829c047947123467995c39a24d84a2f00eafc2","modified":1635248760361},{"_id":"source/_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-처리율-제한-장치의-설계/2021-10-13-처리율-제한-장치의-설계.md","hash":"4b4c881e99a3bf50cdbeb2be36073a730c13b1c6","modified":1635253024929},{"_id":"source/_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-처리율-제한-장치의-설계/Untitled 2.png","hash":"cff745fbcd6d7caf3dfdb4c68ac79151e136bdc4","modified":1635248760363},{"_id":"source/_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-처리율-제한-장치의-설계/Untitled.png","hash":"4adf1cab45abd59ff5f4427cd7e37315970b60a5","modified":1635248760363},{"_id":"source/_posts/게임/2021-10-30-m1-league-of-legend.md","hash":"dd71179801bdd42a940c5bb65673bf1ab419c3d7","modified":1635578282729},{"_id":"source/_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-사용자-수에-따른-규모-확장성/2021-10-13-사용자-수에-따른-규모-확장성.md","hash":"59e630bb4c1220b4798c566e8ac84e7374a7da45","modified":1635252602725},{"_id":"source/_posts/디자인-패턴/2021-10-19-싱글톤-패턴/2021-10-19-싱글톤-패턴.md","hash":"d15fde3e7bd7bb136cecae5226eec056e1d07594","modified":1635342495469},{"_id":"source/_posts/디자인-패턴/2021-10-20-팩토리-패턴/image.jpg","hash":"1e6a30173de8b35ec387adfcdf7aca2996b6c3d7","modified":1635248760364},{"_id":"source/_posts/디자인-패턴/2021-10-20-팩토리-패턴/image2.jpg","hash":"1e6a30173de8b35ec387adfcdf7aca2996b6c3d7","modified":1635248760365},{"_id":"source/_posts/디자인-패턴/2021-10-20-팩토리-패턴/2021-10-20-팩토리-패턴.md","hash":"f0a556e264b1bbe945ec4c882732f0fc7f996a59","modified":1635419600382},{"_id":"source/_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-안정-해시-설계/Untitled.png","hash":"b7f3ae1b47c6589ce2b245aa04008b553495d59e","modified":1635248760362},{"_id":"source/_posts/디자인-패턴/2021-10-20-팩토리-패턴/image3.jpg","hash":"15eccd51cb7a5d8de178cf52e5c5e26d17161f21","modified":1635248760365},{"_id":"source/_posts/디자인-패턴/2021-10-20-팩토리-패턴/image4.jpg","hash":"f2f115186198d01cfa3ce9fe19e0e64a8adb9d92","modified":1635248760365},{"_id":"source/_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-처리율-제한-장치의-설계/Untitled 1.png","hash":"9e51ec13443764bdea1a2c1ed3d50bab6f8dedf7","modified":1635248760363},{"_id":"source/_posts/게임/스크린샷 2021-10-30 오후 3.59.23.png","hash":"10e725e16e4b4ad1e49f36661a1f6da586f5f3f7","modified":1635577168756},{"_id":"source/_posts/게임/스크린샷 2021-10-30 오후 4.01.39.png","hash":"0d24012b8b87164dc068bd4b26d1f1e554470dcf","modified":1635577301919},{"_id":"source/_posts/게임/스크린샷 2021-10-30 오후 3.56.07.png","hash":"04173aedf5b95d2aadbe52325af4cba638fb12f9","modified":1635576971697},{"_id":"source/_posts/게임/스크린샷 2021-10-30 오후 3.42.38.png","hash":"a6f8fa352dc5bd07d27854969a85da3c6a783075","modified":1635576169810},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1635656369876},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1635656369876},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1635656369876},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1635656369876},{"_id":"public/content.json","hash":"01829a7d80a88317d0a2a8cff70c51d4ceaa035a","modified":1635656369876},{"_id":"public/manifest.json","hash":"608de57c4515e3ee6c34fdbdf44a8a67dbd8fe9d","modified":1635656821699},{"_id":"public/2021/10/30/hello-world/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/2021/10/30/게임/2021-10-30-m1-league-of-legend/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/2021/10/28/디자인-패턴/2021-10-20-팩토리-패턴/2021-10-20-팩토리-패턴/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/2021/10/26/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-처리율-제한-장치의-설계/2021-10-13-처리율-제한-장치의-설계/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/2021/10/27/디자인-패턴/2021-10-19-싱글톤-패턴/2021-10-19-싱글톤-패턴/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/2021/10/26/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-시스템-설계-면접-공략법/2021-10-13-시스템-설계-면접-공략법/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/2021/10/26/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-안정-해시-설계/2021-10-13-안정-해시-설계/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/2021/10/26/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-키-값-저장소-설계/2021-10-13-키-값-저장소-설계/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/2021/10/26/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-개략적인-규모-추정/2021-10-13-개략적인-규모-추정/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/2021/10/26/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-사용자-수에-따른-규모-확장성/2021-10-13-사용자-수에-따른-규모-확장성/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/archives/2021/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/archives/2021/10/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/categories/디자인패턴/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/categories/가상면접-사례로-배우는-대규모-시스템-설계기초/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/categories/게임/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/싱글톤/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/시스템설계/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/키값저장소/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/대규모설계/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/면접/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/DB설계/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/서버설계/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/디자인패턴/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/분산설계/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/안정해시/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/가상노드/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/팩토리/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/토큰버킷/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/누출버킷/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/이동윈도로그/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/처리율제한/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/고정윈도카운터/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/m1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/league-of-legend/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/롤/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/categories/index.html","hash":"aa89194dabb14e12836d6c8d68fcbdcd23aa4a0b","modified":1635656821699},{"_id":"public/tags/mac-on-metal/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635659490166},{"_id":"public/tags/index.html","hash":"fba998b98d03afd73d7f1b44faa8db4c2ae53f52","modified":1635656821699},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1635656369876},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1635656369876},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1635656369876},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1635656369876},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1635656369876},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1635656369876},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1635656369876},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1635656369876},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1635656369876},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1635656369876},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1635656369876},{"_id":"public/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1635656369876},{"_id":"public/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1635656369876},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1635656369876},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1635656369876},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1635656369876},{"_id":"public/css/style.css","hash":"49786c0fefcaa20821d9853a4a6ca81904322793","modified":1635656369876},{"_id":"public/css/default.css","hash":"49786c0fefcaa20821d9853a4a6ca81904322793","modified":1635656369876},{"_id":"public/css/cyberpunk.css","hash":"073797b87e28376604d586c48beb66f6fe9cb504","modified":1635656369876},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1635656369876},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1635656369876},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1635656369876},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1635656369876},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1635656369876},{"_id":"source/_posts/.DS_Store","hash":"4f3a901eb772f007e9a40ebc869d82e45ccbc665","modified":1635658088804}],"Category":[{"name":"디자인패턴","_id":"ckvds1cc700010mau47sg4rwq"},{"name":"가상면접 사례로 배우는 대규모 시스템 설계기초","_id":"ckvelzqg60001gcauasp526dm"},{"name":"게임","_id":"ckvelzqhq001pgcaufnrthkhc"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-10-30T12:08:06.038Z","updated":"2021-10-30T12:08:06.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvdrgeb40000spau0r0j8ns7","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"개략적인 규모 추정","toc":true,"toc_sticky":true,"toc_label":"개략적인 규모 추정","toc_icon":"sticky-note","_content":"\n\n\n# 2의 제곱 수\n\n- 최소단위는 1바이트, 8비트\n- 아스키 문자 하나 메모리크기가 1바이트\n\n# 모든 프로그래머가 알아야 하는 응답 지연 값\n\n- 메모리는 빠르지만 디스크는 아직도 느리다\n- 디스크 탐색은 가능한 한 피하라\n- 단순한 압축 알고리즘은 빠르다\n- 데이터를 인터넷으로 전송하기 전에 가능하면 압축하라\n- 데이터 센터는 보통 여러 지역에 분산되어있고, 센터들 간에 데이터를 주고 받는 데는 시간이 걸린다\n\n# 가용성에 관계된 수치들\n\n> 고가용성\n>\n>\n> 시스템이 오랜 기간동안 지속적으로 중단 없이 운영될 수 있는 능력\n\n---\n\n# 예제: 트위터 QPS와 저장소 요구량 추정\n\n## 가정\n\n- 월간 능동 사용자(mau) 3억 명\n- 50%가 매일 사용\n- 각 사용자는 매일 2건\n- 미디어 포함 10%\n- 데이터는 5년 보관\n\n## 추정\n\n- QPS(Query Per Second) 추정치\n- 일간 능동 사용자(dau) = 3억 x 50% = 1.5억\n- QPS = 1.5억 x 2건 / 24시간 / 3600초 = 약 3500\n- 최대 QPS = 2 x QPS = 약 7000\n\n## 미디어 저장을 위한 저장소 요구량\n\n- 평균 크기\n  - id = 64바이트\n  - body = 140바이트\n  - 미디어 = 1MB\n- 미디어 저장소 요구량 : 1.5억 x 2 x 10% x 1MB = 30TB/day\n- 5년간 미디어를 보관하기 위한 저장소 요구량 : 30TB x 365 x 5 = 약 55PB\n\n","source":"_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-개략적인-규모-추정/2021-10-13-개략적인-규모-추정.md","raw":"---\ntitle: \"개략적인 규모 추정\"\ncategories:\n  - 가상면접 사례로 배우는 대규모 시스템 설계기초\ntags:\n  - 시스템설계\n  - 대규모설계\ntoc: true\ntoc_sticky: true\ntoc_label: \"개략적인 규모 추정\"\ntoc_icon: \"sticky-note\"\n---\n\n\n\n# 2의 제곱 수\n\n- 최소단위는 1바이트, 8비트\n- 아스키 문자 하나 메모리크기가 1바이트\n\n# 모든 프로그래머가 알아야 하는 응답 지연 값\n\n- 메모리는 빠르지만 디스크는 아직도 느리다\n- 디스크 탐색은 가능한 한 피하라\n- 단순한 압축 알고리즘은 빠르다\n- 데이터를 인터넷으로 전송하기 전에 가능하면 압축하라\n- 데이터 센터는 보통 여러 지역에 분산되어있고, 센터들 간에 데이터를 주고 받는 데는 시간이 걸린다\n\n# 가용성에 관계된 수치들\n\n> 고가용성\n>\n>\n> 시스템이 오랜 기간동안 지속적으로 중단 없이 운영될 수 있는 능력\n\n---\n\n# 예제: 트위터 QPS와 저장소 요구량 추정\n\n## 가정\n\n- 월간 능동 사용자(mau) 3억 명\n- 50%가 매일 사용\n- 각 사용자는 매일 2건\n- 미디어 포함 10%\n- 데이터는 5년 보관\n\n## 추정\n\n- QPS(Query Per Second) 추정치\n- 일간 능동 사용자(dau) = 3억 x 50% = 1.5억\n- QPS = 1.5억 x 2건 / 24시간 / 3600초 = 약 3500\n- 최대 QPS = 2 x QPS = 약 7000\n\n## 미디어 저장을 위한 저장소 요구량\n\n- 평균 크기\n  - id = 64바이트\n  - body = 140바이트\n  - 미디어 = 1MB\n- 미디어 저장소 요구량 : 1.5억 x 2 x 10% x 1MB = 30TB/day\n- 5년간 미디어를 보관하기 위한 저장소 요구량 : 30TB x 365 x 5 = 약 55PB\n\n","slug":"가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-개략적인-규모-추정/2021-10-13-개략적인-규모-추정","published":1,"date":"2021-10-26T12:52:30.856Z","updated":"2021-10-26T12:52:30.856Z","_id":"ckvelzqfw0000gcau9y942anm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2의-제곱-수\"><a href=\"#2의-제곱-수\" class=\"headerlink\" title=\"2의 제곱 수\"></a>2의 제곱 수</h1><ul>\n<li>최소단위는 1바이트, 8비트</li>\n<li>아스키 문자 하나 메모리크기가 1바이트</li>\n</ul>\n<h1 id=\"모든-프로그래머가-알아야-하는-응답-지연-값\"><a href=\"#모든-프로그래머가-알아야-하는-응답-지연-값\" class=\"headerlink\" title=\"모든 프로그래머가 알아야 하는 응답 지연 값\"></a>모든 프로그래머가 알아야 하는 응답 지연 값</h1><ul>\n<li>메모리는 빠르지만 디스크는 아직도 느리다</li>\n<li>디스크 탐색은 가능한 한 피하라</li>\n<li>단순한 압축 알고리즘은 빠르다</li>\n<li>데이터를 인터넷으로 전송하기 전에 가능하면 압축하라</li>\n<li>데이터 센터는 보통 여러 지역에 분산되어있고, 센터들 간에 데이터를 주고 받는 데는 시간이 걸린다</li>\n</ul>\n<h1 id=\"가용성에-관계된-수치들\"><a href=\"#가용성에-관계된-수치들\" class=\"headerlink\" title=\"가용성에 관계된 수치들\"></a>가용성에 관계된 수치들</h1><blockquote>\n<p>고가용성</p>\n<p>시스템이 오랜 기간동안 지속적으로 중단 없이 운영될 수 있는 능력</p>\n</blockquote>\n<hr>\n<h1 id=\"예제-트위터-QPS와-저장소-요구량-추정\"><a href=\"#예제-트위터-QPS와-저장소-요구량-추정\" class=\"headerlink\" title=\"예제: 트위터 QPS와 저장소 요구량 추정\"></a>예제: 트위터 QPS와 저장소 요구량 추정</h1><h2 id=\"가정\"><a href=\"#가정\" class=\"headerlink\" title=\"가정\"></a>가정</h2><ul>\n<li>월간 능동 사용자(mau) 3억 명</li>\n<li>50%가 매일 사용</li>\n<li>각 사용자는 매일 2건</li>\n<li>미디어 포함 10%</li>\n<li>데이터는 5년 보관</li>\n</ul>\n<h2 id=\"추정\"><a href=\"#추정\" class=\"headerlink\" title=\"추정\"></a>추정</h2><ul>\n<li>QPS(Query Per Second) 추정치</li>\n<li>일간 능동 사용자(dau) = 3억 x 50% = 1.5억</li>\n<li>QPS = 1.5억 x 2건 / 24시간 / 3600초 = 약 3500</li>\n<li>최대 QPS = 2 x QPS = 약 7000</li>\n</ul>\n<h2 id=\"미디어-저장을-위한-저장소-요구량\"><a href=\"#미디어-저장을-위한-저장소-요구량\" class=\"headerlink\" title=\"미디어 저장을 위한 저장소 요구량\"></a>미디어 저장을 위한 저장소 요구량</h2><ul>\n<li>평균 크기<ul>\n<li>id = 64바이트</li>\n<li>body = 140바이트</li>\n<li>미디어 = 1MB</li>\n</ul>\n</li>\n<li>미디어 저장소 요구량 : 1.5억 x 2 x 10% x 1MB = 30TB/day</li>\n<li>5년간 미디어를 보관하기 위한 저장소 요구량 : 30TB x 365 x 5 = 약 55PB</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2의-제곱-수\"><a href=\"#2의-제곱-수\" class=\"headerlink\" title=\"2의 제곱 수\"></a>2의 제곱 수</h1><ul>\n<li>최소단위는 1바이트, 8비트</li>\n<li>아스키 문자 하나 메모리크기가 1바이트</li>\n</ul>\n<h1 id=\"모든-프로그래머가-알아야-하는-응답-지연-값\"><a href=\"#모든-프로그래머가-알아야-하는-응답-지연-값\" class=\"headerlink\" title=\"모든 프로그래머가 알아야 하는 응답 지연 값\"></a>모든 프로그래머가 알아야 하는 응답 지연 값</h1><ul>\n<li>메모리는 빠르지만 디스크는 아직도 느리다</li>\n<li>디스크 탐색은 가능한 한 피하라</li>\n<li>단순한 압축 알고리즘은 빠르다</li>\n<li>데이터를 인터넷으로 전송하기 전에 가능하면 압축하라</li>\n<li>데이터 센터는 보통 여러 지역에 분산되어있고, 센터들 간에 데이터를 주고 받는 데는 시간이 걸린다</li>\n</ul>\n<h1 id=\"가용성에-관계된-수치들\"><a href=\"#가용성에-관계된-수치들\" class=\"headerlink\" title=\"가용성에 관계된 수치들\"></a>가용성에 관계된 수치들</h1><blockquote>\n<p>고가용성</p>\n<p>시스템이 오랜 기간동안 지속적으로 중단 없이 운영될 수 있는 능력</p>\n</blockquote>\n<hr>\n<h1 id=\"예제-트위터-QPS와-저장소-요구량-추정\"><a href=\"#예제-트위터-QPS와-저장소-요구량-추정\" class=\"headerlink\" title=\"예제: 트위터 QPS와 저장소 요구량 추정\"></a>예제: 트위터 QPS와 저장소 요구량 추정</h1><h2 id=\"가정\"><a href=\"#가정\" class=\"headerlink\" title=\"가정\"></a>가정</h2><ul>\n<li>월간 능동 사용자(mau) 3억 명</li>\n<li>50%가 매일 사용</li>\n<li>각 사용자는 매일 2건</li>\n<li>미디어 포함 10%</li>\n<li>데이터는 5년 보관</li>\n</ul>\n<h2 id=\"추정\"><a href=\"#추정\" class=\"headerlink\" title=\"추정\"></a>추정</h2><ul>\n<li>QPS(Query Per Second) 추정치</li>\n<li>일간 능동 사용자(dau) = 3억 x 50% = 1.5억</li>\n<li>QPS = 1.5억 x 2건 / 24시간 / 3600초 = 약 3500</li>\n<li>최대 QPS = 2 x QPS = 약 7000</li>\n</ul>\n<h2 id=\"미디어-저장을-위한-저장소-요구량\"><a href=\"#미디어-저장을-위한-저장소-요구량\" class=\"headerlink\" title=\"미디어 저장을 위한 저장소 요구량\"></a>미디어 저장을 위한 저장소 요구량</h2><ul>\n<li>평균 크기<ul>\n<li>id = 64바이트</li>\n<li>body = 140바이트</li>\n<li>미디어 = 1MB</li>\n</ul>\n</li>\n<li>미디어 저장소 요구량 : 1.5억 x 2 x 10% x 1MB = 30TB/day</li>\n<li>5년간 미디어를 보관하기 위한 저장소 요구량 : 30TB x 365 x 5 = 약 55PB</li>\n</ul>\n"},{"title":"키-값 저장소 설계","toc":true,"toc_sticky":true,"toc_label":"키-값 저장소 설계","toc_icon":"sticky-note","_content":"\n\n\n> - 비 관계형 데이터베이스\n고유식별자(key)를 키로 가짐\n> - 키와 값 사이의 연결 관계를 \"키-값\" 쌍(pair)라고 표현\n\n---\n\n## 분산 키-값 저장소의 CAP 정리\n\n데이터 일관성(Consistency), 가용성(Availability), 파티션 감내성(Partition Tolerance)라 표현하며,\n동시에 3가지 요구사항을 만족하는 것은 불가능하다는 정리\n\n![image](https://user-images.githubusercontent.com/55419159/138880667-4a4e727b-07d8-44e0-99b5-14088750a4b2.png){: .image-center}\n\n---\n\n### 용어 정리\n\n데이터 일관성(Consistency)\n\n- 분산 시스템에 접속하는 모든 클라이언트는 어떤 노드에 접속했느냐에 관계 없이 언제나 같은 데이터를 보게 되어야 한다.\n\n가용성(Availability)\n\n- 분산 시스템에 접속하는 클라이언트는 일부 노드에 장애가 발생하더라도 항상 응답을 받을 수 있어야 한다.\n\n파티션 감내성(Partition Tolerance)\n\n- 파티션은 두 노드 사이에 통신 장애가 발생하였음을 의미한다. 파티션 감내는 네트워크에 파티션이 생기더라도 시스템은 계속 동작하여야 한다는 것을 뜻한다.\n\n---\n\n### 분산 키-값 저장소가 가져야하는 기능\n\n| 목표/문제                         | 기술                                       |\n| --------------------------------- | ------------------------------------------ |\n| 대규모 데이터 저장                | 안정 해시를 사용해 서버들에 부하 분산      |\n| 읽기 연산에 대한 높은 가용성 보장 | 여러 데이터센터에 다중화                   |\n| 쓰기 연산에 대한 높은 가용성 보장 | 버저닝 및 벡터 시계를 사용한 충돌 해소     |\n| 데이터 파티션                     | 안정 해시                                  |\n| 점진적 규모 확장성                | 안정 해시                                  |\n| 다양성(heterogeneity)             | 안정 해시                                  |\n| 조절 가능한 데이터 일관성         | 정족수 합의                                |\n| 일시적 장애 처리                  | 느슨한 정족수 프로토콜과 단서 후 임시 위탁 |\n| 영구적 장애 처리                  | 머클 트리                                  |\n| 데이터 센터 장애 대응             | 여러 데이터 센터에 걸친 데이터 다중화      |","source":"_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-키-값-저장소-설계/2021-10-13-키-값-저장소-설계.md","raw":"---\ntitle: \"키-값 저장소 설계\"\ncategories:\n  - 가상면접 사례로 배우는 대규모 시스템 설계기초\ntags:\n  - 시스템설계\n  - 대규모설계\n  - 키값저장소\ntoc: true\ntoc_sticky: true\ntoc_label: \"키-값 저장소 설계\"\ntoc_icon: \"sticky-note\"\n---\n\n\n\n> - 비 관계형 데이터베이스\n고유식별자(key)를 키로 가짐\n> - 키와 값 사이의 연결 관계를 \"키-값\" 쌍(pair)라고 표현\n\n---\n\n## 분산 키-값 저장소의 CAP 정리\n\n데이터 일관성(Consistency), 가용성(Availability), 파티션 감내성(Partition Tolerance)라 표현하며,\n동시에 3가지 요구사항을 만족하는 것은 불가능하다는 정리\n\n![image](https://user-images.githubusercontent.com/55419159/138880667-4a4e727b-07d8-44e0-99b5-14088750a4b2.png){: .image-center}\n\n---\n\n### 용어 정리\n\n데이터 일관성(Consistency)\n\n- 분산 시스템에 접속하는 모든 클라이언트는 어떤 노드에 접속했느냐에 관계 없이 언제나 같은 데이터를 보게 되어야 한다.\n\n가용성(Availability)\n\n- 분산 시스템에 접속하는 클라이언트는 일부 노드에 장애가 발생하더라도 항상 응답을 받을 수 있어야 한다.\n\n파티션 감내성(Partition Tolerance)\n\n- 파티션은 두 노드 사이에 통신 장애가 발생하였음을 의미한다. 파티션 감내는 네트워크에 파티션이 생기더라도 시스템은 계속 동작하여야 한다는 것을 뜻한다.\n\n---\n\n### 분산 키-값 저장소가 가져야하는 기능\n\n| 목표/문제                         | 기술                                       |\n| --------------------------------- | ------------------------------------------ |\n| 대규모 데이터 저장                | 안정 해시를 사용해 서버들에 부하 분산      |\n| 읽기 연산에 대한 높은 가용성 보장 | 여러 데이터센터에 다중화                   |\n| 쓰기 연산에 대한 높은 가용성 보장 | 버저닝 및 벡터 시계를 사용한 충돌 해소     |\n| 데이터 파티션                     | 안정 해시                                  |\n| 점진적 규모 확장성                | 안정 해시                                  |\n| 다양성(heterogeneity)             | 안정 해시                                  |\n| 조절 가능한 데이터 일관성         | 정족수 합의                                |\n| 일시적 장애 처리                  | 느슨한 정족수 프로토콜과 단서 후 임시 위탁 |\n| 영구적 장애 처리                  | 머클 트리                                  |\n| 데이터 센터 장애 대응             | 여러 데이터 센터에 걸친 데이터 다중화      |","slug":"가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-키-값-저장소-설계/2021-10-13-키-값-저장소-설계","published":1,"date":"2021-10-26T12:52:30.860Z","updated":"2021-10-26T12:52:30.860Z","_id":"ckvelzqgl0007gcaue91fdu2a","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<ul>\n<li>비 관계형 데이터베이스<br>고유식별자(key)를 키로 가짐</li>\n<li>키와 값 사이의 연결 관계를 “키-값” 쌍(pair)라고 표현</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"분산-키-값-저장소의-CAP-정리\"><a href=\"#분산-키-값-저장소의-CAP-정리\" class=\"headerlink\" title=\"분산 키-값 저장소의 CAP 정리\"></a>분산 키-값 저장소의 CAP 정리</h2><p>데이터 일관성(Consistency), 가용성(Availability), 파티션 감내성(Partition Tolerance)라 표현하며,<br>동시에 3가지 요구사항을 만족하는 것은 불가능하다는 정리</p>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138880667-4a4e727b-07d8-44e0-99b5-14088750a4b2.png\" alt=\"image\">{: .image-center}</p>\n<hr>\n<h3 id=\"용어-정리\"><a href=\"#용어-정리\" class=\"headerlink\" title=\"용어 정리\"></a>용어 정리</h3><p>데이터 일관성(Consistency)</p>\n<ul>\n<li>분산 시스템에 접속하는 모든 클라이언트는 어떤 노드에 접속했느냐에 관계 없이 언제나 같은 데이터를 보게 되어야 한다.</li>\n</ul>\n<p>가용성(Availability)</p>\n<ul>\n<li>분산 시스템에 접속하는 클라이언트는 일부 노드에 장애가 발생하더라도 항상 응답을 받을 수 있어야 한다.</li>\n</ul>\n<p>파티션 감내성(Partition Tolerance)</p>\n<ul>\n<li>파티션은 두 노드 사이에 통신 장애가 발생하였음을 의미한다. 파티션 감내는 네트워크에 파티션이 생기더라도 시스템은 계속 동작하여야 한다는 것을 뜻한다.</li>\n</ul>\n<hr>\n<h3 id=\"분산-키-값-저장소가-가져야하는-기능\"><a href=\"#분산-키-값-저장소가-가져야하는-기능\" class=\"headerlink\" title=\"분산 키-값 저장소가 가져야하는 기능\"></a>분산 키-값 저장소가 가져야하는 기능</h3><table>\n<thead>\n<tr>\n<th>목표/문제</th>\n<th>기술</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>대규모 데이터 저장</td>\n<td>안정 해시를 사용해 서버들에 부하 분산</td>\n</tr>\n<tr>\n<td>읽기 연산에 대한 높은 가용성 보장</td>\n<td>여러 데이터센터에 다중화</td>\n</tr>\n<tr>\n<td>쓰기 연산에 대한 높은 가용성 보장</td>\n<td>버저닝 및 벡터 시계를 사용한 충돌 해소</td>\n</tr>\n<tr>\n<td>데이터 파티션</td>\n<td>안정 해시</td>\n</tr>\n<tr>\n<td>점진적 규모 확장성</td>\n<td>안정 해시</td>\n</tr>\n<tr>\n<td>다양성(heterogeneity)</td>\n<td>안정 해시</td>\n</tr>\n<tr>\n<td>조절 가능한 데이터 일관성</td>\n<td>정족수 합의</td>\n</tr>\n<tr>\n<td>일시적 장애 처리</td>\n<td>느슨한 정족수 프로토콜과 단서 후 임시 위탁</td>\n</tr>\n<tr>\n<td>영구적 장애 처리</td>\n<td>머클 트리</td>\n</tr>\n<tr>\n<td>데이터 센터 장애 대응</td>\n<td>여러 데이터 센터에 걸친 데이터 다중화</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<ul>\n<li>비 관계형 데이터베이스<br>고유식별자(key)를 키로 가짐</li>\n<li>키와 값 사이의 연결 관계를 “키-값” 쌍(pair)라고 표현</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"분산-키-값-저장소의-CAP-정리\"><a href=\"#분산-키-값-저장소의-CAP-정리\" class=\"headerlink\" title=\"분산 키-값 저장소의 CAP 정리\"></a>분산 키-값 저장소의 CAP 정리</h2><p>데이터 일관성(Consistency), 가용성(Availability), 파티션 감내성(Partition Tolerance)라 표현하며,<br>동시에 3가지 요구사항을 만족하는 것은 불가능하다는 정리</p>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138880667-4a4e727b-07d8-44e0-99b5-14088750a4b2.png\" alt=\"image\">{: .image-center}</p>\n<hr>\n<h3 id=\"용어-정리\"><a href=\"#용어-정리\" class=\"headerlink\" title=\"용어 정리\"></a>용어 정리</h3><p>데이터 일관성(Consistency)</p>\n<ul>\n<li>분산 시스템에 접속하는 모든 클라이언트는 어떤 노드에 접속했느냐에 관계 없이 언제나 같은 데이터를 보게 되어야 한다.</li>\n</ul>\n<p>가용성(Availability)</p>\n<ul>\n<li>분산 시스템에 접속하는 클라이언트는 일부 노드에 장애가 발생하더라도 항상 응답을 받을 수 있어야 한다.</li>\n</ul>\n<p>파티션 감내성(Partition Tolerance)</p>\n<ul>\n<li>파티션은 두 노드 사이에 통신 장애가 발생하였음을 의미한다. 파티션 감내는 네트워크에 파티션이 생기더라도 시스템은 계속 동작하여야 한다는 것을 뜻한다.</li>\n</ul>\n<hr>\n<h3 id=\"분산-키-값-저장소가-가져야하는-기능\"><a href=\"#분산-키-값-저장소가-가져야하는-기능\" class=\"headerlink\" title=\"분산 키-값 저장소가 가져야하는 기능\"></a>분산 키-값 저장소가 가져야하는 기능</h3><table>\n<thead>\n<tr>\n<th>목표/문제</th>\n<th>기술</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>대규모 데이터 저장</td>\n<td>안정 해시를 사용해 서버들에 부하 분산</td>\n</tr>\n<tr>\n<td>읽기 연산에 대한 높은 가용성 보장</td>\n<td>여러 데이터센터에 다중화</td>\n</tr>\n<tr>\n<td>쓰기 연산에 대한 높은 가용성 보장</td>\n<td>버저닝 및 벡터 시계를 사용한 충돌 해소</td>\n</tr>\n<tr>\n<td>데이터 파티션</td>\n<td>안정 해시</td>\n</tr>\n<tr>\n<td>점진적 규모 확장성</td>\n<td>안정 해시</td>\n</tr>\n<tr>\n<td>다양성(heterogeneity)</td>\n<td>안정 해시</td>\n</tr>\n<tr>\n<td>조절 가능한 데이터 일관성</td>\n<td>정족수 합의</td>\n</tr>\n<tr>\n<td>일시적 장애 처리</td>\n<td>느슨한 정족수 프로토콜과 단서 후 임시 위탁</td>\n</tr>\n<tr>\n<td>영구적 장애 처리</td>\n<td>머클 트리</td>\n</tr>\n<tr>\n<td>데이터 센터 장애 대응</td>\n<td>여러 데이터 센터에 걸친 데이터 다중화</td>\n</tr>\n</tbody></table>\n"},{"title":"시스템 설계 면접 공략법","toc":true,"toc_sticky":true,"toc_label":"시스템 설계 면접 공략법","toc_icon":"sticky-note","_content":"\n\n# 효과적 면접을 위한 4단계 접근법\n\n## 1. 문제 이해 및 설계 범위 확정\n\n- 구체적으로 어떤 기능들을 만들어야 하나\n- 제품 사용자 수는 얼마나 되나\n- 회사의 규모는 얼마나 빨리 커지리라 예상하나? 석 달, 여섯 달, 일년 뒤의 규모는 얼마가 되리라 예상하는가\n- 회사가 주로 사용하는 기술 스택은 무엇인가\n- 설계를 단순화 하기 위한 기존 서비스로는 어떤 것이 있는가\n\n→ 중요한 것은 모호함을 없에는 것\n\n---\n\n## 2. 개략적인 설계안 제시 및 동의 구하기\n\n- 청사진을 만들고 의견을 구하라ㅋ\n- 화이트보드에 다이어그램 그리기\n    - 클라이언트, API, 웹서버, DB, 캐시, CDN, MQ 등\n- 청사진이 제약사항에 부합하는지 확인하라\n\n---\n\n## 3. 상세 설계\n\n- 시스템에서 전반적으로 달성해야 할 목표와 기능 범위 확인\n- 전체 설계의 개략적 청사진 마련\n- 해당 청사진에 대한 면접관의 의견 청취\n- 상세 설계에서 집중해야 할 영역들 확인\n\n---\n\n## 4. 마무리\n\n- 개선점 찾기 ex> 병목구간\n- 설계 핵심 요약\n- 운영 관련 이슈\n    - 메트릭, 모니터링, 로그, 배포 등\n- 시스템 확장 방식","source":"_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-시스템-설계-면접-공략법/2021-10-13-시스템-설계-면접-공략법.md","raw":"---\ntitle: \"시스템 설계 면접 공략법\"\ncategories:\n  - 가상면접 사례로 배우는 대규모 시스템 설계기초\ntags:\n  - 시스템설계\n  - 대규모설계\n  - 면접\ntoc: true\ntoc_sticky: true \ntoc_label: \"시스템 설계 면접 공략법\"\ntoc_icon: \"sticky-note\"\n---\n\n\n# 효과적 면접을 위한 4단계 접근법\n\n## 1. 문제 이해 및 설계 범위 확정\n\n- 구체적으로 어떤 기능들을 만들어야 하나\n- 제품 사용자 수는 얼마나 되나\n- 회사의 규모는 얼마나 빨리 커지리라 예상하나? 석 달, 여섯 달, 일년 뒤의 규모는 얼마가 되리라 예상하는가\n- 회사가 주로 사용하는 기술 스택은 무엇인가\n- 설계를 단순화 하기 위한 기존 서비스로는 어떤 것이 있는가\n\n→ 중요한 것은 모호함을 없에는 것\n\n---\n\n## 2. 개략적인 설계안 제시 및 동의 구하기\n\n- 청사진을 만들고 의견을 구하라ㅋ\n- 화이트보드에 다이어그램 그리기\n    - 클라이언트, API, 웹서버, DB, 캐시, CDN, MQ 등\n- 청사진이 제약사항에 부합하는지 확인하라\n\n---\n\n## 3. 상세 설계\n\n- 시스템에서 전반적으로 달성해야 할 목표와 기능 범위 확인\n- 전체 설계의 개략적 청사진 마련\n- 해당 청사진에 대한 면접관의 의견 청취\n- 상세 설계에서 집중해야 할 영역들 확인\n\n---\n\n## 4. 마무리\n\n- 개선점 찾기 ex> 병목구간\n- 설계 핵심 요약\n- 운영 관련 이슈\n    - 메트릭, 모니터링, 로그, 배포 등\n- 시스템 확장 방식","slug":"가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-시스템-설계-면접-공략법/2021-10-13-시스템-설계-면접-공략법","published":1,"date":"2021-10-26T12:52:30.866Z","updated":"2021-10-26T12:52:30.866Z","_id":"ckvelzqgn0008gcau27b17xue","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"효과적-면접을-위한-4단계-접근법\"><a href=\"#효과적-면접을-위한-4단계-접근법\" class=\"headerlink\" title=\"효과적 면접을 위한 4단계 접근법\"></a>효과적 면접을 위한 4단계 접근법</h1><h2 id=\"1-문제-이해-및-설계-범위-확정\"><a href=\"#1-문제-이해-및-설계-범위-확정\" class=\"headerlink\" title=\"1. 문제 이해 및 설계 범위 확정\"></a>1. 문제 이해 및 설계 범위 확정</h2><ul>\n<li>구체적으로 어떤 기능들을 만들어야 하나</li>\n<li>제품 사용자 수는 얼마나 되나</li>\n<li>회사의 규모는 얼마나 빨리 커지리라 예상하나? 석 달, 여섯 달, 일년 뒤의 규모는 얼마가 되리라 예상하는가</li>\n<li>회사가 주로 사용하는 기술 스택은 무엇인가</li>\n<li>설계를 단순화 하기 위한 기존 서비스로는 어떤 것이 있는가</li>\n</ul>\n<p>→ 중요한 것은 모호함을 없에는 것</p>\n<hr>\n<h2 id=\"2-개략적인-설계안-제시-및-동의-구하기\"><a href=\"#2-개략적인-설계안-제시-및-동의-구하기\" class=\"headerlink\" title=\"2. 개략적인 설계안 제시 및 동의 구하기\"></a>2. 개략적인 설계안 제시 및 동의 구하기</h2><ul>\n<li>청사진을 만들고 의견을 구하라ㅋ</li>\n<li>화이트보드에 다이어그램 그리기<ul>\n<li>클라이언트, API, 웹서버, DB, 캐시, CDN, MQ 등</li>\n</ul>\n</li>\n<li>청사진이 제약사항에 부합하는지 확인하라</li>\n</ul>\n<hr>\n<h2 id=\"3-상세-설계\"><a href=\"#3-상세-설계\" class=\"headerlink\" title=\"3. 상세 설계\"></a>3. 상세 설계</h2><ul>\n<li>시스템에서 전반적으로 달성해야 할 목표와 기능 범위 확인</li>\n<li>전체 설계의 개략적 청사진 마련</li>\n<li>해당 청사진에 대한 면접관의 의견 청취</li>\n<li>상세 설계에서 집중해야 할 영역들 확인</li>\n</ul>\n<hr>\n<h2 id=\"4-마무리\"><a href=\"#4-마무리\" class=\"headerlink\" title=\"4. 마무리\"></a>4. 마무리</h2><ul>\n<li>개선점 찾기 ex&gt; 병목구간</li>\n<li>설계 핵심 요약</li>\n<li>운영 관련 이슈<ul>\n<li>메트릭, 모니터링, 로그, 배포 등</li>\n</ul>\n</li>\n<li>시스템 확장 방식</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"효과적-면접을-위한-4단계-접근법\"><a href=\"#효과적-면접을-위한-4단계-접근법\" class=\"headerlink\" title=\"효과적 면접을 위한 4단계 접근법\"></a>효과적 면접을 위한 4단계 접근법</h1><h2 id=\"1-문제-이해-및-설계-범위-확정\"><a href=\"#1-문제-이해-및-설계-범위-확정\" class=\"headerlink\" title=\"1. 문제 이해 및 설계 범위 확정\"></a>1. 문제 이해 및 설계 범위 확정</h2><ul>\n<li>구체적으로 어떤 기능들을 만들어야 하나</li>\n<li>제품 사용자 수는 얼마나 되나</li>\n<li>회사의 규모는 얼마나 빨리 커지리라 예상하나? 석 달, 여섯 달, 일년 뒤의 규모는 얼마가 되리라 예상하는가</li>\n<li>회사가 주로 사용하는 기술 스택은 무엇인가</li>\n<li>설계를 단순화 하기 위한 기존 서비스로는 어떤 것이 있는가</li>\n</ul>\n<p>→ 중요한 것은 모호함을 없에는 것</p>\n<hr>\n<h2 id=\"2-개략적인-설계안-제시-및-동의-구하기\"><a href=\"#2-개략적인-설계안-제시-및-동의-구하기\" class=\"headerlink\" title=\"2. 개략적인 설계안 제시 및 동의 구하기\"></a>2. 개략적인 설계안 제시 및 동의 구하기</h2><ul>\n<li>청사진을 만들고 의견을 구하라ㅋ</li>\n<li>화이트보드에 다이어그램 그리기<ul>\n<li>클라이언트, API, 웹서버, DB, 캐시, CDN, MQ 등</li>\n</ul>\n</li>\n<li>청사진이 제약사항에 부합하는지 확인하라</li>\n</ul>\n<hr>\n<h2 id=\"3-상세-설계\"><a href=\"#3-상세-설계\" class=\"headerlink\" title=\"3. 상세 설계\"></a>3. 상세 설계</h2><ul>\n<li>시스템에서 전반적으로 달성해야 할 목표와 기능 범위 확인</li>\n<li>전체 설계의 개략적 청사진 마련</li>\n<li>해당 청사진에 대한 면접관의 의견 청취</li>\n<li>상세 설계에서 집중해야 할 영역들 확인</li>\n</ul>\n<hr>\n<h2 id=\"4-마무리\"><a href=\"#4-마무리\" class=\"headerlink\" title=\"4. 마무리\"></a>4. 마무리</h2><ul>\n<li>개선점 찾기 ex&gt; 병목구간</li>\n<li>설계 핵심 요약</li>\n<li>운영 관련 이슈<ul>\n<li>메트릭, 모니터링, 로그, 배포 등</li>\n</ul>\n</li>\n<li>시스템 확장 방식</li>\n</ul>\n"},{"title":"사용자 수에 따른 규모 확장성","toc":true,"toc_sticky":true,"toc_label":"사용자 수에 따른 규모 확장성","toc_icon":"sticky-note","_content":"\n- 요약\n    - 웹 계층은 무상태 계층으로\n    - 모든 계층에 다중화 도입\n    - 가능한 많은 데이터를 캐시할 것\n    - 여러 데이터 센터를 지원할 것\n    - 정적 콘텐츠는 CDN을 통해 서비스할 것\n    - 데이터 계층은 샤딩을 통에 그 규모를 확장할 것\n    - 각 계층은 독립적 서비스로 분할할 것\n    - 시스템을 지속적으로 모니터링 하고, 자동화 도구들을 활용할 것\n  \n---\n\n# 단일서버\n\n## 시스템이 단일 서버로 구현되어있다고 가정할 시 프로세스\n\n1. 사용자가 도메인(api.mysite.com)으로 접속한다.\n2. DNS에 질의하여 IP주소로 반환된다. (DNS는 제3사업자임)\n3. IP주소로 HTTP 요청\n4. HTML or Json으로 응답\n\n---\n\n# 데이터베이스\n\n## RDBMS vs NoSQL\n\n- RDBMS\n    - 오라클, MySQL, PostegreSQL\n    - 열, 컬럼으로 표현\n    - Join으로 합침\n- NoSQL\n    - MongoDB ...\n    - Join 지원 안함\n\n## NoSQL 쓰는 경우\n\n- 속도 중요할 시\n- 비정형 데이터일 시\n- 데이터 직렬화, 역직렬화 용\n- 대량의 데이터\n\n---\n\n# 수직적 규모 확장 vs 수평적 규모 확장\n\n## Sacale-Up vs Sacale-Out\n\nScale-Up : 단일 서버 사양을 높임\n\nScale-Out : 서버 수를 추가\n\n## Sacale-Up 아닌 Sacale-Out이 유리한 이유\n\n- 한 대의 서버 메모리를 무한대로 증설할 방법이 없음\n- 장애에 대한 자동복구 방안이나 다중화 제시 X\n\n## 로드밸런서(LB)\n\n- 트래픽 분산의 역할\n\n## DB 다중화\n\n- 이중화 시 master-slave로 나눔\n- master는 write, slave는 read\n- 보통 read연산 비중이 훨씬 높고 slave DB가 더 많음 → 성능\n\n---\n\n# 캐시\n\n- 값비싼 연산 결과나 자주 참조되는 데이터를 저장하는 메모리\n\n## 캐시 사용 시 고려해야 할 것\n\n- 영속적인 데이터 X\n- 만료(expire) 방식\n    - LRU → 가장 자주 씀\n    - LFU\n    - FIFO\n- 데이터 일관성 유지 방식\n\n---\n\n# 콘텐츠 전송 네크워크(CDN)\n\n- 정적 콘텐츠 캐싱\n- CSS, JS, 이미지, 비디오\n\n---\n\n# 무상태(stateless) 웹 계층\n\n- Scale-Out 시 중요\n- 상태정보를 웹 계층에서 제거\n\n## 상태 정보를 웹 말고 DB에 저장\n\n- MSA시 **공유저장소**를 활용\n- Redis, NoSQL 활용\n\n---\n\n# 데이터센터\n\n- 통상적으로 지리적으로 가장 가까운 곳으로 라우팅(Geo-routing)\n\n## 구축 시 신경써야 할 것\n\n- 트래픽 우회\n- 데이터 동기화\n- 테스트와 배포\n\n→ Message Queue는 시스템이 독립적으로 확장할 수 있는 핵심전략\n\n---\n\n# 메시지 큐\n\n- 무손실, 비동기\n- pub-sub 방식\n\n\n---\n\n# 데이터베이스의 규모 확장\n\n## 샤딩(sharding)\n\n- DB를 scale-out 하는 것\n- **모든 샤드는 같은 스키마를 쓰지만 데이터 중복은 없음**\n- 샤딩 키를 정하는 것이 중요","source":"_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-사용자-수에-따른-규모-확장성/2021-10-13-사용자-수에-따른-규모-확장성.md","raw":"---\ntitle: \"사용자 수에 따른 규모 확장성\"\ncategories:\n  - 가상면접 사례로 배우는 대규모 시스템 설계기초\ntags:\n  - 시스템설계\n  - 대규모설계\n  - DB설계\n  - 서버설계 \n  - 분산설계 \ntoc: true\ntoc_sticky: true\ntoc_label: \"사용자 수에 따른 규모 확장성\"\ntoc_icon: \"sticky-note\"\n---\n\n- 요약\n    - 웹 계층은 무상태 계층으로\n    - 모든 계층에 다중화 도입\n    - 가능한 많은 데이터를 캐시할 것\n    - 여러 데이터 센터를 지원할 것\n    - 정적 콘텐츠는 CDN을 통해 서비스할 것\n    - 데이터 계층은 샤딩을 통에 그 규모를 확장할 것\n    - 각 계층은 독립적 서비스로 분할할 것\n    - 시스템을 지속적으로 모니터링 하고, 자동화 도구들을 활용할 것\n  \n---\n\n# 단일서버\n\n## 시스템이 단일 서버로 구현되어있다고 가정할 시 프로세스\n\n1. 사용자가 도메인(api.mysite.com)으로 접속한다.\n2. DNS에 질의하여 IP주소로 반환된다. (DNS는 제3사업자임)\n3. IP주소로 HTTP 요청\n4. HTML or Json으로 응답\n\n---\n\n# 데이터베이스\n\n## RDBMS vs NoSQL\n\n- RDBMS\n    - 오라클, MySQL, PostegreSQL\n    - 열, 컬럼으로 표현\n    - Join으로 합침\n- NoSQL\n    - MongoDB ...\n    - Join 지원 안함\n\n## NoSQL 쓰는 경우\n\n- 속도 중요할 시\n- 비정형 데이터일 시\n- 데이터 직렬화, 역직렬화 용\n- 대량의 데이터\n\n---\n\n# 수직적 규모 확장 vs 수평적 규모 확장\n\n## Sacale-Up vs Sacale-Out\n\nScale-Up : 단일 서버 사양을 높임\n\nScale-Out : 서버 수를 추가\n\n## Sacale-Up 아닌 Sacale-Out이 유리한 이유\n\n- 한 대의 서버 메모리를 무한대로 증설할 방법이 없음\n- 장애에 대한 자동복구 방안이나 다중화 제시 X\n\n## 로드밸런서(LB)\n\n- 트래픽 분산의 역할\n\n## DB 다중화\n\n- 이중화 시 master-slave로 나눔\n- master는 write, slave는 read\n- 보통 read연산 비중이 훨씬 높고 slave DB가 더 많음 → 성능\n\n---\n\n# 캐시\n\n- 값비싼 연산 결과나 자주 참조되는 데이터를 저장하는 메모리\n\n## 캐시 사용 시 고려해야 할 것\n\n- 영속적인 데이터 X\n- 만료(expire) 방식\n    - LRU → 가장 자주 씀\n    - LFU\n    - FIFO\n- 데이터 일관성 유지 방식\n\n---\n\n# 콘텐츠 전송 네크워크(CDN)\n\n- 정적 콘텐츠 캐싱\n- CSS, JS, 이미지, 비디오\n\n---\n\n# 무상태(stateless) 웹 계층\n\n- Scale-Out 시 중요\n- 상태정보를 웹 계층에서 제거\n\n## 상태 정보를 웹 말고 DB에 저장\n\n- MSA시 **공유저장소**를 활용\n- Redis, NoSQL 활용\n\n---\n\n# 데이터센터\n\n- 통상적으로 지리적으로 가장 가까운 곳으로 라우팅(Geo-routing)\n\n## 구축 시 신경써야 할 것\n\n- 트래픽 우회\n- 데이터 동기화\n- 테스트와 배포\n\n→ Message Queue는 시스템이 독립적으로 확장할 수 있는 핵심전략\n\n---\n\n# 메시지 큐\n\n- 무손실, 비동기\n- pub-sub 방식\n\n\n---\n\n# 데이터베이스의 규모 확장\n\n## 샤딩(sharding)\n\n- DB를 scale-out 하는 것\n- **모든 샤드는 같은 스키마를 쓰지만 데이터 중복은 없음**\n- 샤딩 키를 정하는 것이 중요","slug":"가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-사용자-수에-따른-규모-확장성/2021-10-13-사용자-수에-따른-규모-확장성","published":1,"date":"2021-10-26T12:50:02.725Z","updated":"2021-10-26T12:50:02.725Z","_id":"ckvelzqgp000agcauei1h4ufn","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>요약<ul>\n<li>웹 계층은 무상태 계층으로</li>\n<li>모든 계층에 다중화 도입</li>\n<li>가능한 많은 데이터를 캐시할 것</li>\n<li>여러 데이터 센터를 지원할 것</li>\n<li>정적 콘텐츠는 CDN을 통해 서비스할 것</li>\n<li>데이터 계층은 샤딩을 통에 그 규모를 확장할 것</li>\n<li>각 계층은 독립적 서비스로 분할할 것</li>\n<li>시스템을 지속적으로 모니터링 하고, 자동화 도구들을 활용할 것</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"단일서버\"><a href=\"#단일서버\" class=\"headerlink\" title=\"단일서버\"></a>단일서버</h1><h2 id=\"시스템이-단일-서버로-구현되어있다고-가정할-시-프로세스\"><a href=\"#시스템이-단일-서버로-구현되어있다고-가정할-시-프로세스\" class=\"headerlink\" title=\"시스템이 단일 서버로 구현되어있다고 가정할 시 프로세스\"></a>시스템이 단일 서버로 구현되어있다고 가정할 시 프로세스</h2><ol>\n<li>사용자가 도메인(api.mysite.com)으로 접속한다.</li>\n<li>DNS에 질의하여 IP주소로 반환된다. (DNS는 제3사업자임)</li>\n<li>IP주소로 HTTP 요청</li>\n<li>HTML or Json으로 응답</li>\n</ol>\n<hr>\n<h1 id=\"데이터베이스\"><a href=\"#데이터베이스\" class=\"headerlink\" title=\"데이터베이스\"></a>데이터베이스</h1><h2 id=\"RDBMS-vs-NoSQL\"><a href=\"#RDBMS-vs-NoSQL\" class=\"headerlink\" title=\"RDBMS vs NoSQL\"></a>RDBMS vs NoSQL</h2><ul>\n<li>RDBMS<ul>\n<li>오라클, MySQL, PostegreSQL</li>\n<li>열, 컬럼으로 표현</li>\n<li>Join으로 합침</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>MongoDB …</li>\n<li>Join 지원 안함</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"NoSQL-쓰는-경우\"><a href=\"#NoSQL-쓰는-경우\" class=\"headerlink\" title=\"NoSQL 쓰는 경우\"></a>NoSQL 쓰는 경우</h2><ul>\n<li>속도 중요할 시</li>\n<li>비정형 데이터일 시</li>\n<li>데이터 직렬화, 역직렬화 용</li>\n<li>대량의 데이터</li>\n</ul>\n<hr>\n<h1 id=\"수직적-규모-확장-vs-수평적-규모-확장\"><a href=\"#수직적-규모-확장-vs-수평적-규모-확장\" class=\"headerlink\" title=\"수직적 규모 확장 vs 수평적 규모 확장\"></a>수직적 규모 확장 vs 수평적 규모 확장</h1><h2 id=\"Sacale-Up-vs-Sacale-Out\"><a href=\"#Sacale-Up-vs-Sacale-Out\" class=\"headerlink\" title=\"Sacale-Up vs Sacale-Out\"></a>Sacale-Up vs Sacale-Out</h2><p>Scale-Up : 단일 서버 사양을 높임</p>\n<p>Scale-Out : 서버 수를 추가</p>\n<h2 id=\"Sacale-Up-아닌-Sacale-Out이-유리한-이유\"><a href=\"#Sacale-Up-아닌-Sacale-Out이-유리한-이유\" class=\"headerlink\" title=\"Sacale-Up 아닌 Sacale-Out이 유리한 이유\"></a>Sacale-Up 아닌 Sacale-Out이 유리한 이유</h2><ul>\n<li>한 대의 서버 메모리를 무한대로 증설할 방법이 없음</li>\n<li>장애에 대한 자동복구 방안이나 다중화 제시 X</li>\n</ul>\n<h2 id=\"로드밸런서-LB\"><a href=\"#로드밸런서-LB\" class=\"headerlink\" title=\"로드밸런서(LB)\"></a>로드밸런서(LB)</h2><ul>\n<li>트래픽 분산의 역할</li>\n</ul>\n<h2 id=\"DB-다중화\"><a href=\"#DB-다중화\" class=\"headerlink\" title=\"DB 다중화\"></a>DB 다중화</h2><ul>\n<li>이중화 시 master-slave로 나눔</li>\n<li>master는 write, slave는 read</li>\n<li>보통 read연산 비중이 훨씬 높고 slave DB가 더 많음 → 성능</li>\n</ul>\n<hr>\n<h1 id=\"캐시\"><a href=\"#캐시\" class=\"headerlink\" title=\"캐시\"></a>캐시</h1><ul>\n<li>값비싼 연산 결과나 자주 참조되는 데이터를 저장하는 메모리</li>\n</ul>\n<h2 id=\"캐시-사용-시-고려해야-할-것\"><a href=\"#캐시-사용-시-고려해야-할-것\" class=\"headerlink\" title=\"캐시 사용 시 고려해야 할 것\"></a>캐시 사용 시 고려해야 할 것</h2><ul>\n<li>영속적인 데이터 X</li>\n<li>만료(expire) 방식<ul>\n<li>LRU → 가장 자주 씀</li>\n<li>LFU</li>\n<li>FIFO</li>\n</ul>\n</li>\n<li>데이터 일관성 유지 방식</li>\n</ul>\n<hr>\n<h1 id=\"콘텐츠-전송-네크워크-CDN\"><a href=\"#콘텐츠-전송-네크워크-CDN\" class=\"headerlink\" title=\"콘텐츠 전송 네크워크(CDN)\"></a>콘텐츠 전송 네크워크(CDN)</h1><ul>\n<li>정적 콘텐츠 캐싱</li>\n<li>CSS, JS, 이미지, 비디오</li>\n</ul>\n<hr>\n<h1 id=\"무상태-stateless-웹-계층\"><a href=\"#무상태-stateless-웹-계층\" class=\"headerlink\" title=\"무상태(stateless) 웹 계층\"></a>무상태(stateless) 웹 계층</h1><ul>\n<li>Scale-Out 시 중요</li>\n<li>상태정보를 웹 계층에서 제거</li>\n</ul>\n<h2 id=\"상태-정보를-웹-말고-DB에-저장\"><a href=\"#상태-정보를-웹-말고-DB에-저장\" class=\"headerlink\" title=\"상태 정보를 웹 말고 DB에 저장\"></a>상태 정보를 웹 말고 DB에 저장</h2><ul>\n<li>MSA시 <strong>공유저장소</strong>를 활용</li>\n<li>Redis, NoSQL 활용</li>\n</ul>\n<hr>\n<h1 id=\"데이터센터\"><a href=\"#데이터센터\" class=\"headerlink\" title=\"데이터센터\"></a>데이터센터</h1><ul>\n<li>통상적으로 지리적으로 가장 가까운 곳으로 라우팅(Geo-routing)</li>\n</ul>\n<h2 id=\"구축-시-신경써야-할-것\"><a href=\"#구축-시-신경써야-할-것\" class=\"headerlink\" title=\"구축 시 신경써야 할 것\"></a>구축 시 신경써야 할 것</h2><ul>\n<li>트래픽 우회</li>\n<li>데이터 동기화</li>\n<li>테스트와 배포</li>\n</ul>\n<p>→ Message Queue는 시스템이 독립적으로 확장할 수 있는 핵심전략</p>\n<hr>\n<h1 id=\"메시지-큐\"><a href=\"#메시지-큐\" class=\"headerlink\" title=\"메시지 큐\"></a>메시지 큐</h1><ul>\n<li>무손실, 비동기</li>\n<li>pub-sub 방식</li>\n</ul>\n<hr>\n<h1 id=\"데이터베이스의-규모-확장\"><a href=\"#데이터베이스의-규모-확장\" class=\"headerlink\" title=\"데이터베이스의 규모 확장\"></a>데이터베이스의 규모 확장</h1><h2 id=\"샤딩-sharding\"><a href=\"#샤딩-sharding\" class=\"headerlink\" title=\"샤딩(sharding)\"></a>샤딩(sharding)</h2><ul>\n<li>DB를 scale-out 하는 것</li>\n<li><strong>모든 샤드는 같은 스키마를 쓰지만 데이터 중복은 없음</strong></li>\n<li>샤딩 키를 정하는 것이 중요</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>요약<ul>\n<li>웹 계층은 무상태 계층으로</li>\n<li>모든 계층에 다중화 도입</li>\n<li>가능한 많은 데이터를 캐시할 것</li>\n<li>여러 데이터 센터를 지원할 것</li>\n<li>정적 콘텐츠는 CDN을 통해 서비스할 것</li>\n<li>데이터 계층은 샤딩을 통에 그 규모를 확장할 것</li>\n<li>각 계층은 독립적 서비스로 분할할 것</li>\n<li>시스템을 지속적으로 모니터링 하고, 자동화 도구들을 활용할 것</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"단일서버\"><a href=\"#단일서버\" class=\"headerlink\" title=\"단일서버\"></a>단일서버</h1><h2 id=\"시스템이-단일-서버로-구현되어있다고-가정할-시-프로세스\"><a href=\"#시스템이-단일-서버로-구현되어있다고-가정할-시-프로세스\" class=\"headerlink\" title=\"시스템이 단일 서버로 구현되어있다고 가정할 시 프로세스\"></a>시스템이 단일 서버로 구현되어있다고 가정할 시 프로세스</h2><ol>\n<li>사용자가 도메인(api.mysite.com)으로 접속한다.</li>\n<li>DNS에 질의하여 IP주소로 반환된다. (DNS는 제3사업자임)</li>\n<li>IP주소로 HTTP 요청</li>\n<li>HTML or Json으로 응답</li>\n</ol>\n<hr>\n<h1 id=\"데이터베이스\"><a href=\"#데이터베이스\" class=\"headerlink\" title=\"데이터베이스\"></a>데이터베이스</h1><h2 id=\"RDBMS-vs-NoSQL\"><a href=\"#RDBMS-vs-NoSQL\" class=\"headerlink\" title=\"RDBMS vs NoSQL\"></a>RDBMS vs NoSQL</h2><ul>\n<li>RDBMS<ul>\n<li>오라클, MySQL, PostegreSQL</li>\n<li>열, 컬럼으로 표현</li>\n<li>Join으로 합침</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>MongoDB …</li>\n<li>Join 지원 안함</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"NoSQL-쓰는-경우\"><a href=\"#NoSQL-쓰는-경우\" class=\"headerlink\" title=\"NoSQL 쓰는 경우\"></a>NoSQL 쓰는 경우</h2><ul>\n<li>속도 중요할 시</li>\n<li>비정형 데이터일 시</li>\n<li>데이터 직렬화, 역직렬화 용</li>\n<li>대량의 데이터</li>\n</ul>\n<hr>\n<h1 id=\"수직적-규모-확장-vs-수평적-규모-확장\"><a href=\"#수직적-규모-확장-vs-수평적-규모-확장\" class=\"headerlink\" title=\"수직적 규모 확장 vs 수평적 규모 확장\"></a>수직적 규모 확장 vs 수평적 규모 확장</h1><h2 id=\"Sacale-Up-vs-Sacale-Out\"><a href=\"#Sacale-Up-vs-Sacale-Out\" class=\"headerlink\" title=\"Sacale-Up vs Sacale-Out\"></a>Sacale-Up vs Sacale-Out</h2><p>Scale-Up : 단일 서버 사양을 높임</p>\n<p>Scale-Out : 서버 수를 추가</p>\n<h2 id=\"Sacale-Up-아닌-Sacale-Out이-유리한-이유\"><a href=\"#Sacale-Up-아닌-Sacale-Out이-유리한-이유\" class=\"headerlink\" title=\"Sacale-Up 아닌 Sacale-Out이 유리한 이유\"></a>Sacale-Up 아닌 Sacale-Out이 유리한 이유</h2><ul>\n<li>한 대의 서버 메모리를 무한대로 증설할 방법이 없음</li>\n<li>장애에 대한 자동복구 방안이나 다중화 제시 X</li>\n</ul>\n<h2 id=\"로드밸런서-LB\"><a href=\"#로드밸런서-LB\" class=\"headerlink\" title=\"로드밸런서(LB)\"></a>로드밸런서(LB)</h2><ul>\n<li>트래픽 분산의 역할</li>\n</ul>\n<h2 id=\"DB-다중화\"><a href=\"#DB-다중화\" class=\"headerlink\" title=\"DB 다중화\"></a>DB 다중화</h2><ul>\n<li>이중화 시 master-slave로 나눔</li>\n<li>master는 write, slave는 read</li>\n<li>보통 read연산 비중이 훨씬 높고 slave DB가 더 많음 → 성능</li>\n</ul>\n<hr>\n<h1 id=\"캐시\"><a href=\"#캐시\" class=\"headerlink\" title=\"캐시\"></a>캐시</h1><ul>\n<li>값비싼 연산 결과나 자주 참조되는 데이터를 저장하는 메모리</li>\n</ul>\n<h2 id=\"캐시-사용-시-고려해야-할-것\"><a href=\"#캐시-사용-시-고려해야-할-것\" class=\"headerlink\" title=\"캐시 사용 시 고려해야 할 것\"></a>캐시 사용 시 고려해야 할 것</h2><ul>\n<li>영속적인 데이터 X</li>\n<li>만료(expire) 방식<ul>\n<li>LRU → 가장 자주 씀</li>\n<li>LFU</li>\n<li>FIFO</li>\n</ul>\n</li>\n<li>데이터 일관성 유지 방식</li>\n</ul>\n<hr>\n<h1 id=\"콘텐츠-전송-네크워크-CDN\"><a href=\"#콘텐츠-전송-네크워크-CDN\" class=\"headerlink\" title=\"콘텐츠 전송 네크워크(CDN)\"></a>콘텐츠 전송 네크워크(CDN)</h1><ul>\n<li>정적 콘텐츠 캐싱</li>\n<li>CSS, JS, 이미지, 비디오</li>\n</ul>\n<hr>\n<h1 id=\"무상태-stateless-웹-계층\"><a href=\"#무상태-stateless-웹-계층\" class=\"headerlink\" title=\"무상태(stateless) 웹 계층\"></a>무상태(stateless) 웹 계층</h1><ul>\n<li>Scale-Out 시 중요</li>\n<li>상태정보를 웹 계층에서 제거</li>\n</ul>\n<h2 id=\"상태-정보를-웹-말고-DB에-저장\"><a href=\"#상태-정보를-웹-말고-DB에-저장\" class=\"headerlink\" title=\"상태 정보를 웹 말고 DB에 저장\"></a>상태 정보를 웹 말고 DB에 저장</h2><ul>\n<li>MSA시 <strong>공유저장소</strong>를 활용</li>\n<li>Redis, NoSQL 활용</li>\n</ul>\n<hr>\n<h1 id=\"데이터센터\"><a href=\"#데이터센터\" class=\"headerlink\" title=\"데이터센터\"></a>데이터센터</h1><ul>\n<li>통상적으로 지리적으로 가장 가까운 곳으로 라우팅(Geo-routing)</li>\n</ul>\n<h2 id=\"구축-시-신경써야-할-것\"><a href=\"#구축-시-신경써야-할-것\" class=\"headerlink\" title=\"구축 시 신경써야 할 것\"></a>구축 시 신경써야 할 것</h2><ul>\n<li>트래픽 우회</li>\n<li>데이터 동기화</li>\n<li>테스트와 배포</li>\n</ul>\n<p>→ Message Queue는 시스템이 독립적으로 확장할 수 있는 핵심전략</p>\n<hr>\n<h1 id=\"메시지-큐\"><a href=\"#메시지-큐\" class=\"headerlink\" title=\"메시지 큐\"></a>메시지 큐</h1><ul>\n<li>무손실, 비동기</li>\n<li>pub-sub 방식</li>\n</ul>\n<hr>\n<h1 id=\"데이터베이스의-규모-확장\"><a href=\"#데이터베이스의-규모-확장\" class=\"headerlink\" title=\"데이터베이스의 규모 확장\"></a>데이터베이스의 규모 확장</h1><h2 id=\"샤딩-sharding\"><a href=\"#샤딩-sharding\" class=\"headerlink\" title=\"샤딩(sharding)\"></a>샤딩(sharding)</h2><ul>\n<li>DB를 scale-out 하는 것</li>\n<li><strong>모든 샤드는 같은 스키마를 쓰지만 데이터 중복은 없음</strong></li>\n<li>샤딩 키를 정하는 것이 중요</li>\n</ul>\n"},{"title":"싱글톤 패턴","toc":true,"toc_label":"싱글톤 패턴","_content":"\n\n> 해당 클래스의 인스턴스가 하나만 만들어지고, \n어디서든지 그 인스턴스에 접근할 수 있도록 하기 위한 패턴\n> \n\n## 고전적인 싱글톤 패턴 (문제 있음)\n\n```java\npublic class Singleton {\n\n\tprivate static Singleton uniqueInstance;\n\n\tprivate Singleton(){}\n\n\tpublic static Singleton getInstance(){\n\t\tif (uniqueInstance == null){\n\t\t\tuniqueInstance = new Singleton();\n\t\t}\n\t\treturn uniqueInstance;\n\t}\n }\n```\n\n멀티쓰레드 환경에서는 \n\n```java\nif (uniqueInstance == null){\n\tuniqueInstance = new Singleton();\n}\n```\n\n이 부분에서  2개 이상의 인스턴스가 생성될 수 있다.\n\n## 해결방법\n\n### 1. `synchronized` 사용\n\n```java\npublic class Singleton {\n\n\tprivate static Singleton uniqueInstance;\n\n\tprivate Singleton(){}\n\n\tpublic static synchronized Singleton getInstance(){\n\t\tif (uniqueInstance == null){\n\t\t\tuniqueInstance = new Singleton();\n\t\t}\n\t\treturn uniqueInstance;\n\t}\n }\n```\n\n- 단점 : 속도 저하\n    \n    → 메소드가  `synchronized` 되면 약 100배 정도 성능 저하가 일어난다고 한다.\n    \n\n### 2. 인스턴스를 처음부터 만들어 버림\n\n```java\npublic class Singleton {\n\n\tprivate static Singleton uniqueInstance = new Singleton();\n\n\tprivate Singleton(){}\n\n\tpublic static synchronized Singleton getInstance(){\n\t\treturn uniqueInstance;\n\t}\n }\n```\n\n- 클래스가 로딩될 때 JVM에서 Singleton의 유일한 인스턴스를 생성해준다.\n\n### 3. DCL(Double-Checking Locking) 사용\n\n```java\npublic class Singleton {\n\n\tprivate volatile static Singleton uniqueInstance;\n\n\tprivate Singleton(){}\n\n\tpublic static Singleton getInstance(){\n\t\tif (uniqueInstance == null){\n                        synchronized (Singleton.class){\n                                  if(uniqueInstance == null){\n                                             uniqueInstance = new Singleton();\n                                  }\n                        }\n\t\t}\n\t\treturn uniqueInstance;\n\t}\n }\n```\n\n- `volatile` 키워드를 사용하면 자바의 일종의 최적화인 리오더링(보통 컴파일 과정에서 일어나며, 프로그래머가 만들어낸 코드는 컴파일 될 때 좀더 빠르게 실행될 수 있도록 조작이 가해져 최적하됨)을 회피하여 읽기와 쓰기순서를 보장한다.\n- 멀티스레딩을 쓰더라도 uniqueInstance변수가 Singleton 인스턴스로 초기화 되는 과정이 올바르게 진행되도록 할 수 있다.\n- **DCL은 자바1.5이상의 버전에서만 사용가능**하다.\n- 자바 1.4 및 그 전에 나온 버전의 JVM 중에는 volatile 키워드를 사용하더라도 동기화가 잘 안되는 것이 많다. 일종의 버그.\n\n## 요약\n\n- 우리가 알고있던 싱글톤 패턴은 사실 **싱글톤 패턴이 아님**!\n- 위의 3가지 방법을 사용하자\n- 개인적으론 **생성자(2번)**가 가장 간단한 것 같음","source":"_posts/디자인-패턴/2021-10-19-싱글톤-패턴/2021-10-19-싱글톤-패턴.md","raw":"---\ntitle: \"싱글톤 패턴\"\ncategories:\n  - 디자인패턴 \ntags:\n  - 디자인패턴\n  - 싱글톤\ntoc: true\ntoc_label: \"싱글톤 패턴\"\n---\n\n\n> 해당 클래스의 인스턴스가 하나만 만들어지고, \n어디서든지 그 인스턴스에 접근할 수 있도록 하기 위한 패턴\n> \n\n## 고전적인 싱글톤 패턴 (문제 있음)\n\n```java\npublic class Singleton {\n\n\tprivate static Singleton uniqueInstance;\n\n\tprivate Singleton(){}\n\n\tpublic static Singleton getInstance(){\n\t\tif (uniqueInstance == null){\n\t\t\tuniqueInstance = new Singleton();\n\t\t}\n\t\treturn uniqueInstance;\n\t}\n }\n```\n\n멀티쓰레드 환경에서는 \n\n```java\nif (uniqueInstance == null){\n\tuniqueInstance = new Singleton();\n}\n```\n\n이 부분에서  2개 이상의 인스턴스가 생성될 수 있다.\n\n## 해결방법\n\n### 1. `synchronized` 사용\n\n```java\npublic class Singleton {\n\n\tprivate static Singleton uniqueInstance;\n\n\tprivate Singleton(){}\n\n\tpublic static synchronized Singleton getInstance(){\n\t\tif (uniqueInstance == null){\n\t\t\tuniqueInstance = new Singleton();\n\t\t}\n\t\treturn uniqueInstance;\n\t}\n }\n```\n\n- 단점 : 속도 저하\n    \n    → 메소드가  `synchronized` 되면 약 100배 정도 성능 저하가 일어난다고 한다.\n    \n\n### 2. 인스턴스를 처음부터 만들어 버림\n\n```java\npublic class Singleton {\n\n\tprivate static Singleton uniqueInstance = new Singleton();\n\n\tprivate Singleton(){}\n\n\tpublic static synchronized Singleton getInstance(){\n\t\treturn uniqueInstance;\n\t}\n }\n```\n\n- 클래스가 로딩될 때 JVM에서 Singleton의 유일한 인스턴스를 생성해준다.\n\n### 3. DCL(Double-Checking Locking) 사용\n\n```java\npublic class Singleton {\n\n\tprivate volatile static Singleton uniqueInstance;\n\n\tprivate Singleton(){}\n\n\tpublic static Singleton getInstance(){\n\t\tif (uniqueInstance == null){\n                        synchronized (Singleton.class){\n                                  if(uniqueInstance == null){\n                                             uniqueInstance = new Singleton();\n                                  }\n                        }\n\t\t}\n\t\treturn uniqueInstance;\n\t}\n }\n```\n\n- `volatile` 키워드를 사용하면 자바의 일종의 최적화인 리오더링(보통 컴파일 과정에서 일어나며, 프로그래머가 만들어낸 코드는 컴파일 될 때 좀더 빠르게 실행될 수 있도록 조작이 가해져 최적하됨)을 회피하여 읽기와 쓰기순서를 보장한다.\n- 멀티스레딩을 쓰더라도 uniqueInstance변수가 Singleton 인스턴스로 초기화 되는 과정이 올바르게 진행되도록 할 수 있다.\n- **DCL은 자바1.5이상의 버전에서만 사용가능**하다.\n- 자바 1.4 및 그 전에 나온 버전의 JVM 중에는 volatile 키워드를 사용하더라도 동기화가 잘 안되는 것이 많다. 일종의 버그.\n\n## 요약\n\n- 우리가 알고있던 싱글톤 패턴은 사실 **싱글톤 패턴이 아님**!\n- 위의 3가지 방법을 사용하자\n- 개인적으론 **생성자(2번)**가 가장 간단한 것 같음","slug":"디자인-패턴/2021-10-19-싱글톤-패턴/2021-10-19-싱글톤-패턴","published":1,"date":"2021-10-27T13:48:15.469Z","updated":"2021-10-27T13:48:15.469Z","_id":"ckvelzqgs000bgcau6zfca07a","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>해당 클래스의 인스턴스가 하나만 만들어지고,<br>어디서든지 그 인스턴스에 접근할 수 있도록 하기 위한 패턴</p>\n</blockquote>\n<h2 id=\"고전적인-싱글톤-패턴-문제-있음\"><a href=\"#고전적인-싱글톤-패턴-문제-있음\" class=\"headerlink\" title=\"고전적인 싱글톤 패턴 (문제 있음)\"></a>고전적인 싱글톤 패턴 (문제 있음)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton uniqueInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (uniqueInstance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\tuniqueInstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> uniqueInstance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>멀티쓰레드 환경에서는 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (uniqueInstance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\tuniqueInstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>이 부분에서  2개 이상의 인스턴스가 생성될 수 있다.</p>\n<h2 id=\"해결방법\"><a href=\"#해결방법\" class=\"headerlink\" title=\"해결방법\"></a>해결방법</h2><h3 id=\"1-synchronized-사용\"><a href=\"#1-synchronized-사용\" class=\"headerlink\" title=\"1. synchronized 사용\"></a>1. <code>synchronized</code> 사용</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton uniqueInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (uniqueInstance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\tuniqueInstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> uniqueInstance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>단점 : 속도 저하  → 메소드가  <code>synchronized</code> 되면 약 100배 정도 성능 저하가 일어난다고 한다.</li>\n</ul>\n<h3 id=\"2-인스턴스를-처음부터-만들어-버림\"><a href=\"#2-인스턴스를-처음부터-만들어-버림\" class=\"headerlink\" title=\"2. 인스턴스를 처음부터 만들어 버림\"></a>2. 인스턴스를 처음부터 만들어 버림</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton uniqueInstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> uniqueInstance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>클래스가 로딩될 때 JVM에서 Singleton의 유일한 인스턴스를 생성해준다.</li>\n</ul>\n<h3 id=\"3-DCL-Double-Checking-Locking-사용\"><a href=\"#3-DCL-Double-Checking-Locking-사용\" class=\"headerlink\" title=\"3. DCL(Double-Checking Locking) 사용\"></a>3. DCL(Double-Checking Locking) 사용</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton uniqueInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (uniqueInstance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">synchronized</span> (Singleton.class)&#123;</span><br><span class=\"line\">                                  <span class=\"keyword\">if</span>(uniqueInstance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                                             uniqueInstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> uniqueInstance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>volatile</code> 키워드를 사용하면 자바의 일종의 최적화인 리오더링(보통 컴파일 과정에서 일어나며, 프로그래머가 만들어낸 코드는 컴파일 될 때 좀더 빠르게 실행될 수 있도록 조작이 가해져 최적하됨)을 회피하여 읽기와 쓰기순서를 보장한다.</li>\n<li>멀티스레딩을 쓰더라도 uniqueInstance변수가 Singleton 인스턴스로 초기화 되는 과정이 올바르게 진행되도록 할 수 있다.</li>\n<li><strong>DCL은 자바1.5이상의 버전에서만 사용가능</strong>하다.</li>\n<li>자바 1.4 및 그 전에 나온 버전의 JVM 중에는 volatile 키워드를 사용하더라도 동기화가 잘 안되는 것이 많다. 일종의 버그.</li>\n</ul>\n<h2 id=\"요약\"><a href=\"#요약\" class=\"headerlink\" title=\"요약\"></a>요약</h2><ul>\n<li>우리가 알고있던 싱글톤 패턴은 사실 <strong>싱글톤 패턴이 아님</strong>!</li>\n<li>위의 3가지 방법을 사용하자</li>\n<li>개인적으론 **생성자(2번)**가 가장 간단한 것 같음</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>해당 클래스의 인스턴스가 하나만 만들어지고,<br>어디서든지 그 인스턴스에 접근할 수 있도록 하기 위한 패턴</p>\n</blockquote>\n<h2 id=\"고전적인-싱글톤-패턴-문제-있음\"><a href=\"#고전적인-싱글톤-패턴-문제-있음\" class=\"headerlink\" title=\"고전적인 싱글톤 패턴 (문제 있음)\"></a>고전적인 싱글톤 패턴 (문제 있음)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton uniqueInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (uniqueInstance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\tuniqueInstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> uniqueInstance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>멀티쓰레드 환경에서는 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (uniqueInstance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\tuniqueInstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>이 부분에서  2개 이상의 인스턴스가 생성될 수 있다.</p>\n<h2 id=\"해결방법\"><a href=\"#해결방법\" class=\"headerlink\" title=\"해결방법\"></a>해결방법</h2><h3 id=\"1-synchronized-사용\"><a href=\"#1-synchronized-사용\" class=\"headerlink\" title=\"1. synchronized 사용\"></a>1. <code>synchronized</code> 사용</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton uniqueInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (uniqueInstance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\tuniqueInstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> uniqueInstance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>단점 : 속도 저하  → 메소드가  <code>synchronized</code> 되면 약 100배 정도 성능 저하가 일어난다고 한다.</li>\n</ul>\n<h3 id=\"2-인스턴스를-처음부터-만들어-버림\"><a href=\"#2-인스턴스를-처음부터-만들어-버림\" class=\"headerlink\" title=\"2. 인스턴스를 처음부터 만들어 버림\"></a>2. 인스턴스를 처음부터 만들어 버림</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton uniqueInstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> uniqueInstance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>클래스가 로딩될 때 JVM에서 Singleton의 유일한 인스턴스를 생성해준다.</li>\n</ul>\n<h3 id=\"3-DCL-Double-Checking-Locking-사용\"><a href=\"#3-DCL-Double-Checking-Locking-사용\" class=\"headerlink\" title=\"3. DCL(Double-Checking Locking) 사용\"></a>3. DCL(Double-Checking Locking) 사용</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton uniqueInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (uniqueInstance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">synchronized</span> (Singleton.class)&#123;</span><br><span class=\"line\">                                  <span class=\"keyword\">if</span>(uniqueInstance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                                             uniqueInstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> uniqueInstance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>volatile</code> 키워드를 사용하면 자바의 일종의 최적화인 리오더링(보통 컴파일 과정에서 일어나며, 프로그래머가 만들어낸 코드는 컴파일 될 때 좀더 빠르게 실행될 수 있도록 조작이 가해져 최적하됨)을 회피하여 읽기와 쓰기순서를 보장한다.</li>\n<li>멀티스레딩을 쓰더라도 uniqueInstance변수가 Singleton 인스턴스로 초기화 되는 과정이 올바르게 진행되도록 할 수 있다.</li>\n<li><strong>DCL은 자바1.5이상의 버전에서만 사용가능</strong>하다.</li>\n<li>자바 1.4 및 그 전에 나온 버전의 JVM 중에는 volatile 키워드를 사용하더라도 동기화가 잘 안되는 것이 많다. 일종의 버그.</li>\n</ul>\n<h2 id=\"요약\"><a href=\"#요약\" class=\"headerlink\" title=\"요약\"></a>요약</h2><ul>\n<li>우리가 알고있던 싱글톤 패턴은 사실 <strong>싱글톤 패턴이 아님</strong>!</li>\n<li>위의 3가지 방법을 사용하자</li>\n<li>개인적으론 **생성자(2번)**가 가장 간단한 것 같음</li>\n</ul>\n"},{"title":"안정 해시 설계","toc":true,"toc_sticky":true,"toc_label":"안정 해시 설계","toc_icon":"sticky-note","_content":"\n\n> 수평적 규모 확장을 위해서는 요청 또는 데이터를 서버로 균등하게 나누는 것이 중요\n안정 해시는 이 목표를 달성하기 위해 보편적으로 사용하는 기술\n>\n\n---\n\n## 안정 해시 설계의  이점\n\n- 서버가 추가되거나 삭제될 때 재배치되는 키의 수가 최소화된다.\n- 데이터가 보다 균등하게 분포하게 되므로 수평적 규모 확장성을 달성하기 쉽다.\n- 핫스팟(hotspot) 키 문제를 줄인다.\n\n---\n\n### 만약 잘 분배가 되어있던 서버 하나가 죽었을 경우?\n\n### 기존 해시 테이블\n\n- 모든 키를 재배치함\n\n![](https://user-images.githubusercontent.com/55419159/138881514-e09e12fd-2764-40ee-9eef-2cf3a4a84f3f.png)\n\n### 안정 해시\n\n- 이상이 있는 부분만 재배치\n\n![](https://user-images.githubusercontent.com/55419159/138881565-e60403c1-c98e-48ab-bb80-8a8c5f10320b.png)\n\n---\n\n## 기본 구현법\n\n1. 서버와 키를 균등 분포 해시 함수를 사용해 해시 링에 배치한다.\n2. 키의 위치에서 링을 시계 방향을 탐색하다 만나는 최초의 서버가 키가 저장될 서버다.\n\n**문제점**\n\n- 서버가 추가되거나 삭제될 때 파티션의 크기를 균등하게 유지하는게 불가능\n- 키의 균등 분포를 달성하기가 어려움\n\n---\n\n## 가상 노드\n\n> 기본 구현법의 문제를 해결하기 위한 방법\n실제 노드를 가르키는 가상 노드를 만들어 해시 링에 균등하게 배치하는 방법\n>\n","source":"_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-안정-해시-설계/2021-10-13-안정-해시-설계.md","raw":"---\ntitle: \"안정 해시 설계\"\ncategories:\n  - 가상면접 사례로 배우는 대규모 시스템 설계기초\ntags:\n  - 시스템설계\n  - 대규모설계\n  - 안정해시\n  - 가상노드\ntoc: true\ntoc_sticky: true\ntoc_label: \"안정 해시 설계\"\ntoc_icon: \"sticky-note\"\n---\n\n\n> 수평적 규모 확장을 위해서는 요청 또는 데이터를 서버로 균등하게 나누는 것이 중요\n안정 해시는 이 목표를 달성하기 위해 보편적으로 사용하는 기술\n>\n\n---\n\n## 안정 해시 설계의  이점\n\n- 서버가 추가되거나 삭제될 때 재배치되는 키의 수가 최소화된다.\n- 데이터가 보다 균등하게 분포하게 되므로 수평적 규모 확장성을 달성하기 쉽다.\n- 핫스팟(hotspot) 키 문제를 줄인다.\n\n---\n\n### 만약 잘 분배가 되어있던 서버 하나가 죽었을 경우?\n\n### 기존 해시 테이블\n\n- 모든 키를 재배치함\n\n![](https://user-images.githubusercontent.com/55419159/138881514-e09e12fd-2764-40ee-9eef-2cf3a4a84f3f.png)\n\n### 안정 해시\n\n- 이상이 있는 부분만 재배치\n\n![](https://user-images.githubusercontent.com/55419159/138881565-e60403c1-c98e-48ab-bb80-8a8c5f10320b.png)\n\n---\n\n## 기본 구현법\n\n1. 서버와 키를 균등 분포 해시 함수를 사용해 해시 링에 배치한다.\n2. 키의 위치에서 링을 시계 방향을 탐색하다 만나는 최초의 서버가 키가 저장될 서버다.\n\n**문제점**\n\n- 서버가 추가되거나 삭제될 때 파티션의 크기를 균등하게 유지하는게 불가능\n- 키의 균등 분포를 달성하기가 어려움\n\n---\n\n## 가상 노드\n\n> 기본 구현법의 문제를 해결하기 위한 방법\n실제 노드를 가르키는 가상 노드를 만들어 해시 링에 균등하게 배치하는 방법\n>\n","slug":"가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-안정-해시-설계/2021-10-13-안정-해시-설계","published":1,"date":"2021-10-26T12:53:30.299Z","updated":"2021-10-26T12:53:30.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvelzqh4000xgcau865e32x9","content":"<blockquote>\n<p>수평적 규모 확장을 위해서는 요청 또는 데이터를 서버로 균등하게 나누는 것이 중요<br>안정 해시는 이 목표를 달성하기 위해 보편적으로 사용하는 기술</p>\n</blockquote>\n<hr>\n<h2 id=\"안정-해시-설계의-이점\"><a href=\"#안정-해시-설계의-이점\" class=\"headerlink\" title=\"안정 해시 설계의  이점\"></a>안정 해시 설계의  이점</h2><ul>\n<li>서버가 추가되거나 삭제될 때 재배치되는 키의 수가 최소화된다.</li>\n<li>데이터가 보다 균등하게 분포하게 되므로 수평적 규모 확장성을 달성하기 쉽다.</li>\n<li>핫스팟(hotspot) 키 문제를 줄인다.</li>\n</ul>\n<hr>\n<h3 id=\"만약-잘-분배가-되어있던-서버-하나가-죽었을-경우\"><a href=\"#만약-잘-분배가-되어있던-서버-하나가-죽었을-경우\" class=\"headerlink\" title=\"만약 잘 분배가 되어있던 서버 하나가 죽었을 경우?\"></a>만약 잘 분배가 되어있던 서버 하나가 죽었을 경우?</h3><h3 id=\"기존-해시-테이블\"><a href=\"#기존-해시-테이블\" class=\"headerlink\" title=\"기존 해시 테이블\"></a>기존 해시 테이블</h3><ul>\n<li>모든 키를 재배치함</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138881514-e09e12fd-2764-40ee-9eef-2cf3a4a84f3f.png\"></p>\n<h3 id=\"안정-해시\"><a href=\"#안정-해시\" class=\"headerlink\" title=\"안정 해시\"></a>안정 해시</h3><ul>\n<li>이상이 있는 부분만 재배치</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138881565-e60403c1-c98e-48ab-bb80-8a8c5f10320b.png\"></p>\n<hr>\n<h2 id=\"기본-구현법\"><a href=\"#기본-구현법\" class=\"headerlink\" title=\"기본 구현법\"></a>기본 구현법</h2><ol>\n<li>서버와 키를 균등 분포 해시 함수를 사용해 해시 링에 배치한다.</li>\n<li>키의 위치에서 링을 시계 방향을 탐색하다 만나는 최초의 서버가 키가 저장될 서버다.</li>\n</ol>\n<p><strong>문제점</strong></p>\n<ul>\n<li>서버가 추가되거나 삭제될 때 파티션의 크기를 균등하게 유지하는게 불가능</li>\n<li>키의 균등 분포를 달성하기가 어려움</li>\n</ul>\n<hr>\n<h2 id=\"가상-노드\"><a href=\"#가상-노드\" class=\"headerlink\" title=\"가상 노드\"></a>가상 노드</h2><blockquote>\n<p>기본 구현법의 문제를 해결하기 위한 방법<br>실제 노드를 가르키는 가상 노드를 만들어 해시 링에 균등하게 배치하는 방법</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>수평적 규모 확장을 위해서는 요청 또는 데이터를 서버로 균등하게 나누는 것이 중요<br>안정 해시는 이 목표를 달성하기 위해 보편적으로 사용하는 기술</p>\n</blockquote>\n<hr>\n<h2 id=\"안정-해시-설계의-이점\"><a href=\"#안정-해시-설계의-이점\" class=\"headerlink\" title=\"안정 해시 설계의  이점\"></a>안정 해시 설계의  이점</h2><ul>\n<li>서버가 추가되거나 삭제될 때 재배치되는 키의 수가 최소화된다.</li>\n<li>데이터가 보다 균등하게 분포하게 되므로 수평적 규모 확장성을 달성하기 쉽다.</li>\n<li>핫스팟(hotspot) 키 문제를 줄인다.</li>\n</ul>\n<hr>\n<h3 id=\"만약-잘-분배가-되어있던-서버-하나가-죽었을-경우\"><a href=\"#만약-잘-분배가-되어있던-서버-하나가-죽었을-경우\" class=\"headerlink\" title=\"만약 잘 분배가 되어있던 서버 하나가 죽었을 경우?\"></a>만약 잘 분배가 되어있던 서버 하나가 죽었을 경우?</h3><h3 id=\"기존-해시-테이블\"><a href=\"#기존-해시-테이블\" class=\"headerlink\" title=\"기존 해시 테이블\"></a>기존 해시 테이블</h3><ul>\n<li>모든 키를 재배치함</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138881514-e09e12fd-2764-40ee-9eef-2cf3a4a84f3f.png\"></p>\n<h3 id=\"안정-해시\"><a href=\"#안정-해시\" class=\"headerlink\" title=\"안정 해시\"></a>안정 해시</h3><ul>\n<li>이상이 있는 부분만 재배치</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138881565-e60403c1-c98e-48ab-bb80-8a8c5f10320b.png\"></p>\n<hr>\n<h2 id=\"기본-구현법\"><a href=\"#기본-구현법\" class=\"headerlink\" title=\"기본 구현법\"></a>기본 구현법</h2><ol>\n<li>서버와 키를 균등 분포 해시 함수를 사용해 해시 링에 배치한다.</li>\n<li>키의 위치에서 링을 시계 방향을 탐색하다 만나는 최초의 서버가 키가 저장될 서버다.</li>\n</ol>\n<p><strong>문제점</strong></p>\n<ul>\n<li>서버가 추가되거나 삭제될 때 파티션의 크기를 균등하게 유지하는게 불가능</li>\n<li>키의 균등 분포를 달성하기가 어려움</li>\n</ul>\n<hr>\n<h2 id=\"가상-노드\"><a href=\"#가상-노드\" class=\"headerlink\" title=\"가상 노드\"></a>가상 노드</h2><blockquote>\n<p>기본 구현법의 문제를 해결하기 위한 방법<br>실제 노드를 가르키는 가상 노드를 만들어 해시 링에 균등하게 배치하는 방법</p>\n</blockquote>\n"},{"title":"팩토리 패턴","toc":true,"toc_sticky":true,"toc_label":"팩토리 패턴","toc_icon":"sticky-note","_content":"\n\n## ⛳ 들어가기 전에..\n\n회사에서 같은 프로세스 내에서 각각의 제휴사에 서비스를 인터페이스해야 하는 경우가 있었다.\n\n전체적인 프로세스 플로우를 인터페이스로, 제휴사를 클래스(Bean)로 만들어 팩토리 패턴으로 구현하였다. \n\n동일한 프로세스 플로우 내에서 각기 다른 제휴사의 API와 연동해야 했는데 팩토리 패턴이 많은 도움이 되었다.\n\n---\n\n## 👋 팩토리패턴이란\n\n### ⚾ 팩토리 메소드 패턴\n> 객체를 생성하기 위한 인터페이스를 정의하는데, \n> 어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정하게 만든다. \n> 즉, 팩토리 메소드 패턴을 이용하면 **클래스의 인스턴스를 만드는 일을 서브클래스에게 맡기는 것**.\n\n### 🥎 추상 팩토리 패턴\n> **인터페이스를 이용**하여 서로 연관된, \n> 또는 의존하는 객체를 구상 클래스를 지정하지 않고도 생성한다.\n\n---\n\n## 🎩 팩토리패턴이 필요한 이유\n\n`new`를 사용하는 것은 구상 클래스의 인스턴스를 만드는 것이다.\n당연히! 인터페이스가 아닌 _특정 구현을 사용하게 되어버리는 것_.\n일련의 구상 클래스들이 있을때는 어쩔수 없이 다음과 같은 코드를 만들어야 하는 경우가 있다.\n\n\n```java\nDuck duck;\n\nif ( type == picnic ) duck = new MallardDuck();\nelse if ( type == hunting ) duck = new DecoyDuck();\nelse if ( type == inBathTub) duck = new RubberDuck();\n```\n\n이런 코드가 있다는 것은, 뭔가 변경하거나 확장해야 할 때 *코드를 다시 확인하고 추가 또는 제거해야 한다는 것*을 의미한다.\n**인터페이스**에 맞춰서 코딩을 하면 시스템에서 일어날 수 있는 여러 변화를 이겨낼 수 있다.\n**다형성** 덕분에 어떤 클래스든 특정 인터페이스만 구현하면 사용할수 있기 때문이다.\n\n반대로. 구상 클래스를 많이 사용하면 새로운 구상 클래스가 추가될 때마다 코드를 고쳐야 하기때문에 많은 문제가 생길수 있다.\n즉, *변화에 대해 닫혀 있는 코드*가 되어버리는 것이다.\n\n> 바뀔 수 있는 부분을 찾아내서 바뀌지 않는 부분하고 분리시켜야 한다는 원칙.\n\n---\n\n## 🎢 고전적인 팩토리 패턴\n\n- **피자 가게**를 운영하고 있고 **피자가게 클래스**를 만들어야 된다고 가정한다.\n> 피자가게는 다양한 피자가 있을 수 있다.\n> 또한 다양한 피자가게가 있을 수 있다.\n\n### 🎞 기존소스\n\n```java\nPizza orderPizza(String type) {\n\n       Pizza pizza;\n\n       //추가하거나 제거 시 매번 바뀌어야 하는부분\n       if(type.equals(\"cheese\")) pizza = new CheesePizza();\n       else if(type.equals(\"greek\")) pizza = new GreekPizza();\n       else if(type.equals(\"pepperoni\")) pizza = new PepperoniPizza();\n       //\n\n       pizza.prepare();\n       pizza.bake();\n       pizza.cut();\n       pizza.box();\n       return pizza;\n}\n```\n\n### 1. 피자 팩토리를 만든다.\n```java\n public class SimplePizzaFactory {\t\n\n\tpublic Pizza createPizza(String type){ //이런 경우에는 static메소드로 선언하는 경우가 종종 있음.\n\n\t\tPizza pizza = null;\n\n\t\tif(pizza.equals(\"cheese\")) pizza = new CheesePizza();\n\t\tif(pizza.equals(\"pepper\")) pizza = new PepperoniPizza();\n\t\tif(pizza.equals(\"clam\")) pizza = new ClamPizza();\n\t\tif(pizza.equals(\"veggie\")) pizza = new VeggiePizza();\n\t\t\n        return pizza;\n\t}\n }\n```\n\n### 2. 피자 가게를 만든다.\n```java\n\npublic class PizzaStore{\n\n\tSimplePizzaFactory simplePizzaFactory;\n\n\tpublic PizzaStore(SimplePizzaFactory simplePizzaFactory) {\n\t\tthis.simplePizzaFactory = simplePizzaFactory;  //피자 가게를 동적으로 설정\n\t}\n\n\tpublic Pizza orderPizza(String type){\n\n\t\tPizza pizza;\n\t\tpizza = simplePizzaFactory.createPizza(type); //수정 안해도 됨\n\t\tpizza.prepare();\n\t\tpizza.bake();\n\t\tpizza.cut();\n\t\tpizza.box();\n\n\t\treturn pizza;\n\n\t}\n}\n```\n\n### 3. 다양한 피자가게가 생긴다.\n```java\n PizzaStore nyStore = new PizzaStore(new NYPizzaFactory());\n nyStore.orderPizza(\"cheese\");\n \n PizzaStore chicagoStore = new PizzaStore(new ChicagoPizzafactory());\n chicagoStore.orderPizza(\"cheese\");\n```\n\n- 각 피자가게에서 `orderPizza()` 만 호출하면 피자를 생성할 수 있게 되었다.\n\n> 그러나, 각 팩토리를 가진 피자가게 체인점들이 서로의 구현방식이 달라지는 일이 발생할수도 있게 되었다. \n> (PizzaStore가 각각 있다보니 굽는 방식이 달라진다거나 피자를 자르는 단계를 빼먹거나 하는..)\n\n---\n\n## 🎟 팩토리 메소드 패턴\n\n> 피자가게와 피자 **제작 과정 전체를 하나로 묶어주는 프레임워크**를 만들어야 된다는 결론!!\n> 파자를 만드는 활동 자체는 전부 PizzaStore 클래스에 국한시키면서도 분점마다 고유의 스타일을 살릴 수 있는 방법은 ??\n\n\n### 4. 피자가게를 묶는 추상 클래스를 만든다. (프렌차이즈 본사랄까..)\n\n```java\npublic abstract class PizzaStore{ //추상 클래스로 구현\n\t\n    public Pizza orderPizza(String type){\n\n\t\tPizza pizza;\n\t\tpizza = createPizza(type);\n\t\tpizza.prepare();\n\t\tpizza.bake();\n\t\tpizza.cut();\n\t\tpizza.box();\n\n\t\treturn pizza;\n\t}\n\n\tabstract Pizza createPizza(String type); //Pizza 인스턴스를 만드는 일은 팩토리 역할을 하는 메소드에서 맡아 처리\n}\n```\n\n### 5. 각 피자가게에서 추상클래스(본사)를 상속받게 한다.\n\n이제 각 분점을 위한 지역별로 서브클래스를 만들어줘야 한다. 피자의 스타일은 각 서브클래스에서 결정.\n\n![image](https://user-images.githubusercontent.com/55419159/139077742-76ac1027-09c3-4e42-8046-82a2b4e0cb54.jpg)\n\n이제 `ChicagoPizzaStore`, `NYPizzaStore` 에는 구상 피자클래스를 분기해주는 각각의 `createPizza()` 메소드가 있다.\n\n```java\npublic class NYPizzaStore extends PizzaStore{\n\n\t@Override\n\tpublic Pizza createPizza(String type){\n\n\t\tPizza pizza = null;\n\t\tif(type.equals(\"cheese\")) pizza = new NYStyleCheesePizza();\n\t\tif(type.equals(\"peper\")) pizza = new NYStylePepperoniPizza();\n\t\tif(type.equals(\"clam\")) pizza = new NYStyleClamPizza();\n\t\tif(type.equals(\"veggie\")) pizza = new NYStyleVeggiePizza();\n\n\t\treturn pizza;\n\t}\n}\n\npublic class ChicagoPizzaStore extends PizzaStore{\n\n    @Override\n    public Pizza createPizza(String type){\n\n        Pizza pizza = null;\n        if(type.equals(\"cheese\")) pizza = new ChicagoStyleCheesePizza();\n        if(type.equals(\"peper\")) pizza = new ChicagoStylePepperoniPizza();\n        if(type.equals(\"clam\")) pizza = new ChicagoStyleClamPizza();\n        if(type.equals(\"veggie\")) pizza = new ChicagoStyleVeggiePizza();\n\n        return pizza;\n    }\n} \n```\n\n### 6. 피자 추상클래스를 만든다.(순수한 피자 그 자체)\n\n```java\npublic abstract class Pizza{\n\tString name;\n\tString dough;\n\tString sauce;\n\tArrayList<String> toppings = new ArrayList<>();\n\t\n\tpublic void prepare(){\n\t\tSystem.out.println(\"Preparing : \"+name);\n\t\tSystem.out.println(\"Tossing dough...\");\n\t\tSystem.out.println(\"Adding source\");\n\t\tSystem.out.println(\"Adding toppings\");\n\t\tfor (String topping : toppings) {\n\t\t\tSystem.out.println(\"\\ttopping : \"+topping);\n\t\t}\n\t}\n    \n\tpublic void bake(){ System.out.println(\"Bake for 25 minutes at 350\"); }\n\tpublic void cut(){ System.out.println(\"Cutting the pizza into diagonal slices\"); }\n\tpublic void box(){ System.out.println(\"Place pizza in official PizzaStore box\"); }\n\tpublic String getname(){ return this.name; }\n\n }\n```\n\n### 7. 다양한 피자를 만들어 피자 추상클래스를 상속한다.\n\n```java\npublic class NYStyleCheesePizza extends Pizza{\n\n\tpublic NYStyleCheesePizza() {\n\t\tthis.name = \"NY Style CheesePizza\";\n\t\tthis.dough = \"Thin Crust Dough\";\n\t\tthis.sauce = \"Marinara Sauce\";\n\t\tthis.toppings.add(\"Grated Reggiano Cheese\");\n\t}\n }\n\n public class ChicagoStyleCheesePizza extends Pizza{\n\n\tpublic ChicagoStyleCheesePizza() {\n\t\tthis.name = \"Chicago Style CheesePizza\";\n\t\tthis.dough = \"Extra Thick Crust Dough\";\n\t\tthis.sauce = \"Plum Tomato Sauce\";\n\t\tthis.toppings.add(\"Shredded mozzarella Cheese\");\n\t}\n\n\t@Override\n\tpublic void cut() { System.out.println(\"Cutting the pizza into square slices\"); } //바꾸고 싶은 메소드만 오버라이딩\n }\n```\n\n### 8. 피자를 주문한다.\n\n```java\n public class PizzaTestDrive {\n\n\tpublic static void main(String[] args) {\n\n\t\tPizzaStore nyStore = new NYPizzaStore();\n\t\tPizzaStore chicagoStore = new ChicagoPizzaStore();\n\n\t\tPizza nySytpePizza = nyStore.orderPizza(\"cheese\");\n\t\tSystem.out.println(nySytpePizza.getname());\n\n\t\tPizza chicagoStypePizza = chicagoStore.orderPizza(\"cheese\");\n\t\tSystem.out.println(chicagoStypePizza.getname());\n\t}\n } \n```\n\n- 모든 팩토리 패턴에서는 **객체 생성을 캡슐화** 한다.\n- 팩토리 메소드 패턴에서는 *서브 클래스에서 어떤 클래스를 만들지를 결정하게 함*으로써 객체 생성을 캡슐화 한다.\n\n\n- 생산자 클래스(피자가게)\n\n![image2](https://user-images.githubusercontent.com/55419159/139077751-6a262811-5faf-4937-b7f1-5fb3447d8b90.jpg)\n\n- 제품 클래스(피자)\n\n![image3](https://user-images.githubusercontent.com/55419159/139077752-b27d2d2f-57fb-4226-bab6-f890d0f70a74.jpg)\n\n\n위 클래스 다이어그램에서는 `PizzaStore` 추상 클래스에서 객체를 만들기 위한 메소드, \n즉 팩토리 메소드를 위한 인터페이스를 제공한다는 것을 알수있다. \n\n`PizzaStore`에 구현되어 있는 다른 메소드 `orderPizza()` 에서는 팩토리 메소드에 의해 생산된 제품을 가지고 필요한 작업을 처리한다. \n하지만 실제 팩토리 메소드를 구현하고 제품(객체 인스턴스)을 만들어 내는 일은 **서브클래스**에서만 할수 있다.\n\n\n---\n\n## 🎭 디자인원칙 : 의존성 뒤집기 원칙\n> 추상화된 것에 의존하도록 만들어라. 구상 클래스에 의존하도록 만들지 않도록 한다.\n\n~~구현클래스에 의존하는 형태~~\n```java\nPizzaStore -> NYStyleCheesePizza\nPizzaStore -> ChicagoStypeCheesePizza\nPizzaStore -> NYStyleVeggiePizza\n```\n~~-> 좋지않음~~\n\n추상클래스(인터페이스)를 의존하는 형태\n```java\nPizzaStore -> Pizza\nPizza <- NYStyleCheesePizza\nPizza <- ChicagoStyleCheesePizza\nPizza <- NYStyleVeggiePizza\n```\n -> **좋음**\n\n\n### 🛒 원칙에 도움이 되는 가이드\n\n_**1. 어떤 변수에도 구상 클래스에 대한 레퍼런스를 지정하지 않는다.**_\n- `new` 연산자를 사용하면 레퍼런스를 사용하게 되는 것이다.\n\n_**2. 구상 클래스에서 유도된 클래스를 만들지 않는다.**_\n- 구상클래스에서 유도된 클래스를 만들면 특정 구상 클래스에 의존하게된다, 추상화 된 것을 사용해야 한다.\n\n_**3. 베이스 클래스에 이미 구현되어 있던 메소드를 오버라이드 하지 않는다.**_\n- 이미 구현되어 있는 메소드를 오버라이드 한다는 것은 애초부터 베이스 클래스가 제대로 추상화 된것이 아니었다고 볼 수 있다. \n- 베이스 클래스에서 메소드를 정의할 때는 모든 서브 클래스에서 공유할 수 있는 것만 정의해야한다.\n\n\n---\n\n\n\n## 🦺 추상 팩토리 패턴\n\n이렇게 PizzaStore 디자인이 모양새를 갖췄다. 유연한 프레임워크도 만들어 졌고, 디자인 원칙도 충실하게 지켰다.\n\n각각 체인점들이 미리 정해놓은 절차를 잘 따르고 있지만 몇몇 체인점들이 자잘한 재료를 더 싼 재료로 바꿔서 원가를 절감해 마진을 남기고 있다. \n\n원재료의 품질까지 관리하는 방법이 있을까??\n\n- **원재료 군**을 만들어 파악하자. \n- 제품에 들어가는 재료군(반죽, 소스, 치즈, 야채, 고기)은 같지만, 지역마다 재료의 구체적인 내용이 조금씩 다르다.\n\n\n1. 지역별로 팩토리를 만들어 각 생성 메소드를 구현하는 `PizzaingredientFactory` 클래스를 만든다.\n2. `ReggianoCheese`, `RedPeppers`, `ThickCrustDough`와 같이 팩토리에서 사용할 원재료 클래스들을 구현한다.\n3. 만든 원재료 공장을 `PizzaStore` 코드에서 사용하도록 함으로써 하나로 묶어준다.\n\n\n### 9. 원재료 공장을 만든다.\n\n```java\n public interface PizzaIngredientFactory {\n\tpublic Dough createDough();\n\tpublic Sauce createSauce();\n\tpublic Cheese createCheese();\n\tpublic Veggies[] createVeggies();\n\tpublic Pepperoni createPepperoni();\n\tpublic Clams createClams();\n } \n```\n\n```java\npublic class NYPizzaingredientFactory implements PizzaIngredientFactory{\n\n\t@Override\n\tpublic Dough createDough() { return new ThinCrustdough(); }\n\t\n    @Override\n\tpublic Sauce createSauce() { return new MarinaraSauce(); }\n\t\n    @Override\n\tpublic Cheese createCheese() { return new ReggianoCheese(); }\n\t\n    @Override\n\tpublic Veggies[] createVeggies() {\n\t\tVeggies veggies[] = { new Farlic(), new Onion(), new Mushroom(), new RedPepper() };\n\t\treturn veggies;\n\t}\n\t\n    @Override\n\tpublic Pepperoni createPepperoni() { return new SlicedPepperoni(); }\n\t\n    @Override\n\tpublic Clams createClams() { return new Freshclams(); }\n }\n \n \npublic class ChicagoPizzaingredientFactory implements PizzaIngredientFactory{\n    \n    @Override\n    public Dough createDough() { return new ThickCrustDough(); }\n\n    @Override\n    public Sauce createSauce() { return new PlumTomatoSauce(); }\n\n    @Override\n    public Cheese createCheese() { return new MozzarellaCheese(); }\n\n    @Override\n    public Veggies[] createVeggies() {\n        Veggies veggies[] = { new BlackOlives(), new Spinach(), new EggPlant()};\n        return veggies;\n    }\n\n    @Override\n    public Pepperoni createPepperoni() { return new Slicedpepperoni(); }\n\n    @Override\n    public Clams createClams() { return new FrozenClam(); }\n}\n```\n\n### 10. 피자마다 재료는 다르다.\n\n```java\n public abstract class Pizza{\n\tString name;\n\tDough dough;\n\tSauce sauce;\n\tVeggies veggies[];\n\tCheese cheese;\n\tPepperoni pepperoni;\n\tClams clams;\n\t\n\tpublic abstract void prepare(); //추상 메소드로 변경됨.\n\tpublic void bake(){ System.out.println(\"Bake for 25 minutes at 350\"); }\n\tpublic void cut(){ System.out.println(\"Cutting the pizza into diagonal slices\"); }\n\tpublic void box(){ System.out.println(\"Place pizza in official PizzaStore box\"); }\n\tpublic String getname(){ return this.name; }\n } \n```\n\n```java\n public class CheesePizza extends Pizza{\n\n\tPizzaIngredientFactory ingredientFactory;\n\n\tpublic CheesePizza(PizzaIngredientFactory ingredientFactory) {\n\t\tthis.ingredientFactory = ingredientFactory;\n\t}\n\n\t@Override\n\tpublic void prepare() {\n\t\tthis.dough = ingredientFactory.createDough();\n\t\tthis.sauce = ingredientFactory.createSauce();\n\t\tthis.cheese = ingredientFactory.createCheese();\n\t}\n }\n\n \n public class ClamPizza extends Pizza{\n\n    PizzaIngredientFactory ingredientFactory;\n\n    public ClamPizza(PizzaIngredientFactory ingredientFactory) {\n        this.ingredientFactory = ingredientFactory;\n    }\n\n    @Override\n    public void prepare() {\n        this.dough = ingredientFactory.createDough();\n        this.sauce = ingredientFactory.createSauce();\n        this.cheese = ingredientFactory.createCheese();\n        this.clams = ingredientFactory.createClams();\n    }\n}\n```\n\n\n### 11. 피자마다, 지역마다 다른 피자를 만든다.\n\n```java\n public class NYPizzaStore extends PizzaStore{\n\n\t@Override\n\tpublic Pizza createPizza(String type){\n\n\t\tPizza pizza = null;\n\t\tPizzaIngredientFactory ingredientFactory = new NYPizzaingredientFactory();\n\n\t\tif(type.equals(\"cheese\")){\n\t\t\tpizza = new CheesePizza(ingredientFactory);\n\t\t\tpizza.setName(ingredientFactory.NY_STYLE+\" Cheese Pizza\");\n\t\t\n        }else if(type.equals(\"peper\")){\n\t\t\tpizza = new PepperoniPizza(ingredientFactory);\n\t\t\tpizza.setName(ingredientFactory.NY_STYLE+\" Pepperoni Pizza\");\n\t\t\n        }else if(type.equals(\"clam\")){\n\t\t\tpizza = new ClamPizza(ingredientFactory);\n\t\t\tpizza.setName(ingredientFactory.NY_STYLE+\" Clam Pizza\");\n\t\t\n        }else if(type.equals(\"veggie\")){\n\t\t\tpizza = new VeggiePizza(ingredientFactory);\n\t\t\tpizza.setName(ingredientFactory.NY_STYLE+\" Veggie Pizza\");\n\t\t}\n\n\t\treturn pizza;\n\t}\n } \n```\n\n\n### ⛳ 프로세스 정리\n![image4](https://user-images.githubusercontent.com/55419159/139077755-c920f73b-e347-41d4-b1a8-9f0bc5e028fa.jpg)\n\n이제 전체적인 흐름은.\n\n1. 뉴욕 피자가게를 만든다.\n```java\nPizzaStore nyPizzaStore = new NYPizzaStore();\n```\n\n2. 주문을 한다.\n```java\nnyPizzaStore.orderPizza(\"cheese\");\n```\n\n3. orderPizza 메소드에서는 우선 createPizza() 메소드를 호출한다\n```java\nPizza pizza = createPizza(\"cheese\");\n```\n\n4. createPizza() 메소드가 호출되면 원재료 공장이 돌아가기 시작한다.\n```java\nPizza pizza = new CheesePizza(nyIngredientFactory);\n```\n\n5. 피자를 준비하는 prepare()메소드가 호출되면 팩토리에 원재료 주문이 들어간다.\n```java\nvoid prepare(){\n        dough = nyIngredientFactory.createDough();\n        sauce = nyIngredientFactory.createSauce();\n        cheese = nyIngredientFactory.createCheese();\n        }\n```\n\n6. 준비단계가 끝나고 orderPizza() 메소드에서는 피자를 굽고, 자르고, 포장한다.\n\n---\n\n## 💎 요약\n\n### 추상 팩토리 패턴\n\n> 제품군을 생성하기 위한 **인터페이스**를 생성하고, 그 **인터페이스를 구성**하여 사용할수 있게끔 하는것.\n\n### 추상 메소드 패턴\n\n> 하나의 추상클래스에서 **추상 메소드**를 만들고, 서브클래스들이 **그 추상메소드를 구현**하여 인스턴스를 만들게끔 하는것.","source":"_posts/디자인-패턴/2021-10-20-팩토리-패턴/2021-10-20-팩토리-패턴.md","raw":"---\ntitle: \"팩토리 패턴\"\ncategories:\n  - 디자인패턴 \ntags:\n  - 디자인패턴\n  - 팩토리\ntoc: true\ntoc_sticky: true\ntoc_label: \"팩토리 패턴\"\ntoc_icon: \"sticky-note\"\n---\n\n\n## ⛳ 들어가기 전에..\n\n회사에서 같은 프로세스 내에서 각각의 제휴사에 서비스를 인터페이스해야 하는 경우가 있었다.\n\n전체적인 프로세스 플로우를 인터페이스로, 제휴사를 클래스(Bean)로 만들어 팩토리 패턴으로 구현하였다. \n\n동일한 프로세스 플로우 내에서 각기 다른 제휴사의 API와 연동해야 했는데 팩토리 패턴이 많은 도움이 되었다.\n\n---\n\n## 👋 팩토리패턴이란\n\n### ⚾ 팩토리 메소드 패턴\n> 객체를 생성하기 위한 인터페이스를 정의하는데, \n> 어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정하게 만든다. \n> 즉, 팩토리 메소드 패턴을 이용하면 **클래스의 인스턴스를 만드는 일을 서브클래스에게 맡기는 것**.\n\n### 🥎 추상 팩토리 패턴\n> **인터페이스를 이용**하여 서로 연관된, \n> 또는 의존하는 객체를 구상 클래스를 지정하지 않고도 생성한다.\n\n---\n\n## 🎩 팩토리패턴이 필요한 이유\n\n`new`를 사용하는 것은 구상 클래스의 인스턴스를 만드는 것이다.\n당연히! 인터페이스가 아닌 _특정 구현을 사용하게 되어버리는 것_.\n일련의 구상 클래스들이 있을때는 어쩔수 없이 다음과 같은 코드를 만들어야 하는 경우가 있다.\n\n\n```java\nDuck duck;\n\nif ( type == picnic ) duck = new MallardDuck();\nelse if ( type == hunting ) duck = new DecoyDuck();\nelse if ( type == inBathTub) duck = new RubberDuck();\n```\n\n이런 코드가 있다는 것은, 뭔가 변경하거나 확장해야 할 때 *코드를 다시 확인하고 추가 또는 제거해야 한다는 것*을 의미한다.\n**인터페이스**에 맞춰서 코딩을 하면 시스템에서 일어날 수 있는 여러 변화를 이겨낼 수 있다.\n**다형성** 덕분에 어떤 클래스든 특정 인터페이스만 구현하면 사용할수 있기 때문이다.\n\n반대로. 구상 클래스를 많이 사용하면 새로운 구상 클래스가 추가될 때마다 코드를 고쳐야 하기때문에 많은 문제가 생길수 있다.\n즉, *변화에 대해 닫혀 있는 코드*가 되어버리는 것이다.\n\n> 바뀔 수 있는 부분을 찾아내서 바뀌지 않는 부분하고 분리시켜야 한다는 원칙.\n\n---\n\n## 🎢 고전적인 팩토리 패턴\n\n- **피자 가게**를 운영하고 있고 **피자가게 클래스**를 만들어야 된다고 가정한다.\n> 피자가게는 다양한 피자가 있을 수 있다.\n> 또한 다양한 피자가게가 있을 수 있다.\n\n### 🎞 기존소스\n\n```java\nPizza orderPizza(String type) {\n\n       Pizza pizza;\n\n       //추가하거나 제거 시 매번 바뀌어야 하는부분\n       if(type.equals(\"cheese\")) pizza = new CheesePizza();\n       else if(type.equals(\"greek\")) pizza = new GreekPizza();\n       else if(type.equals(\"pepperoni\")) pizza = new PepperoniPizza();\n       //\n\n       pizza.prepare();\n       pizza.bake();\n       pizza.cut();\n       pizza.box();\n       return pizza;\n}\n```\n\n### 1. 피자 팩토리를 만든다.\n```java\n public class SimplePizzaFactory {\t\n\n\tpublic Pizza createPizza(String type){ //이런 경우에는 static메소드로 선언하는 경우가 종종 있음.\n\n\t\tPizza pizza = null;\n\n\t\tif(pizza.equals(\"cheese\")) pizza = new CheesePizza();\n\t\tif(pizza.equals(\"pepper\")) pizza = new PepperoniPizza();\n\t\tif(pizza.equals(\"clam\")) pizza = new ClamPizza();\n\t\tif(pizza.equals(\"veggie\")) pizza = new VeggiePizza();\n\t\t\n        return pizza;\n\t}\n }\n```\n\n### 2. 피자 가게를 만든다.\n```java\n\npublic class PizzaStore{\n\n\tSimplePizzaFactory simplePizzaFactory;\n\n\tpublic PizzaStore(SimplePizzaFactory simplePizzaFactory) {\n\t\tthis.simplePizzaFactory = simplePizzaFactory;  //피자 가게를 동적으로 설정\n\t}\n\n\tpublic Pizza orderPizza(String type){\n\n\t\tPizza pizza;\n\t\tpizza = simplePizzaFactory.createPizza(type); //수정 안해도 됨\n\t\tpizza.prepare();\n\t\tpizza.bake();\n\t\tpizza.cut();\n\t\tpizza.box();\n\n\t\treturn pizza;\n\n\t}\n}\n```\n\n### 3. 다양한 피자가게가 생긴다.\n```java\n PizzaStore nyStore = new PizzaStore(new NYPizzaFactory());\n nyStore.orderPizza(\"cheese\");\n \n PizzaStore chicagoStore = new PizzaStore(new ChicagoPizzafactory());\n chicagoStore.orderPizza(\"cheese\");\n```\n\n- 각 피자가게에서 `orderPizza()` 만 호출하면 피자를 생성할 수 있게 되었다.\n\n> 그러나, 각 팩토리를 가진 피자가게 체인점들이 서로의 구현방식이 달라지는 일이 발생할수도 있게 되었다. \n> (PizzaStore가 각각 있다보니 굽는 방식이 달라진다거나 피자를 자르는 단계를 빼먹거나 하는..)\n\n---\n\n## 🎟 팩토리 메소드 패턴\n\n> 피자가게와 피자 **제작 과정 전체를 하나로 묶어주는 프레임워크**를 만들어야 된다는 결론!!\n> 파자를 만드는 활동 자체는 전부 PizzaStore 클래스에 국한시키면서도 분점마다 고유의 스타일을 살릴 수 있는 방법은 ??\n\n\n### 4. 피자가게를 묶는 추상 클래스를 만든다. (프렌차이즈 본사랄까..)\n\n```java\npublic abstract class PizzaStore{ //추상 클래스로 구현\n\t\n    public Pizza orderPizza(String type){\n\n\t\tPizza pizza;\n\t\tpizza = createPizza(type);\n\t\tpizza.prepare();\n\t\tpizza.bake();\n\t\tpizza.cut();\n\t\tpizza.box();\n\n\t\treturn pizza;\n\t}\n\n\tabstract Pizza createPizza(String type); //Pizza 인스턴스를 만드는 일은 팩토리 역할을 하는 메소드에서 맡아 처리\n}\n```\n\n### 5. 각 피자가게에서 추상클래스(본사)를 상속받게 한다.\n\n이제 각 분점을 위한 지역별로 서브클래스를 만들어줘야 한다. 피자의 스타일은 각 서브클래스에서 결정.\n\n![image](https://user-images.githubusercontent.com/55419159/139077742-76ac1027-09c3-4e42-8046-82a2b4e0cb54.jpg)\n\n이제 `ChicagoPizzaStore`, `NYPizzaStore` 에는 구상 피자클래스를 분기해주는 각각의 `createPizza()` 메소드가 있다.\n\n```java\npublic class NYPizzaStore extends PizzaStore{\n\n\t@Override\n\tpublic Pizza createPizza(String type){\n\n\t\tPizza pizza = null;\n\t\tif(type.equals(\"cheese\")) pizza = new NYStyleCheesePizza();\n\t\tif(type.equals(\"peper\")) pizza = new NYStylePepperoniPizza();\n\t\tif(type.equals(\"clam\")) pizza = new NYStyleClamPizza();\n\t\tif(type.equals(\"veggie\")) pizza = new NYStyleVeggiePizza();\n\n\t\treturn pizza;\n\t}\n}\n\npublic class ChicagoPizzaStore extends PizzaStore{\n\n    @Override\n    public Pizza createPizza(String type){\n\n        Pizza pizza = null;\n        if(type.equals(\"cheese\")) pizza = new ChicagoStyleCheesePizza();\n        if(type.equals(\"peper\")) pizza = new ChicagoStylePepperoniPizza();\n        if(type.equals(\"clam\")) pizza = new ChicagoStyleClamPizza();\n        if(type.equals(\"veggie\")) pizza = new ChicagoStyleVeggiePizza();\n\n        return pizza;\n    }\n} \n```\n\n### 6. 피자 추상클래스를 만든다.(순수한 피자 그 자체)\n\n```java\npublic abstract class Pizza{\n\tString name;\n\tString dough;\n\tString sauce;\n\tArrayList<String> toppings = new ArrayList<>();\n\t\n\tpublic void prepare(){\n\t\tSystem.out.println(\"Preparing : \"+name);\n\t\tSystem.out.println(\"Tossing dough...\");\n\t\tSystem.out.println(\"Adding source\");\n\t\tSystem.out.println(\"Adding toppings\");\n\t\tfor (String topping : toppings) {\n\t\t\tSystem.out.println(\"\\ttopping : \"+topping);\n\t\t}\n\t}\n    \n\tpublic void bake(){ System.out.println(\"Bake for 25 minutes at 350\"); }\n\tpublic void cut(){ System.out.println(\"Cutting the pizza into diagonal slices\"); }\n\tpublic void box(){ System.out.println(\"Place pizza in official PizzaStore box\"); }\n\tpublic String getname(){ return this.name; }\n\n }\n```\n\n### 7. 다양한 피자를 만들어 피자 추상클래스를 상속한다.\n\n```java\npublic class NYStyleCheesePizza extends Pizza{\n\n\tpublic NYStyleCheesePizza() {\n\t\tthis.name = \"NY Style CheesePizza\";\n\t\tthis.dough = \"Thin Crust Dough\";\n\t\tthis.sauce = \"Marinara Sauce\";\n\t\tthis.toppings.add(\"Grated Reggiano Cheese\");\n\t}\n }\n\n public class ChicagoStyleCheesePizza extends Pizza{\n\n\tpublic ChicagoStyleCheesePizza() {\n\t\tthis.name = \"Chicago Style CheesePizza\";\n\t\tthis.dough = \"Extra Thick Crust Dough\";\n\t\tthis.sauce = \"Plum Tomato Sauce\";\n\t\tthis.toppings.add(\"Shredded mozzarella Cheese\");\n\t}\n\n\t@Override\n\tpublic void cut() { System.out.println(\"Cutting the pizza into square slices\"); } //바꾸고 싶은 메소드만 오버라이딩\n }\n```\n\n### 8. 피자를 주문한다.\n\n```java\n public class PizzaTestDrive {\n\n\tpublic static void main(String[] args) {\n\n\t\tPizzaStore nyStore = new NYPizzaStore();\n\t\tPizzaStore chicagoStore = new ChicagoPizzaStore();\n\n\t\tPizza nySytpePizza = nyStore.orderPizza(\"cheese\");\n\t\tSystem.out.println(nySytpePizza.getname());\n\n\t\tPizza chicagoStypePizza = chicagoStore.orderPizza(\"cheese\");\n\t\tSystem.out.println(chicagoStypePizza.getname());\n\t}\n } \n```\n\n- 모든 팩토리 패턴에서는 **객체 생성을 캡슐화** 한다.\n- 팩토리 메소드 패턴에서는 *서브 클래스에서 어떤 클래스를 만들지를 결정하게 함*으로써 객체 생성을 캡슐화 한다.\n\n\n- 생산자 클래스(피자가게)\n\n![image2](https://user-images.githubusercontent.com/55419159/139077751-6a262811-5faf-4937-b7f1-5fb3447d8b90.jpg)\n\n- 제품 클래스(피자)\n\n![image3](https://user-images.githubusercontent.com/55419159/139077752-b27d2d2f-57fb-4226-bab6-f890d0f70a74.jpg)\n\n\n위 클래스 다이어그램에서는 `PizzaStore` 추상 클래스에서 객체를 만들기 위한 메소드, \n즉 팩토리 메소드를 위한 인터페이스를 제공한다는 것을 알수있다. \n\n`PizzaStore`에 구현되어 있는 다른 메소드 `orderPizza()` 에서는 팩토리 메소드에 의해 생산된 제품을 가지고 필요한 작업을 처리한다. \n하지만 실제 팩토리 메소드를 구현하고 제품(객체 인스턴스)을 만들어 내는 일은 **서브클래스**에서만 할수 있다.\n\n\n---\n\n## 🎭 디자인원칙 : 의존성 뒤집기 원칙\n> 추상화된 것에 의존하도록 만들어라. 구상 클래스에 의존하도록 만들지 않도록 한다.\n\n~~구현클래스에 의존하는 형태~~\n```java\nPizzaStore -> NYStyleCheesePizza\nPizzaStore -> ChicagoStypeCheesePizza\nPizzaStore -> NYStyleVeggiePizza\n```\n~~-> 좋지않음~~\n\n추상클래스(인터페이스)를 의존하는 형태\n```java\nPizzaStore -> Pizza\nPizza <- NYStyleCheesePizza\nPizza <- ChicagoStyleCheesePizza\nPizza <- NYStyleVeggiePizza\n```\n -> **좋음**\n\n\n### 🛒 원칙에 도움이 되는 가이드\n\n_**1. 어떤 변수에도 구상 클래스에 대한 레퍼런스를 지정하지 않는다.**_\n- `new` 연산자를 사용하면 레퍼런스를 사용하게 되는 것이다.\n\n_**2. 구상 클래스에서 유도된 클래스를 만들지 않는다.**_\n- 구상클래스에서 유도된 클래스를 만들면 특정 구상 클래스에 의존하게된다, 추상화 된 것을 사용해야 한다.\n\n_**3. 베이스 클래스에 이미 구현되어 있던 메소드를 오버라이드 하지 않는다.**_\n- 이미 구현되어 있는 메소드를 오버라이드 한다는 것은 애초부터 베이스 클래스가 제대로 추상화 된것이 아니었다고 볼 수 있다. \n- 베이스 클래스에서 메소드를 정의할 때는 모든 서브 클래스에서 공유할 수 있는 것만 정의해야한다.\n\n\n---\n\n\n\n## 🦺 추상 팩토리 패턴\n\n이렇게 PizzaStore 디자인이 모양새를 갖췄다. 유연한 프레임워크도 만들어 졌고, 디자인 원칙도 충실하게 지켰다.\n\n각각 체인점들이 미리 정해놓은 절차를 잘 따르고 있지만 몇몇 체인점들이 자잘한 재료를 더 싼 재료로 바꿔서 원가를 절감해 마진을 남기고 있다. \n\n원재료의 품질까지 관리하는 방법이 있을까??\n\n- **원재료 군**을 만들어 파악하자. \n- 제품에 들어가는 재료군(반죽, 소스, 치즈, 야채, 고기)은 같지만, 지역마다 재료의 구체적인 내용이 조금씩 다르다.\n\n\n1. 지역별로 팩토리를 만들어 각 생성 메소드를 구현하는 `PizzaingredientFactory` 클래스를 만든다.\n2. `ReggianoCheese`, `RedPeppers`, `ThickCrustDough`와 같이 팩토리에서 사용할 원재료 클래스들을 구현한다.\n3. 만든 원재료 공장을 `PizzaStore` 코드에서 사용하도록 함으로써 하나로 묶어준다.\n\n\n### 9. 원재료 공장을 만든다.\n\n```java\n public interface PizzaIngredientFactory {\n\tpublic Dough createDough();\n\tpublic Sauce createSauce();\n\tpublic Cheese createCheese();\n\tpublic Veggies[] createVeggies();\n\tpublic Pepperoni createPepperoni();\n\tpublic Clams createClams();\n } \n```\n\n```java\npublic class NYPizzaingredientFactory implements PizzaIngredientFactory{\n\n\t@Override\n\tpublic Dough createDough() { return new ThinCrustdough(); }\n\t\n    @Override\n\tpublic Sauce createSauce() { return new MarinaraSauce(); }\n\t\n    @Override\n\tpublic Cheese createCheese() { return new ReggianoCheese(); }\n\t\n    @Override\n\tpublic Veggies[] createVeggies() {\n\t\tVeggies veggies[] = { new Farlic(), new Onion(), new Mushroom(), new RedPepper() };\n\t\treturn veggies;\n\t}\n\t\n    @Override\n\tpublic Pepperoni createPepperoni() { return new SlicedPepperoni(); }\n\t\n    @Override\n\tpublic Clams createClams() { return new Freshclams(); }\n }\n \n \npublic class ChicagoPizzaingredientFactory implements PizzaIngredientFactory{\n    \n    @Override\n    public Dough createDough() { return new ThickCrustDough(); }\n\n    @Override\n    public Sauce createSauce() { return new PlumTomatoSauce(); }\n\n    @Override\n    public Cheese createCheese() { return new MozzarellaCheese(); }\n\n    @Override\n    public Veggies[] createVeggies() {\n        Veggies veggies[] = { new BlackOlives(), new Spinach(), new EggPlant()};\n        return veggies;\n    }\n\n    @Override\n    public Pepperoni createPepperoni() { return new Slicedpepperoni(); }\n\n    @Override\n    public Clams createClams() { return new FrozenClam(); }\n}\n```\n\n### 10. 피자마다 재료는 다르다.\n\n```java\n public abstract class Pizza{\n\tString name;\n\tDough dough;\n\tSauce sauce;\n\tVeggies veggies[];\n\tCheese cheese;\n\tPepperoni pepperoni;\n\tClams clams;\n\t\n\tpublic abstract void prepare(); //추상 메소드로 변경됨.\n\tpublic void bake(){ System.out.println(\"Bake for 25 minutes at 350\"); }\n\tpublic void cut(){ System.out.println(\"Cutting the pizza into diagonal slices\"); }\n\tpublic void box(){ System.out.println(\"Place pizza in official PizzaStore box\"); }\n\tpublic String getname(){ return this.name; }\n } \n```\n\n```java\n public class CheesePizza extends Pizza{\n\n\tPizzaIngredientFactory ingredientFactory;\n\n\tpublic CheesePizza(PizzaIngredientFactory ingredientFactory) {\n\t\tthis.ingredientFactory = ingredientFactory;\n\t}\n\n\t@Override\n\tpublic void prepare() {\n\t\tthis.dough = ingredientFactory.createDough();\n\t\tthis.sauce = ingredientFactory.createSauce();\n\t\tthis.cheese = ingredientFactory.createCheese();\n\t}\n }\n\n \n public class ClamPizza extends Pizza{\n\n    PizzaIngredientFactory ingredientFactory;\n\n    public ClamPizza(PizzaIngredientFactory ingredientFactory) {\n        this.ingredientFactory = ingredientFactory;\n    }\n\n    @Override\n    public void prepare() {\n        this.dough = ingredientFactory.createDough();\n        this.sauce = ingredientFactory.createSauce();\n        this.cheese = ingredientFactory.createCheese();\n        this.clams = ingredientFactory.createClams();\n    }\n}\n```\n\n\n### 11. 피자마다, 지역마다 다른 피자를 만든다.\n\n```java\n public class NYPizzaStore extends PizzaStore{\n\n\t@Override\n\tpublic Pizza createPizza(String type){\n\n\t\tPizza pizza = null;\n\t\tPizzaIngredientFactory ingredientFactory = new NYPizzaingredientFactory();\n\n\t\tif(type.equals(\"cheese\")){\n\t\t\tpizza = new CheesePizza(ingredientFactory);\n\t\t\tpizza.setName(ingredientFactory.NY_STYLE+\" Cheese Pizza\");\n\t\t\n        }else if(type.equals(\"peper\")){\n\t\t\tpizza = new PepperoniPizza(ingredientFactory);\n\t\t\tpizza.setName(ingredientFactory.NY_STYLE+\" Pepperoni Pizza\");\n\t\t\n        }else if(type.equals(\"clam\")){\n\t\t\tpizza = new ClamPizza(ingredientFactory);\n\t\t\tpizza.setName(ingredientFactory.NY_STYLE+\" Clam Pizza\");\n\t\t\n        }else if(type.equals(\"veggie\")){\n\t\t\tpizza = new VeggiePizza(ingredientFactory);\n\t\t\tpizza.setName(ingredientFactory.NY_STYLE+\" Veggie Pizza\");\n\t\t}\n\n\t\treturn pizza;\n\t}\n } \n```\n\n\n### ⛳ 프로세스 정리\n![image4](https://user-images.githubusercontent.com/55419159/139077755-c920f73b-e347-41d4-b1a8-9f0bc5e028fa.jpg)\n\n이제 전체적인 흐름은.\n\n1. 뉴욕 피자가게를 만든다.\n```java\nPizzaStore nyPizzaStore = new NYPizzaStore();\n```\n\n2. 주문을 한다.\n```java\nnyPizzaStore.orderPizza(\"cheese\");\n```\n\n3. orderPizza 메소드에서는 우선 createPizza() 메소드를 호출한다\n```java\nPizza pizza = createPizza(\"cheese\");\n```\n\n4. createPizza() 메소드가 호출되면 원재료 공장이 돌아가기 시작한다.\n```java\nPizza pizza = new CheesePizza(nyIngredientFactory);\n```\n\n5. 피자를 준비하는 prepare()메소드가 호출되면 팩토리에 원재료 주문이 들어간다.\n```java\nvoid prepare(){\n        dough = nyIngredientFactory.createDough();\n        sauce = nyIngredientFactory.createSauce();\n        cheese = nyIngredientFactory.createCheese();\n        }\n```\n\n6. 준비단계가 끝나고 orderPizza() 메소드에서는 피자를 굽고, 자르고, 포장한다.\n\n---\n\n## 💎 요약\n\n### 추상 팩토리 패턴\n\n> 제품군을 생성하기 위한 **인터페이스**를 생성하고, 그 **인터페이스를 구성**하여 사용할수 있게끔 하는것.\n\n### 추상 메소드 패턴\n\n> 하나의 추상클래스에서 **추상 메소드**를 만들고, 서브클래스들이 **그 추상메소드를 구현**하여 인스턴스를 만들게끔 하는것.","slug":"디자인-패턴/2021-10-20-팩토리-패턴/2021-10-20-팩토리-패턴","published":1,"date":"2021-10-28T11:13:20.382Z","updated":"2021-10-28T11:13:20.382Z","_id":"ckvelzqh6000ygcau39uk0m4i","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"⛳-들어가기-전에\"><a href=\"#⛳-들어가기-전에\" class=\"headerlink\" title=\"⛳ 들어가기 전에..\"></a>⛳ 들어가기 전에..</h2><p>회사에서 같은 프로세스 내에서 각각의 제휴사에 서비스를 인터페이스해야 하는 경우가 있었다.</p>\n<p>전체적인 프로세스 플로우를 인터페이스로, 제휴사를 클래스(Bean)로 만들어 팩토리 패턴으로 구현하였다. </p>\n<p>동일한 프로세스 플로우 내에서 각기 다른 제휴사의 API와 연동해야 했는데 팩토리 패턴이 많은 도움이 되었다.</p>\n<hr>\n<h2 id=\"👋-팩토리패턴이란\"><a href=\"#👋-팩토리패턴이란\" class=\"headerlink\" title=\"👋 팩토리패턴이란\"></a>👋 팩토리패턴이란</h2><h3 id=\"⚾-팩토리-메소드-패턴\"><a href=\"#⚾-팩토리-메소드-패턴\" class=\"headerlink\" title=\"⚾ 팩토리 메소드 패턴\"></a>⚾ 팩토리 메소드 패턴</h3><blockquote>\n<p>객체를 생성하기 위한 인터페이스를 정의하는데,<br>어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정하게 만든다.<br>즉, 팩토리 메소드 패턴을 이용하면 <strong>클래스의 인스턴스를 만드는 일을 서브클래스에게 맡기는 것</strong>.</p>\n</blockquote>\n<h3 id=\"🥎-추상-팩토리-패턴\"><a href=\"#🥎-추상-팩토리-패턴\" class=\"headerlink\" title=\"🥎 추상 팩토리 패턴\"></a>🥎 추상 팩토리 패턴</h3><blockquote>\n<p><strong>인터페이스를 이용</strong>하여 서로 연관된,<br>또는 의존하는 객체를 구상 클래스를 지정하지 않고도 생성한다.</p>\n</blockquote>\n<hr>\n<h2 id=\"🎩-팩토리패턴이-필요한-이유\"><a href=\"#🎩-팩토리패턴이-필요한-이유\" class=\"headerlink\" title=\"🎩 팩토리패턴이 필요한 이유\"></a>🎩 팩토리패턴이 필요한 이유</h2><p><code>new</code>를 사용하는 것은 구상 클래스의 인스턴스를 만드는 것이다.<br>당연히! 인터페이스가 아닌 <em>특정 구현을 사용하게 되어버리는 것</em>.<br>일련의 구상 클래스들이 있을때는 어쩔수 없이 다음과 같은 코드를 만들어야 하는 경우가 있다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Duck duck;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( type == picnic ) duck = <span class=\"keyword\">new</span> MallardDuck();</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( type == hunting ) duck = <span class=\"keyword\">new</span> DecoyDuck();</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( type == inBathTub) duck = <span class=\"keyword\">new</span> RubberDuck();</span><br></pre></td></tr></table></figure>\n\n<p>이런 코드가 있다는 것은, 뭔가 변경하거나 확장해야 할 때 <em>코드를 다시 확인하고 추가 또는 제거해야 한다는 것</em>을 의미한다.<br><strong>인터페이스</strong>에 맞춰서 코딩을 하면 시스템에서 일어날 수 있는 여러 변화를 이겨낼 수 있다.<br><strong>다형성</strong> 덕분에 어떤 클래스든 특정 인터페이스만 구현하면 사용할수 있기 때문이다.</p>\n<p>반대로. 구상 클래스를 많이 사용하면 새로운 구상 클래스가 추가될 때마다 코드를 고쳐야 하기때문에 많은 문제가 생길수 있다.<br>즉, <em>변화에 대해 닫혀 있는 코드</em>가 되어버리는 것이다.</p>\n<blockquote>\n<p>바뀔 수 있는 부분을 찾아내서 바뀌지 않는 부분하고 분리시켜야 한다는 원칙.</p>\n</blockquote>\n<hr>\n<h2 id=\"🎢-고전적인-팩토리-패턴\"><a href=\"#🎢-고전적인-팩토리-패턴\" class=\"headerlink\" title=\"🎢 고전적인 팩토리 패턴\"></a>🎢 고전적인 팩토리 패턴</h2><ul>\n<li><strong>피자 가게</strong>를 운영하고 있고 <strong>피자가게 클래스</strong>를 만들어야 된다고 가정한다.<blockquote>\n<p>피자가게는 다양한 피자가 있을 수 있다.<br>또한 다양한 피자가게가 있을 수 있다.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"🎞-기존소스\"><a href=\"#🎞-기존소스\" class=\"headerlink\" title=\"🎞 기존소스\"></a>🎞 기존소스</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Pizza <span class=\"title\">orderPizza</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       Pizza pizza;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//추가하거나 제거 시 매번 바뀌어야 하는부분</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;cheese&quot;</span>)) pizza = <span class=\"keyword\">new</span> CheesePizza();</span><br><span class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;greek&quot;</span>)) pizza = <span class=\"keyword\">new</span> GreekPizza();</span><br><span class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;pepperoni&quot;</span>)) pizza = <span class=\"keyword\">new</span> PepperoniPizza();</span><br><span class=\"line\">       <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">       pizza.prepare();</span><br><span class=\"line\">       pizza.bake();</span><br><span class=\"line\">       pizza.cut();</span><br><span class=\"line\">       pizza.box();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-피자-팩토리를-만든다\"><a href=\"#1-피자-팩토리를-만든다\" class=\"headerlink\" title=\"1. 피자 팩토리를 만든다.\"></a>1. 피자 팩토리를 만든다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimplePizzaFactory</span> </span>&#123;\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String type)</span></span>&#123; <span class=\"comment\">//이런 경우에는 static메소드로 선언하는 경우가 종종 있음.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tPizza pizza = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pizza.equals(<span class=\"string\">&quot;cheese&quot;</span>)) pizza = <span class=\"keyword\">new</span> CheesePizza();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pizza.equals(<span class=\"string\">&quot;pepper&quot;</span>)) pizza = <span class=\"keyword\">new</span> PepperoniPizza();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pizza.equals(<span class=\"string\">&quot;clam&quot;</span>)) pizza = <span class=\"keyword\">new</span> ClamPizza();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pizza.equals(<span class=\"string\">&quot;veggie&quot;</span>)) pizza = <span class=\"keyword\">new</span> VeggiePizza();</span><br><span class=\"line\">\t</span><br><span class=\"line\">       <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-피자-가게를-만든다\"><a href=\"#2-피자-가게를-만든다\" class=\"headerlink\" title=\"2. 피자 가게를 만든다.\"></a>2. 피자 가게를 만든다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSimplePizzaFactory simplePizzaFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PizzaStore</span><span class=\"params\">(SimplePizzaFactory simplePizzaFactory)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.simplePizzaFactory = simplePizzaFactory;  <span class=\"comment\">//피자 가게를 동적으로 설정</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">orderPizza</span><span class=\"params\">(String type)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPizza pizza;</span><br><span class=\"line\">\t\tpizza = simplePizzaFactory.createPizza(type); <span class=\"comment\">//수정 안해도 됨</span></span><br><span class=\"line\">\t\tpizza.prepare();</span><br><span class=\"line\">\t\tpizza.bake();</span><br><span class=\"line\">\t\tpizza.cut();</span><br><span class=\"line\">\t\tpizza.box();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-다양한-피자가게가-생긴다\"><a href=\"#3-다양한-피자가게가-생긴다\" class=\"headerlink\" title=\"3. 다양한 피자가게가 생긴다.\"></a>3. 다양한 피자가게가 생긴다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PizzaStore nyStore = <span class=\"keyword\">new</span> PizzaStore(<span class=\"keyword\">new</span> NYPizzaFactory());</span><br><span class=\"line\">nyStore.orderPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">PizzaStore chicagoStore = <span class=\"keyword\">new</span> PizzaStore(<span class=\"keyword\">new</span> ChicagoPizzafactory());</span><br><span class=\"line\">chicagoStore.orderPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>각 피자가게에서 <code>orderPizza()</code> 만 호출하면 피자를 생성할 수 있게 되었다.</li>\n</ul>\n<blockquote>\n<p>그러나, 각 팩토리를 가진 피자가게 체인점들이 서로의 구현방식이 달라지는 일이 발생할수도 있게 되었다.<br>(PizzaStore가 각각 있다보니 굽는 방식이 달라진다거나 피자를 자르는 단계를 빼먹거나 하는..)</p>\n</blockquote>\n<hr>\n<h2 id=\"🎟-팩토리-메소드-패턴\"><a href=\"#🎟-팩토리-메소드-패턴\" class=\"headerlink\" title=\"🎟 팩토리 메소드 패턴\"></a>🎟 팩토리 메소드 패턴</h2><blockquote>\n<p>피자가게와 피자 <strong>제작 과정 전체를 하나로 묶어주는 프레임워크</strong>를 만들어야 된다는 결론!!<br>파자를 만드는 활동 자체는 전부 PizzaStore 클래스에 국한시키면서도 분점마다 고유의 스타일을 살릴 수 있는 방법은 ??</p>\n</blockquote>\n<h3 id=\"4-피자가게를-묶는-추상-클래스를-만든다-프렌차이즈-본사랄까\"><a href=\"#4-피자가게를-묶는-추상-클래스를-만든다-프렌차이즈-본사랄까\" class=\"headerlink\" title=\"4. 피자가게를 묶는 추상 클래스를 만든다. (프렌차이즈 본사랄까..)\"></a>4. 피자가게를 묶는 추상 클래스를 만든다. (프렌차이즈 본사랄까..)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span>&#123; <span class=\"comment\">//추상 클래스로 구현</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">orderPizza</span><span class=\"params\">(String type)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPizza pizza;</span><br><span class=\"line\">\t\tpizza = createPizza(type);</span><br><span class=\"line\">\t\tpizza.prepare();</span><br><span class=\"line\">\t\tpizza.bake();</span><br><span class=\"line\">\t\tpizza.cut();</span><br><span class=\"line\">\t\tpizza.box();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">abstract</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String type)</span></span>; <span class=\"comment\">//Pizza 인스턴스를 만드는 일은 팩토리 역할을 하는 메소드에서 맡아 처리</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-각-피자가게에서-추상클래스-본사-를-상속받게-한다\"><a href=\"#5-각-피자가게에서-추상클래스-본사-를-상속받게-한다\" class=\"headerlink\" title=\"5. 각 피자가게에서 추상클래스(본사)를 상속받게 한다.\"></a>5. 각 피자가게에서 추상클래스(본사)를 상속받게 한다.</h3><p>이제 각 분점을 위한 지역별로 서브클래스를 만들어줘야 한다. 피자의 스타일은 각 서브클래스에서 결정.</p>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/139077742-76ac1027-09c3-4e42-8046-82a2b4e0cb54.jpg\" alt=\"image\"></p>\n<p>이제 <code>ChicagoPizzaStore</code>, <code>NYPizzaStore</code> 에는 구상 피자클래스를 분기해주는 각각의 <code>createPizza()</code> 메소드가 있다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NYPizzaStore</span> <span class=\"keyword\">extends</span> <span class=\"title\">PizzaStore</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String type)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPizza pizza = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;cheese&quot;</span>)) pizza = <span class=\"keyword\">new</span> NYStyleCheesePizza();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;peper&quot;</span>)) pizza = <span class=\"keyword\">new</span> NYStylePepperoniPizza();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;clam&quot;</span>)) pizza = <span class=\"keyword\">new</span> NYStyleClamPizza();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;veggie&quot;</span>)) pizza = <span class=\"keyword\">new</span> NYStyleVeggiePizza();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChicagoPizzaStore</span> <span class=\"keyword\">extends</span> <span class=\"title\">PizzaStore</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String type)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Pizza pizza = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;cheese&quot;</span>)) pizza = <span class=\"keyword\">new</span> ChicagoStyleCheesePizza();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;peper&quot;</span>)) pizza = <span class=\"keyword\">new</span> ChicagoStylePepperoniPizza();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;clam&quot;</span>)) pizza = <span class=\"keyword\">new</span> ChicagoStyleClamPizza();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;veggie&quot;</span>)) pizza = <span class=\"keyword\">new</span> ChicagoStyleVeggiePizza();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-피자-추상클래스를-만든다-순수한-피자-그-자체\"><a href=\"#6-피자-추상클래스를-만든다-순수한-피자-그-자체\" class=\"headerlink\" title=\"6. 피자 추상클래스를 만든다.(순수한 피자 그 자체)\"></a>6. 피자 추상클래스를 만든다.(순수한 피자 그 자체)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pizza</span></span>&#123;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\tString dough;</span><br><span class=\"line\">\tString sauce;</span><br><span class=\"line\">\tArrayList&lt;String&gt; toppings = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Preparing : &quot;</span>+name);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Tossing dough...&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Adding source&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Adding toppings&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String topping : toppings) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;\\ttopping : &quot;</span>+topping);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bake</span><span class=\"params\">()</span></span>&#123; System.out.println(<span class=\"string\">&quot;Bake for 25 minutes at 350&quot;</span>); &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cut</span><span class=\"params\">()</span></span>&#123; System.out.println(<span class=\"string\">&quot;Cutting the pizza into diagonal slices&quot;</span>); &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">box</span><span class=\"params\">()</span></span>&#123; System.out.println(<span class=\"string\">&quot;Place pizza in official PizzaStore box&quot;</span>); &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getname</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-다양한-피자를-만들어-피자-추상클래스를-상속한다\"><a href=\"#7-다양한-피자를-만들어-피자-추상클래스를-상속한다\" class=\"headerlink\" title=\"7. 다양한 피자를 만들어 피자 추상클래스를 상속한다.\"></a>7. 다양한 피자를 만들어 피자 추상클래스를 상속한다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NYStyleCheesePizza</span> <span class=\"keyword\">extends</span> <span class=\"title\">Pizza</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NYStyleCheesePizza</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = <span class=\"string\">&quot;NY Style CheesePizza&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.dough = <span class=\"string\">&quot;Thin Crust Dough&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sauce = <span class=\"string\">&quot;Marinara Sauce&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.toppings.add(<span class=\"string\">&quot;Grated Reggiano Cheese&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChicagoStyleCheesePizza</span> <span class=\"keyword\">extends</span> <span class=\"title\">Pizza</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChicagoStyleCheesePizza</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = <span class=\"string\">&quot;Chicago Style CheesePizza&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.dough = <span class=\"string\">&quot;Extra Thick Crust Dough&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sauce = <span class=\"string\">&quot;Plum Tomato Sauce&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.toppings.add(<span class=\"string\">&quot;Shredded mozzarella Cheese&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cut</span><span class=\"params\">()</span> </span>&#123; System.out.println(<span class=\"string\">&quot;Cutting the pizza into square slices&quot;</span>); &#125; <span class=\"comment\">//바꾸고 싶은 메소드만 오버라이딩</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-피자를-주문한다\"><a href=\"#8-피자를-주문한다\" class=\"headerlink\" title=\"8. 피자를 주문한다.\"></a>8. 피자를 주문한다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PizzaTestDrive</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPizzaStore nyStore = <span class=\"keyword\">new</span> NYPizzaStore();</span><br><span class=\"line\">\tPizzaStore chicagoStore = <span class=\"keyword\">new</span> ChicagoPizzaStore();</span><br><span class=\"line\"></span><br><span class=\"line\">\tPizza nySytpePizza = nyStore.orderPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br><span class=\"line\">\tSystem.out.println(nySytpePizza.getname());</span><br><span class=\"line\"></span><br><span class=\"line\">\tPizza chicagoStypePizza = chicagoStore.orderPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br><span class=\"line\">\tSystem.out.println(chicagoStypePizza.getname());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>모든 팩토리 패턴에서는 <strong>객체 생성을 캡슐화</strong> 한다.</li>\n<li>팩토리 메소드 패턴에서는 <em>서브 클래스에서 어떤 클래스를 만들지를 결정하게 함</em>으로써 객체 생성을 캡슐화 한다.</li>\n</ul>\n<ul>\n<li>생산자 클래스(피자가게)</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/139077751-6a262811-5faf-4937-b7f1-5fb3447d8b90.jpg\" alt=\"image2\"></p>\n<ul>\n<li>제품 클래스(피자)</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/139077752-b27d2d2f-57fb-4226-bab6-f890d0f70a74.jpg\" alt=\"image3\"></p>\n<p>위 클래스 다이어그램에서는 <code>PizzaStore</code> 추상 클래스에서 객체를 만들기 위한 메소드,<br>즉 팩토리 메소드를 위한 인터페이스를 제공한다는 것을 알수있다. </p>\n<p><code>PizzaStore</code>에 구현되어 있는 다른 메소드 <code>orderPizza()</code> 에서는 팩토리 메소드에 의해 생산된 제품을 가지고 필요한 작업을 처리한다.<br>하지만 실제 팩토리 메소드를 구현하고 제품(객체 인스턴스)을 만들어 내는 일은 <strong>서브클래스</strong>에서만 할수 있다.</p>\n<hr>\n<h2 id=\"🎭-디자인원칙-의존성-뒤집기-원칙\"><a href=\"#🎭-디자인원칙-의존성-뒤집기-원칙\" class=\"headerlink\" title=\"🎭 디자인원칙 : 의존성 뒤집기 원칙\"></a>🎭 디자인원칙 : 의존성 뒤집기 원칙</h2><blockquote>\n<p>추상화된 것에 의존하도록 만들어라. 구상 클래스에 의존하도록 만들지 않도록 한다.</p>\n</blockquote>\n<p><del>구현클래스에 의존하는 형태</del></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PizzaStore -&gt; NYStyleCheesePizza</span><br><span class=\"line\">PizzaStore -&gt; ChicagoStypeCheesePizza</span><br><span class=\"line\">PizzaStore -&gt; NYStyleVeggiePizza</span><br></pre></td></tr></table></figure>\n<p><del>-&gt; 좋지않음</del></p>\n<p>추상클래스(인터페이스)를 의존하는 형태</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PizzaStore -&gt; Pizza</span><br><span class=\"line\">Pizza &lt;- NYStyleCheesePizza</span><br><span class=\"line\">Pizza &lt;- ChicagoStyleCheesePizza</span><br><span class=\"line\">Pizza &lt;- NYStyleVeggiePizza</span><br></pre></td></tr></table></figure>\n<p> -&gt; <strong>좋음</strong></p>\n<h3 id=\"🛒-원칙에-도움이-되는-가이드\"><a href=\"#🛒-원칙에-도움이-되는-가이드\" class=\"headerlink\" title=\"🛒 원칙에 도움이 되는 가이드\"></a>🛒 원칙에 도움이 되는 가이드</h3><p><em><strong>1. 어떤 변수에도 구상 클래스에 대한 레퍼런스를 지정하지 않는다.</strong></em></p>\n<ul>\n<li><code>new</code> 연산자를 사용하면 레퍼런스를 사용하게 되는 것이다.</li>\n</ul>\n<p><em><strong>2. 구상 클래스에서 유도된 클래스를 만들지 않는다.</strong></em></p>\n<ul>\n<li>구상클래스에서 유도된 클래스를 만들면 특정 구상 클래스에 의존하게된다, 추상화 된 것을 사용해야 한다.</li>\n</ul>\n<p><em><strong>3. 베이스 클래스에 이미 구현되어 있던 메소드를 오버라이드 하지 않는다.</strong></em></p>\n<ul>\n<li>이미 구현되어 있는 메소드를 오버라이드 한다는 것은 애초부터 베이스 클래스가 제대로 추상화 된것이 아니었다고 볼 수 있다. </li>\n<li>베이스 클래스에서 메소드를 정의할 때는 모든 서브 클래스에서 공유할 수 있는 것만 정의해야한다.</li>\n</ul>\n<hr>\n<h2 id=\"🦺-추상-팩토리-패턴\"><a href=\"#🦺-추상-팩토리-패턴\" class=\"headerlink\" title=\"🦺 추상 팩토리 패턴\"></a>🦺 추상 팩토리 패턴</h2><p>이렇게 PizzaStore 디자인이 모양새를 갖췄다. 유연한 프레임워크도 만들어 졌고, 디자인 원칙도 충실하게 지켰다.</p>\n<p>각각 체인점들이 미리 정해놓은 절차를 잘 따르고 있지만 몇몇 체인점들이 자잘한 재료를 더 싼 재료로 바꿔서 원가를 절감해 마진을 남기고 있다. </p>\n<p>원재료의 품질까지 관리하는 방법이 있을까??</p>\n<ul>\n<li><strong>원재료 군</strong>을 만들어 파악하자. </li>\n<li>제품에 들어가는 재료군(반죽, 소스, 치즈, 야채, 고기)은 같지만, 지역마다 재료의 구체적인 내용이 조금씩 다르다.</li>\n</ul>\n<ol>\n<li>지역별로 팩토리를 만들어 각 생성 메소드를 구현하는 <code>PizzaingredientFactory</code> 클래스를 만든다.</li>\n<li><code>ReggianoCheese</code>, <code>RedPeppers</code>, <code>ThickCrustDough</code>와 같이 팩토리에서 사용할 원재료 클래스들을 구현한다.</li>\n<li>만든 원재료 공장을 <code>PizzaStore</code> 코드에서 사용하도록 함으로써 하나로 묶어준다.</li>\n</ol>\n<h3 id=\"9-원재료-공장을-만든다\"><a href=\"#9-원재료-공장을-만든다\" class=\"headerlink\" title=\"9. 원재료 공장을 만든다.\"></a>9. 원재료 공장을 만든다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PizzaIngredientFactory</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Dough <span class=\"title\">createDough</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Sauce <span class=\"title\">createSauce</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Cheese <span class=\"title\">createCheese</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> Veggies[] createVeggies();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Pepperoni <span class=\"title\">createPepperoni</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Clams <span class=\"title\">createClams</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NYPizzaingredientFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">PizzaIngredientFactory</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Dough <span class=\"title\">createDough</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThinCrustdough(); &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Sauce <span class=\"title\">createSauce</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MarinaraSauce(); &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Cheese <span class=\"title\">createCheese</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ReggianoCheese(); &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Veggies[] createVeggies() &#123;</span><br><span class=\"line\">\t\tVeggies veggies[] = &#123; <span class=\"keyword\">new</span> Farlic(), <span class=\"keyword\">new</span> Onion(), <span class=\"keyword\">new</span> Mushroom(), <span class=\"keyword\">new</span> RedPepper() &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> veggies;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Pepperoni <span class=\"title\">createPepperoni</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SlicedPepperoni(); &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Clams <span class=\"title\">createClams</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Freshclams(); &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChicagoPizzaingredientFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">PizzaIngredientFactory</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Dough <span class=\"title\">createDough</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThickCrustDough(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sauce <span class=\"title\">createSauce</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PlumTomatoSauce(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Cheese <span class=\"title\">createCheese</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MozzarellaCheese(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Veggies[] createVeggies() &#123;</span><br><span class=\"line\">        Veggies veggies[] = &#123; <span class=\"keyword\">new</span> BlackOlives(), <span class=\"keyword\">new</span> Spinach(), <span class=\"keyword\">new</span> EggPlant()&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> veggies;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Pepperoni <span class=\"title\">createPepperoni</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Slicedpepperoni(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Clams <span class=\"title\">createClams</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FrozenClam(); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-피자마다-재료는-다르다\"><a href=\"#10-피자마다-재료는-다르다\" class=\"headerlink\" title=\"10. 피자마다 재료는 다르다.\"></a>10. 피자마다 재료는 다르다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pizza</span></span>&#123;</span><br><span class=\"line\">String name;</span><br><span class=\"line\">Dough dough;</span><br><span class=\"line\">Sauce sauce;</span><br><span class=\"line\">Veggies veggies[];</span><br><span class=\"line\">Cheese cheese;</span><br><span class=\"line\">Pepperoni pepperoni;</span><br><span class=\"line\">Clams clams;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span></span>; <span class=\"comment\">//추상 메소드로 변경됨.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bake</span><span class=\"params\">()</span></span>&#123; System.out.println(<span class=\"string\">&quot;Bake for 25 minutes at 350&quot;</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cut</span><span class=\"params\">()</span></span>&#123; System.out.println(<span class=\"string\">&quot;Cutting the pizza into diagonal slices&quot;</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">box</span><span class=\"params\">()</span></span>&#123; System.out.println(<span class=\"string\">&quot;Place pizza in official PizzaStore box&quot;</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getname</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name; &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheesePizza</span> <span class=\"keyword\">extends</span> <span class=\"title\">Pizza</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPizzaIngredientFactory ingredientFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CheesePizza</span><span class=\"params\">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.ingredientFactory = ingredientFactory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.dough = ingredientFactory.createDough();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sauce = ingredientFactory.createSauce();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.cheese = ingredientFactory.createCheese();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClamPizza</span> <span class=\"keyword\">extends</span> <span class=\"title\">Pizza</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    PizzaIngredientFactory ingredientFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClamPizza</span><span class=\"params\">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ingredientFactory = ingredientFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dough = ingredientFactory.createDough();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sauce = ingredientFactory.createSauce();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cheese = ingredientFactory.createCheese();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.clams = ingredientFactory.createClams();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"11-피자마다-지역마다-다른-피자를-만든다\"><a href=\"#11-피자마다-지역마다-다른-피자를-만든다\" class=\"headerlink\" title=\"11. 피자마다, 지역마다 다른 피자를 만든다.\"></a>11. 피자마다, 지역마다 다른 피자를 만든다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NYPizzaStore</span> <span class=\"keyword\">extends</span> <span class=\"title\">PizzaStore</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String type)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPizza pizza = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tPizzaIngredientFactory ingredientFactory = <span class=\"keyword\">new</span> NYPizzaingredientFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;cheese&quot;</span>))&#123;</span><br><span class=\"line\">\t\tpizza = <span class=\"keyword\">new</span> CheesePizza(ingredientFactory);</span><br><span class=\"line\">\t\tpizza.setName(ingredientFactory.NY_STYLE+<span class=\"string\">&quot; Cheese Pizza&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;peper&quot;</span>))&#123;</span><br><span class=\"line\">\t\tpizza = <span class=\"keyword\">new</span> PepperoniPizza(ingredientFactory);</span><br><span class=\"line\">\t\tpizza.setName(ingredientFactory.NY_STYLE+<span class=\"string\">&quot; Pepperoni Pizza&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;clam&quot;</span>))&#123;</span><br><span class=\"line\">\t\tpizza = <span class=\"keyword\">new</span> ClamPizza(ingredientFactory);</span><br><span class=\"line\">\t\tpizza.setName(ingredientFactory.NY_STYLE+<span class=\"string\">&quot; Clam Pizza&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;veggie&quot;</span>))&#123;</span><br><span class=\"line\">\t\tpizza = <span class=\"keyword\">new</span> VeggiePizza(ingredientFactory);</span><br><span class=\"line\">\t\tpizza.setName(ingredientFactory.NY_STYLE+<span class=\"string\">&quot; Veggie Pizza&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"⛳-프로세스-정리\"><a href=\"#⛳-프로세스-정리\" class=\"headerlink\" title=\"⛳ 프로세스 정리\"></a>⛳ 프로세스 정리</h3><p><img src=\"https://user-images.githubusercontent.com/55419159/139077755-c920f73b-e347-41d4-b1a8-9f0bc5e028fa.jpg\" alt=\"image4\"></p>\n<p>이제 전체적인 흐름은.</p>\n<ol>\n<li><p>뉴욕 피자가게를 만든다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PizzaStore nyPizzaStore = <span class=\"keyword\">new</span> NYPizzaStore();</span><br></pre></td></tr></table></figure></li>\n<li><p>주문을 한다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nyPizzaStore.orderPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>orderPizza 메소드에서는 우선 createPizza() 메소드를 호출한다</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pizza pizza = createPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>createPizza() 메소드가 호출되면 원재료 공장이 돌아가기 시작한다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pizza pizza = <span class=\"keyword\">new</span> CheesePizza(nyIngredientFactory);</span><br></pre></td></tr></table></figure></li>\n<li><p>피자를 준비하는 prepare()메소드가 호출되면 팩토리에 원재료 주문이 들어간다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        dough = nyIngredientFactory.createDough();</span><br><span class=\"line\">        sauce = nyIngredientFactory.createSauce();</span><br><span class=\"line\">        cheese = nyIngredientFactory.createCheese();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>준비단계가 끝나고 orderPizza() 메소드에서는 피자를 굽고, 자르고, 포장한다.</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"💎-요약\"><a href=\"#💎-요약\" class=\"headerlink\" title=\"💎 요약\"></a>💎 요약</h2><h3 id=\"추상-팩토리-패턴\"><a href=\"#추상-팩토리-패턴\" class=\"headerlink\" title=\"추상 팩토리 패턴\"></a>추상 팩토리 패턴</h3><blockquote>\n<p>제품군을 생성하기 위한 <strong>인터페이스</strong>를 생성하고, 그 <strong>인터페이스를 구성</strong>하여 사용할수 있게끔 하는것.</p>\n</blockquote>\n<h3 id=\"추상-메소드-패턴\"><a href=\"#추상-메소드-패턴\" class=\"headerlink\" title=\"추상 메소드 패턴\"></a>추상 메소드 패턴</h3><blockquote>\n<p>하나의 추상클래스에서 <strong>추상 메소드</strong>를 만들고, 서브클래스들이 <strong>그 추상메소드를 구현</strong>하여 인스턴스를 만들게끔 하는것.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"⛳-들어가기-전에\"><a href=\"#⛳-들어가기-전에\" class=\"headerlink\" title=\"⛳ 들어가기 전에..\"></a>⛳ 들어가기 전에..</h2><p>회사에서 같은 프로세스 내에서 각각의 제휴사에 서비스를 인터페이스해야 하는 경우가 있었다.</p>\n<p>전체적인 프로세스 플로우를 인터페이스로, 제휴사를 클래스(Bean)로 만들어 팩토리 패턴으로 구현하였다. </p>\n<p>동일한 프로세스 플로우 내에서 각기 다른 제휴사의 API와 연동해야 했는데 팩토리 패턴이 많은 도움이 되었다.</p>\n<hr>\n<h2 id=\"👋-팩토리패턴이란\"><a href=\"#👋-팩토리패턴이란\" class=\"headerlink\" title=\"👋 팩토리패턴이란\"></a>👋 팩토리패턴이란</h2><h3 id=\"⚾-팩토리-메소드-패턴\"><a href=\"#⚾-팩토리-메소드-패턴\" class=\"headerlink\" title=\"⚾ 팩토리 메소드 패턴\"></a>⚾ 팩토리 메소드 패턴</h3><blockquote>\n<p>객체를 생성하기 위한 인터페이스를 정의하는데,<br>어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정하게 만든다.<br>즉, 팩토리 메소드 패턴을 이용하면 <strong>클래스의 인스턴스를 만드는 일을 서브클래스에게 맡기는 것</strong>.</p>\n</blockquote>\n<h3 id=\"🥎-추상-팩토리-패턴\"><a href=\"#🥎-추상-팩토리-패턴\" class=\"headerlink\" title=\"🥎 추상 팩토리 패턴\"></a>🥎 추상 팩토리 패턴</h3><blockquote>\n<p><strong>인터페이스를 이용</strong>하여 서로 연관된,<br>또는 의존하는 객체를 구상 클래스를 지정하지 않고도 생성한다.</p>\n</blockquote>\n<hr>\n<h2 id=\"🎩-팩토리패턴이-필요한-이유\"><a href=\"#🎩-팩토리패턴이-필요한-이유\" class=\"headerlink\" title=\"🎩 팩토리패턴이 필요한 이유\"></a>🎩 팩토리패턴이 필요한 이유</h2><p><code>new</code>를 사용하는 것은 구상 클래스의 인스턴스를 만드는 것이다.<br>당연히! 인터페이스가 아닌 <em>특정 구현을 사용하게 되어버리는 것</em>.<br>일련의 구상 클래스들이 있을때는 어쩔수 없이 다음과 같은 코드를 만들어야 하는 경우가 있다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Duck duck;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( type == picnic ) duck = <span class=\"keyword\">new</span> MallardDuck();</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( type == hunting ) duck = <span class=\"keyword\">new</span> DecoyDuck();</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( type == inBathTub) duck = <span class=\"keyword\">new</span> RubberDuck();</span><br></pre></td></tr></table></figure>\n\n<p>이런 코드가 있다는 것은, 뭔가 변경하거나 확장해야 할 때 <em>코드를 다시 확인하고 추가 또는 제거해야 한다는 것</em>을 의미한다.<br><strong>인터페이스</strong>에 맞춰서 코딩을 하면 시스템에서 일어날 수 있는 여러 변화를 이겨낼 수 있다.<br><strong>다형성</strong> 덕분에 어떤 클래스든 특정 인터페이스만 구현하면 사용할수 있기 때문이다.</p>\n<p>반대로. 구상 클래스를 많이 사용하면 새로운 구상 클래스가 추가될 때마다 코드를 고쳐야 하기때문에 많은 문제가 생길수 있다.<br>즉, <em>변화에 대해 닫혀 있는 코드</em>가 되어버리는 것이다.</p>\n<blockquote>\n<p>바뀔 수 있는 부분을 찾아내서 바뀌지 않는 부분하고 분리시켜야 한다는 원칙.</p>\n</blockquote>\n<hr>\n<h2 id=\"🎢-고전적인-팩토리-패턴\"><a href=\"#🎢-고전적인-팩토리-패턴\" class=\"headerlink\" title=\"🎢 고전적인 팩토리 패턴\"></a>🎢 고전적인 팩토리 패턴</h2><ul>\n<li><strong>피자 가게</strong>를 운영하고 있고 <strong>피자가게 클래스</strong>를 만들어야 된다고 가정한다.<blockquote>\n<p>피자가게는 다양한 피자가 있을 수 있다.<br>또한 다양한 피자가게가 있을 수 있다.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"🎞-기존소스\"><a href=\"#🎞-기존소스\" class=\"headerlink\" title=\"🎞 기존소스\"></a>🎞 기존소스</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Pizza <span class=\"title\">orderPizza</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       Pizza pizza;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//추가하거나 제거 시 매번 바뀌어야 하는부분</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;cheese&quot;</span>)) pizza = <span class=\"keyword\">new</span> CheesePizza();</span><br><span class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;greek&quot;</span>)) pizza = <span class=\"keyword\">new</span> GreekPizza();</span><br><span class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;pepperoni&quot;</span>)) pizza = <span class=\"keyword\">new</span> PepperoniPizza();</span><br><span class=\"line\">       <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">       pizza.prepare();</span><br><span class=\"line\">       pizza.bake();</span><br><span class=\"line\">       pizza.cut();</span><br><span class=\"line\">       pizza.box();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-피자-팩토리를-만든다\"><a href=\"#1-피자-팩토리를-만든다\" class=\"headerlink\" title=\"1. 피자 팩토리를 만든다.\"></a>1. 피자 팩토리를 만든다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimplePizzaFactory</span> </span>&#123;\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String type)</span></span>&#123; <span class=\"comment\">//이런 경우에는 static메소드로 선언하는 경우가 종종 있음.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tPizza pizza = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pizza.equals(<span class=\"string\">&quot;cheese&quot;</span>)) pizza = <span class=\"keyword\">new</span> CheesePizza();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pizza.equals(<span class=\"string\">&quot;pepper&quot;</span>)) pizza = <span class=\"keyword\">new</span> PepperoniPizza();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pizza.equals(<span class=\"string\">&quot;clam&quot;</span>)) pizza = <span class=\"keyword\">new</span> ClamPizza();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pizza.equals(<span class=\"string\">&quot;veggie&quot;</span>)) pizza = <span class=\"keyword\">new</span> VeggiePizza();</span><br><span class=\"line\">\t</span><br><span class=\"line\">       <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-피자-가게를-만든다\"><a href=\"#2-피자-가게를-만든다\" class=\"headerlink\" title=\"2. 피자 가게를 만든다.\"></a>2. 피자 가게를 만든다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSimplePizzaFactory simplePizzaFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PizzaStore</span><span class=\"params\">(SimplePizzaFactory simplePizzaFactory)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.simplePizzaFactory = simplePizzaFactory;  <span class=\"comment\">//피자 가게를 동적으로 설정</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">orderPizza</span><span class=\"params\">(String type)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPizza pizza;</span><br><span class=\"line\">\t\tpizza = simplePizzaFactory.createPizza(type); <span class=\"comment\">//수정 안해도 됨</span></span><br><span class=\"line\">\t\tpizza.prepare();</span><br><span class=\"line\">\t\tpizza.bake();</span><br><span class=\"line\">\t\tpizza.cut();</span><br><span class=\"line\">\t\tpizza.box();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-다양한-피자가게가-생긴다\"><a href=\"#3-다양한-피자가게가-생긴다\" class=\"headerlink\" title=\"3. 다양한 피자가게가 생긴다.\"></a>3. 다양한 피자가게가 생긴다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PizzaStore nyStore = <span class=\"keyword\">new</span> PizzaStore(<span class=\"keyword\">new</span> NYPizzaFactory());</span><br><span class=\"line\">nyStore.orderPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">PizzaStore chicagoStore = <span class=\"keyword\">new</span> PizzaStore(<span class=\"keyword\">new</span> ChicagoPizzafactory());</span><br><span class=\"line\">chicagoStore.orderPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>각 피자가게에서 <code>orderPizza()</code> 만 호출하면 피자를 생성할 수 있게 되었다.</li>\n</ul>\n<blockquote>\n<p>그러나, 각 팩토리를 가진 피자가게 체인점들이 서로의 구현방식이 달라지는 일이 발생할수도 있게 되었다.<br>(PizzaStore가 각각 있다보니 굽는 방식이 달라진다거나 피자를 자르는 단계를 빼먹거나 하는..)</p>\n</blockquote>\n<hr>\n<h2 id=\"🎟-팩토리-메소드-패턴\"><a href=\"#🎟-팩토리-메소드-패턴\" class=\"headerlink\" title=\"🎟 팩토리 메소드 패턴\"></a>🎟 팩토리 메소드 패턴</h2><blockquote>\n<p>피자가게와 피자 <strong>제작 과정 전체를 하나로 묶어주는 프레임워크</strong>를 만들어야 된다는 결론!!<br>파자를 만드는 활동 자체는 전부 PizzaStore 클래스에 국한시키면서도 분점마다 고유의 스타일을 살릴 수 있는 방법은 ??</p>\n</blockquote>\n<h3 id=\"4-피자가게를-묶는-추상-클래스를-만든다-프렌차이즈-본사랄까\"><a href=\"#4-피자가게를-묶는-추상-클래스를-만든다-프렌차이즈-본사랄까\" class=\"headerlink\" title=\"4. 피자가게를 묶는 추상 클래스를 만든다. (프렌차이즈 본사랄까..)\"></a>4. 피자가게를 묶는 추상 클래스를 만든다. (프렌차이즈 본사랄까..)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span>&#123; <span class=\"comment\">//추상 클래스로 구현</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">orderPizza</span><span class=\"params\">(String type)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPizza pizza;</span><br><span class=\"line\">\t\tpizza = createPizza(type);</span><br><span class=\"line\">\t\tpizza.prepare();</span><br><span class=\"line\">\t\tpizza.bake();</span><br><span class=\"line\">\t\tpizza.cut();</span><br><span class=\"line\">\t\tpizza.box();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">abstract</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String type)</span></span>; <span class=\"comment\">//Pizza 인스턴스를 만드는 일은 팩토리 역할을 하는 메소드에서 맡아 처리</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-각-피자가게에서-추상클래스-본사-를-상속받게-한다\"><a href=\"#5-각-피자가게에서-추상클래스-본사-를-상속받게-한다\" class=\"headerlink\" title=\"5. 각 피자가게에서 추상클래스(본사)를 상속받게 한다.\"></a>5. 각 피자가게에서 추상클래스(본사)를 상속받게 한다.</h3><p>이제 각 분점을 위한 지역별로 서브클래스를 만들어줘야 한다. 피자의 스타일은 각 서브클래스에서 결정.</p>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/139077742-76ac1027-09c3-4e42-8046-82a2b4e0cb54.jpg\" alt=\"image\"></p>\n<p>이제 <code>ChicagoPizzaStore</code>, <code>NYPizzaStore</code> 에는 구상 피자클래스를 분기해주는 각각의 <code>createPizza()</code> 메소드가 있다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NYPizzaStore</span> <span class=\"keyword\">extends</span> <span class=\"title\">PizzaStore</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String type)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPizza pizza = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;cheese&quot;</span>)) pizza = <span class=\"keyword\">new</span> NYStyleCheesePizza();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;peper&quot;</span>)) pizza = <span class=\"keyword\">new</span> NYStylePepperoniPizza();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;clam&quot;</span>)) pizza = <span class=\"keyword\">new</span> NYStyleClamPizza();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;veggie&quot;</span>)) pizza = <span class=\"keyword\">new</span> NYStyleVeggiePizza();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChicagoPizzaStore</span> <span class=\"keyword\">extends</span> <span class=\"title\">PizzaStore</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String type)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Pizza pizza = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;cheese&quot;</span>)) pizza = <span class=\"keyword\">new</span> ChicagoStyleCheesePizza();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;peper&quot;</span>)) pizza = <span class=\"keyword\">new</span> ChicagoStylePepperoniPizza();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;clam&quot;</span>)) pizza = <span class=\"keyword\">new</span> ChicagoStyleClamPizza();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;veggie&quot;</span>)) pizza = <span class=\"keyword\">new</span> ChicagoStyleVeggiePizza();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-피자-추상클래스를-만든다-순수한-피자-그-자체\"><a href=\"#6-피자-추상클래스를-만든다-순수한-피자-그-자체\" class=\"headerlink\" title=\"6. 피자 추상클래스를 만든다.(순수한 피자 그 자체)\"></a>6. 피자 추상클래스를 만든다.(순수한 피자 그 자체)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pizza</span></span>&#123;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\tString dough;</span><br><span class=\"line\">\tString sauce;</span><br><span class=\"line\">\tArrayList&lt;String&gt; toppings = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Preparing : &quot;</span>+name);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Tossing dough...&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Adding source&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Adding toppings&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String topping : toppings) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;\\ttopping : &quot;</span>+topping);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bake</span><span class=\"params\">()</span></span>&#123; System.out.println(<span class=\"string\">&quot;Bake for 25 minutes at 350&quot;</span>); &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cut</span><span class=\"params\">()</span></span>&#123; System.out.println(<span class=\"string\">&quot;Cutting the pizza into diagonal slices&quot;</span>); &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">box</span><span class=\"params\">()</span></span>&#123; System.out.println(<span class=\"string\">&quot;Place pizza in official PizzaStore box&quot;</span>); &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getname</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-다양한-피자를-만들어-피자-추상클래스를-상속한다\"><a href=\"#7-다양한-피자를-만들어-피자-추상클래스를-상속한다\" class=\"headerlink\" title=\"7. 다양한 피자를 만들어 피자 추상클래스를 상속한다.\"></a>7. 다양한 피자를 만들어 피자 추상클래스를 상속한다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NYStyleCheesePizza</span> <span class=\"keyword\">extends</span> <span class=\"title\">Pizza</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NYStyleCheesePizza</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = <span class=\"string\">&quot;NY Style CheesePizza&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.dough = <span class=\"string\">&quot;Thin Crust Dough&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sauce = <span class=\"string\">&quot;Marinara Sauce&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.toppings.add(<span class=\"string\">&quot;Grated Reggiano Cheese&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChicagoStyleCheesePizza</span> <span class=\"keyword\">extends</span> <span class=\"title\">Pizza</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChicagoStyleCheesePizza</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = <span class=\"string\">&quot;Chicago Style CheesePizza&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.dough = <span class=\"string\">&quot;Extra Thick Crust Dough&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sauce = <span class=\"string\">&quot;Plum Tomato Sauce&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.toppings.add(<span class=\"string\">&quot;Shredded mozzarella Cheese&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cut</span><span class=\"params\">()</span> </span>&#123; System.out.println(<span class=\"string\">&quot;Cutting the pizza into square slices&quot;</span>); &#125; <span class=\"comment\">//바꾸고 싶은 메소드만 오버라이딩</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-피자를-주문한다\"><a href=\"#8-피자를-주문한다\" class=\"headerlink\" title=\"8. 피자를 주문한다.\"></a>8. 피자를 주문한다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PizzaTestDrive</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPizzaStore nyStore = <span class=\"keyword\">new</span> NYPizzaStore();</span><br><span class=\"line\">\tPizzaStore chicagoStore = <span class=\"keyword\">new</span> ChicagoPizzaStore();</span><br><span class=\"line\"></span><br><span class=\"line\">\tPizza nySytpePizza = nyStore.orderPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br><span class=\"line\">\tSystem.out.println(nySytpePizza.getname());</span><br><span class=\"line\"></span><br><span class=\"line\">\tPizza chicagoStypePizza = chicagoStore.orderPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br><span class=\"line\">\tSystem.out.println(chicagoStypePizza.getname());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>모든 팩토리 패턴에서는 <strong>객체 생성을 캡슐화</strong> 한다.</li>\n<li>팩토리 메소드 패턴에서는 <em>서브 클래스에서 어떤 클래스를 만들지를 결정하게 함</em>으로써 객체 생성을 캡슐화 한다.</li>\n</ul>\n<ul>\n<li>생산자 클래스(피자가게)</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/139077751-6a262811-5faf-4937-b7f1-5fb3447d8b90.jpg\" alt=\"image2\"></p>\n<ul>\n<li>제품 클래스(피자)</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/139077752-b27d2d2f-57fb-4226-bab6-f890d0f70a74.jpg\" alt=\"image3\"></p>\n<p>위 클래스 다이어그램에서는 <code>PizzaStore</code> 추상 클래스에서 객체를 만들기 위한 메소드,<br>즉 팩토리 메소드를 위한 인터페이스를 제공한다는 것을 알수있다. </p>\n<p><code>PizzaStore</code>에 구현되어 있는 다른 메소드 <code>orderPizza()</code> 에서는 팩토리 메소드에 의해 생산된 제품을 가지고 필요한 작업을 처리한다.<br>하지만 실제 팩토리 메소드를 구현하고 제품(객체 인스턴스)을 만들어 내는 일은 <strong>서브클래스</strong>에서만 할수 있다.</p>\n<hr>\n<h2 id=\"🎭-디자인원칙-의존성-뒤집기-원칙\"><a href=\"#🎭-디자인원칙-의존성-뒤집기-원칙\" class=\"headerlink\" title=\"🎭 디자인원칙 : 의존성 뒤집기 원칙\"></a>🎭 디자인원칙 : 의존성 뒤집기 원칙</h2><blockquote>\n<p>추상화된 것에 의존하도록 만들어라. 구상 클래스에 의존하도록 만들지 않도록 한다.</p>\n</blockquote>\n<p><del>구현클래스에 의존하는 형태</del></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PizzaStore -&gt; NYStyleCheesePizza</span><br><span class=\"line\">PizzaStore -&gt; ChicagoStypeCheesePizza</span><br><span class=\"line\">PizzaStore -&gt; NYStyleVeggiePizza</span><br></pre></td></tr></table></figure>\n<p><del>-&gt; 좋지않음</del></p>\n<p>추상클래스(인터페이스)를 의존하는 형태</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PizzaStore -&gt; Pizza</span><br><span class=\"line\">Pizza &lt;- NYStyleCheesePizza</span><br><span class=\"line\">Pizza &lt;- ChicagoStyleCheesePizza</span><br><span class=\"line\">Pizza &lt;- NYStyleVeggiePizza</span><br></pre></td></tr></table></figure>\n<p> -&gt; <strong>좋음</strong></p>\n<h3 id=\"🛒-원칙에-도움이-되는-가이드\"><a href=\"#🛒-원칙에-도움이-되는-가이드\" class=\"headerlink\" title=\"🛒 원칙에 도움이 되는 가이드\"></a>🛒 원칙에 도움이 되는 가이드</h3><p><em><strong>1. 어떤 변수에도 구상 클래스에 대한 레퍼런스를 지정하지 않는다.</strong></em></p>\n<ul>\n<li><code>new</code> 연산자를 사용하면 레퍼런스를 사용하게 되는 것이다.</li>\n</ul>\n<p><em><strong>2. 구상 클래스에서 유도된 클래스를 만들지 않는다.</strong></em></p>\n<ul>\n<li>구상클래스에서 유도된 클래스를 만들면 특정 구상 클래스에 의존하게된다, 추상화 된 것을 사용해야 한다.</li>\n</ul>\n<p><em><strong>3. 베이스 클래스에 이미 구현되어 있던 메소드를 오버라이드 하지 않는다.</strong></em></p>\n<ul>\n<li>이미 구현되어 있는 메소드를 오버라이드 한다는 것은 애초부터 베이스 클래스가 제대로 추상화 된것이 아니었다고 볼 수 있다. </li>\n<li>베이스 클래스에서 메소드를 정의할 때는 모든 서브 클래스에서 공유할 수 있는 것만 정의해야한다.</li>\n</ul>\n<hr>\n<h2 id=\"🦺-추상-팩토리-패턴\"><a href=\"#🦺-추상-팩토리-패턴\" class=\"headerlink\" title=\"🦺 추상 팩토리 패턴\"></a>🦺 추상 팩토리 패턴</h2><p>이렇게 PizzaStore 디자인이 모양새를 갖췄다. 유연한 프레임워크도 만들어 졌고, 디자인 원칙도 충실하게 지켰다.</p>\n<p>각각 체인점들이 미리 정해놓은 절차를 잘 따르고 있지만 몇몇 체인점들이 자잘한 재료를 더 싼 재료로 바꿔서 원가를 절감해 마진을 남기고 있다. </p>\n<p>원재료의 품질까지 관리하는 방법이 있을까??</p>\n<ul>\n<li><strong>원재료 군</strong>을 만들어 파악하자. </li>\n<li>제품에 들어가는 재료군(반죽, 소스, 치즈, 야채, 고기)은 같지만, 지역마다 재료의 구체적인 내용이 조금씩 다르다.</li>\n</ul>\n<ol>\n<li>지역별로 팩토리를 만들어 각 생성 메소드를 구현하는 <code>PizzaingredientFactory</code> 클래스를 만든다.</li>\n<li><code>ReggianoCheese</code>, <code>RedPeppers</code>, <code>ThickCrustDough</code>와 같이 팩토리에서 사용할 원재료 클래스들을 구현한다.</li>\n<li>만든 원재료 공장을 <code>PizzaStore</code> 코드에서 사용하도록 함으로써 하나로 묶어준다.</li>\n</ol>\n<h3 id=\"9-원재료-공장을-만든다\"><a href=\"#9-원재료-공장을-만든다\" class=\"headerlink\" title=\"9. 원재료 공장을 만든다.\"></a>9. 원재료 공장을 만든다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PizzaIngredientFactory</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Dough <span class=\"title\">createDough</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Sauce <span class=\"title\">createSauce</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Cheese <span class=\"title\">createCheese</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> Veggies[] createVeggies();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Pepperoni <span class=\"title\">createPepperoni</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Clams <span class=\"title\">createClams</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NYPizzaingredientFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">PizzaIngredientFactory</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Dough <span class=\"title\">createDough</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThinCrustdough(); &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Sauce <span class=\"title\">createSauce</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MarinaraSauce(); &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Cheese <span class=\"title\">createCheese</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ReggianoCheese(); &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Veggies[] createVeggies() &#123;</span><br><span class=\"line\">\t\tVeggies veggies[] = &#123; <span class=\"keyword\">new</span> Farlic(), <span class=\"keyword\">new</span> Onion(), <span class=\"keyword\">new</span> Mushroom(), <span class=\"keyword\">new</span> RedPepper() &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> veggies;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Pepperoni <span class=\"title\">createPepperoni</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SlicedPepperoni(); &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Clams <span class=\"title\">createClams</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Freshclams(); &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChicagoPizzaingredientFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">PizzaIngredientFactory</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Dough <span class=\"title\">createDough</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThickCrustDough(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sauce <span class=\"title\">createSauce</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PlumTomatoSauce(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Cheese <span class=\"title\">createCheese</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MozzarellaCheese(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Veggies[] createVeggies() &#123;</span><br><span class=\"line\">        Veggies veggies[] = &#123; <span class=\"keyword\">new</span> BlackOlives(), <span class=\"keyword\">new</span> Spinach(), <span class=\"keyword\">new</span> EggPlant()&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> veggies;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Pepperoni <span class=\"title\">createPepperoni</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Slicedpepperoni(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Clams <span class=\"title\">createClams</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FrozenClam(); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-피자마다-재료는-다르다\"><a href=\"#10-피자마다-재료는-다르다\" class=\"headerlink\" title=\"10. 피자마다 재료는 다르다.\"></a>10. 피자마다 재료는 다르다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pizza</span></span>&#123;</span><br><span class=\"line\">String name;</span><br><span class=\"line\">Dough dough;</span><br><span class=\"line\">Sauce sauce;</span><br><span class=\"line\">Veggies veggies[];</span><br><span class=\"line\">Cheese cheese;</span><br><span class=\"line\">Pepperoni pepperoni;</span><br><span class=\"line\">Clams clams;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span></span>; <span class=\"comment\">//추상 메소드로 변경됨.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bake</span><span class=\"params\">()</span></span>&#123; System.out.println(<span class=\"string\">&quot;Bake for 25 minutes at 350&quot;</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cut</span><span class=\"params\">()</span></span>&#123; System.out.println(<span class=\"string\">&quot;Cutting the pizza into diagonal slices&quot;</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">box</span><span class=\"params\">()</span></span>&#123; System.out.println(<span class=\"string\">&quot;Place pizza in official PizzaStore box&quot;</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getname</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name; &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheesePizza</span> <span class=\"keyword\">extends</span> <span class=\"title\">Pizza</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPizzaIngredientFactory ingredientFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CheesePizza</span><span class=\"params\">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.ingredientFactory = ingredientFactory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.dough = ingredientFactory.createDough();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sauce = ingredientFactory.createSauce();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.cheese = ingredientFactory.createCheese();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClamPizza</span> <span class=\"keyword\">extends</span> <span class=\"title\">Pizza</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    PizzaIngredientFactory ingredientFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClamPizza</span><span class=\"params\">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ingredientFactory = ingredientFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dough = ingredientFactory.createDough();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sauce = ingredientFactory.createSauce();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cheese = ingredientFactory.createCheese();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.clams = ingredientFactory.createClams();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"11-피자마다-지역마다-다른-피자를-만든다\"><a href=\"#11-피자마다-지역마다-다른-피자를-만든다\" class=\"headerlink\" title=\"11. 피자마다, 지역마다 다른 피자를 만든다.\"></a>11. 피자마다, 지역마다 다른 피자를 만든다.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NYPizzaStore</span> <span class=\"keyword\">extends</span> <span class=\"title\">PizzaStore</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String type)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPizza pizza = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tPizzaIngredientFactory ingredientFactory = <span class=\"keyword\">new</span> NYPizzaingredientFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;cheese&quot;</span>))&#123;</span><br><span class=\"line\">\t\tpizza = <span class=\"keyword\">new</span> CheesePizza(ingredientFactory);</span><br><span class=\"line\">\t\tpizza.setName(ingredientFactory.NY_STYLE+<span class=\"string\">&quot; Cheese Pizza&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;peper&quot;</span>))&#123;</span><br><span class=\"line\">\t\tpizza = <span class=\"keyword\">new</span> PepperoniPizza(ingredientFactory);</span><br><span class=\"line\">\t\tpizza.setName(ingredientFactory.NY_STYLE+<span class=\"string\">&quot; Pepperoni Pizza&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;clam&quot;</span>))&#123;</span><br><span class=\"line\">\t\tpizza = <span class=\"keyword\">new</span> ClamPizza(ingredientFactory);</span><br><span class=\"line\">\t\tpizza.setName(ingredientFactory.NY_STYLE+<span class=\"string\">&quot; Clam Pizza&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">&quot;veggie&quot;</span>))&#123;</span><br><span class=\"line\">\t\tpizza = <span class=\"keyword\">new</span> VeggiePizza(ingredientFactory);</span><br><span class=\"line\">\t\tpizza.setName(ingredientFactory.NY_STYLE+<span class=\"string\">&quot; Veggie Pizza&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"⛳-프로세스-정리\"><a href=\"#⛳-프로세스-정리\" class=\"headerlink\" title=\"⛳ 프로세스 정리\"></a>⛳ 프로세스 정리</h3><p><img src=\"https://user-images.githubusercontent.com/55419159/139077755-c920f73b-e347-41d4-b1a8-9f0bc5e028fa.jpg\" alt=\"image4\"></p>\n<p>이제 전체적인 흐름은.</p>\n<ol>\n<li><p>뉴욕 피자가게를 만든다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PizzaStore nyPizzaStore = <span class=\"keyword\">new</span> NYPizzaStore();</span><br></pre></td></tr></table></figure></li>\n<li><p>주문을 한다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nyPizzaStore.orderPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>orderPizza 메소드에서는 우선 createPizza() 메소드를 호출한다</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pizza pizza = createPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>createPizza() 메소드가 호출되면 원재료 공장이 돌아가기 시작한다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pizza pizza = <span class=\"keyword\">new</span> CheesePizza(nyIngredientFactory);</span><br></pre></td></tr></table></figure></li>\n<li><p>피자를 준비하는 prepare()메소드가 호출되면 팩토리에 원재료 주문이 들어간다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        dough = nyIngredientFactory.createDough();</span><br><span class=\"line\">        sauce = nyIngredientFactory.createSauce();</span><br><span class=\"line\">        cheese = nyIngredientFactory.createCheese();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>준비단계가 끝나고 orderPizza() 메소드에서는 피자를 굽고, 자르고, 포장한다.</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"💎-요약\"><a href=\"#💎-요약\" class=\"headerlink\" title=\"💎 요약\"></a>💎 요약</h2><h3 id=\"추상-팩토리-패턴\"><a href=\"#추상-팩토리-패턴\" class=\"headerlink\" title=\"추상 팩토리 패턴\"></a>추상 팩토리 패턴</h3><blockquote>\n<p>제품군을 생성하기 위한 <strong>인터페이스</strong>를 생성하고, 그 <strong>인터페이스를 구성</strong>하여 사용할수 있게끔 하는것.</p>\n</blockquote>\n<h3 id=\"추상-메소드-패턴\"><a href=\"#추상-메소드-패턴\" class=\"headerlink\" title=\"추상 메소드 패턴\"></a>추상 메소드 패턴</h3><blockquote>\n<p>하나의 추상클래스에서 <strong>추상 메소드</strong>를 만들고, 서브클래스들이 <strong>그 추상메소드를 구현</strong>하여 인스턴스를 만들게끔 하는것.</p>\n</blockquote>\n"},{"title":"처리율 제한 장치의 설계","toc":true,"toc_sticky":true,"toc_label":"처리율 제한 장치의 설계","toc_icon":"sticky-note","_content":"\n\n# 처리율 제한 장치의 설계\n\n> API 요청횟수가 특정 임계치를 넘어가면 추가로 도달한 요청은 처리를 중단하는 것\n>\n\n---\n\n## 장점\n\n1. DoS공격 방지\n2. 비용절감\n3. 서버 과부하 방지\n\n---\n\n# 처리율 제한 알고리즘\n\n## 토큰 버킷\n    \n    > 토큰을 발급하고 토큰의 갯수 만큼만 API 요청을 버킷에 담음\n    버킷이 가득 찬 경우 API요청은 버려짐(overflow)\n    >\n\n![image](https://user-images.githubusercontent.com/55419159/138881073-2532be82-cc51-4872-a6be-f7e256b1a74e.png)\n\n    - 가장 간단하고 폭넓게 사용됨(아마존 등)\n    - 메모리 효율성 높음\n    - 버킷크기:토큰공급률 비율 튜닝이 관건\n\n---  \n\n## 누출 버킷\n    \n    > 토큰 버킷 알고리즘과 유사하지만 처리율이 고정\n    큐(FIFO)로 구현\n    > \n    \n![image](https://user-images.githubusercontent.com/55419159/138881283-90475661-ca10-481f-a3fb-2e7e3cae0168.png)\n\n\n- 동작방식\n    \n    1. 요청이 도착하면 큐가 가득 차 있는지 확인, 빈자리가 있는 경우 큐에 요청 추가\n    2. 큐가 가득 차있는 경우 새 요청은 버림\n    3. 지정된 시간마다 큐에서 요청을 꺼내어 처리\n    \n    - 토큰 버킷 알고리즘과 유사\n    - 고정된 처리율을 가지고 있어 안정적 출력이 필요한 환경에 적합\n    - 단시간에 많은 처리율이 들어올 경우 취약함\n\n---\n\n## 고정 윈도 카운터\n\n- 동작방식\n    \n    1. 타임라인을 고정된 간격의 윈도로 나누고, 각 윈도마다 카운터를 붙임\n    2. 요청이 접수될 때마다 이 카운터의 값은 1씩 증가함\n    3. 이 카운터 값이 사전에 설정된 임계치에 도달하면 새로운 요청은 \n    새 윈도가 열릴 때 까지 버려짐\n    \n![image](https://user-images.githubusercontent.com/55419159/138881425-aaf0ecc3-a73c-4007-9d36-3c9693f2062f.png)\n \n    - 메모리 효율 좋음\n    - 윈도 경계에서 일시적으로 많은 트래픽이 몰려드는 경우, \n    기대했던 시스템의 처리 한도보다 많은 양의 요청을 처리하게 됨\n\n---\n\n## 이동 윈도 로그\n    \n    > 고정 윈도 카운터 알고리즘의 윈도 경계 부분에서 \n    트래픽이 몰리는 경우를 보완하기 위한 알고리즘\n    > \n    \n- 동작방식\n    \n    1. 요청의 타임스탬프를 추적함\n    타임스탬프는 보통 Redis의 Sorted Set과 같은 정렬 집합 캐시에 보관\n    2. 새 요청이 오면 만료된 타임스탬프는 제거\n    3. 새 요청의 타임 스탬프를 로그에 추가\n    4. 로그의 크기가 허용치보다 같거나 작으면 요청을 시스템에 전달함\n    그렇지 않은 경우 처리는 거부됨\n    \n    - 윈도 알고리즘의 처리율 한도를 넘지 않음\n    - 다량의 메모리 사용, 거부된 요청의 타임스탬프도 보관하기 때문\n\n---\n\n## 이동 윈도 카운터\n    \n    > 고정 윈도 카운터 + 이동 윈도 로그\n    > \n    \n    - 이전 시간대의 평균 처리율에 따라 현재 윈도의 상태를 계산하므로 \n    짧은 시간에 몰리는 트래픽에도 잘 대응\n    - 메모리 효율이 좋음\n    - 직전 시간의 추정치를 계산하기 때문에 기준이 느슨함, But 심각한 건 아님\n\n---\n\n# 프로세스\n\n1. 처리율 제한 규칙은 디스크에 보관한다. \n작업 프로세스는 수시로 규칙을 디스크에서 읽어 캐시에 저장한다.\n2. 클라이언트가 요청을 서버에 보내면 요청은 먼저 처리율 제한 미들웨어에 도달한다.\n카운터 및 마지막 요청의 타임스탬프를 레디스 캐시에서 가져온다. \n    - 해당 요청이 처리율 제한에 걸리지 않은 경우 API서버로 보낸다.\n    - 해당 요청이 처리율 제한에 걸렸다면 429(too many request) 에러를 클라이언트에 보낸다. \n    한편 해당 요청은 그대로 버릴 수도 있고 메시지 큐에 저장할 수도 있다.\n","source":"_posts/가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-처리율-제한-장치의-설계/2021-10-13-처리율-제한-장치의-설계.md","raw":"---\ntitle: \"처리율 제한 장치의 설계\"\ncategories:\n  - 가상면접 사례로 배우는 대규모 시스템 설계기초\ntags:\n  - 시스템설계\n  - 대규모설계\n  - 처리율제한\n  - 토큰버킷\n  - 누출버킷\n  - 이동윈도로그\n  - 고정윈도카운터\ntoc: true\ntoc_sticky: true\ntoc_label: \"처리율 제한 장치의 설계\"\ntoc_icon: \"sticky-note\"\n---\n\n\n# 처리율 제한 장치의 설계\n\n> API 요청횟수가 특정 임계치를 넘어가면 추가로 도달한 요청은 처리를 중단하는 것\n>\n\n---\n\n## 장점\n\n1. DoS공격 방지\n2. 비용절감\n3. 서버 과부하 방지\n\n---\n\n# 처리율 제한 알고리즘\n\n## 토큰 버킷\n    \n    > 토큰을 발급하고 토큰의 갯수 만큼만 API 요청을 버킷에 담음\n    버킷이 가득 찬 경우 API요청은 버려짐(overflow)\n    >\n\n![image](https://user-images.githubusercontent.com/55419159/138881073-2532be82-cc51-4872-a6be-f7e256b1a74e.png)\n\n    - 가장 간단하고 폭넓게 사용됨(아마존 등)\n    - 메모리 효율성 높음\n    - 버킷크기:토큰공급률 비율 튜닝이 관건\n\n---  \n\n## 누출 버킷\n    \n    > 토큰 버킷 알고리즘과 유사하지만 처리율이 고정\n    큐(FIFO)로 구현\n    > \n    \n![image](https://user-images.githubusercontent.com/55419159/138881283-90475661-ca10-481f-a3fb-2e7e3cae0168.png)\n\n\n- 동작방식\n    \n    1. 요청이 도착하면 큐가 가득 차 있는지 확인, 빈자리가 있는 경우 큐에 요청 추가\n    2. 큐가 가득 차있는 경우 새 요청은 버림\n    3. 지정된 시간마다 큐에서 요청을 꺼내어 처리\n    \n    - 토큰 버킷 알고리즘과 유사\n    - 고정된 처리율을 가지고 있어 안정적 출력이 필요한 환경에 적합\n    - 단시간에 많은 처리율이 들어올 경우 취약함\n\n---\n\n## 고정 윈도 카운터\n\n- 동작방식\n    \n    1. 타임라인을 고정된 간격의 윈도로 나누고, 각 윈도마다 카운터를 붙임\n    2. 요청이 접수될 때마다 이 카운터의 값은 1씩 증가함\n    3. 이 카운터 값이 사전에 설정된 임계치에 도달하면 새로운 요청은 \n    새 윈도가 열릴 때 까지 버려짐\n    \n![image](https://user-images.githubusercontent.com/55419159/138881425-aaf0ecc3-a73c-4007-9d36-3c9693f2062f.png)\n \n    - 메모리 효율 좋음\n    - 윈도 경계에서 일시적으로 많은 트래픽이 몰려드는 경우, \n    기대했던 시스템의 처리 한도보다 많은 양의 요청을 처리하게 됨\n\n---\n\n## 이동 윈도 로그\n    \n    > 고정 윈도 카운터 알고리즘의 윈도 경계 부분에서 \n    트래픽이 몰리는 경우를 보완하기 위한 알고리즘\n    > \n    \n- 동작방식\n    \n    1. 요청의 타임스탬프를 추적함\n    타임스탬프는 보통 Redis의 Sorted Set과 같은 정렬 집합 캐시에 보관\n    2. 새 요청이 오면 만료된 타임스탬프는 제거\n    3. 새 요청의 타임 스탬프를 로그에 추가\n    4. 로그의 크기가 허용치보다 같거나 작으면 요청을 시스템에 전달함\n    그렇지 않은 경우 처리는 거부됨\n    \n    - 윈도 알고리즘의 처리율 한도를 넘지 않음\n    - 다량의 메모리 사용, 거부된 요청의 타임스탬프도 보관하기 때문\n\n---\n\n## 이동 윈도 카운터\n    \n    > 고정 윈도 카운터 + 이동 윈도 로그\n    > \n    \n    - 이전 시간대의 평균 처리율에 따라 현재 윈도의 상태를 계산하므로 \n    짧은 시간에 몰리는 트래픽에도 잘 대응\n    - 메모리 효율이 좋음\n    - 직전 시간의 추정치를 계산하기 때문에 기준이 느슨함, But 심각한 건 아님\n\n---\n\n# 프로세스\n\n1. 처리율 제한 규칙은 디스크에 보관한다. \n작업 프로세스는 수시로 규칙을 디스크에서 읽어 캐시에 저장한다.\n2. 클라이언트가 요청을 서버에 보내면 요청은 먼저 처리율 제한 미들웨어에 도달한다.\n카운터 및 마지막 요청의 타임스탬프를 레디스 캐시에서 가져온다. \n    - 해당 요청이 처리율 제한에 걸리지 않은 경우 API서버로 보낸다.\n    - 해당 요청이 처리율 제한에 걸렸다면 429(too many request) 에러를 클라이언트에 보낸다. \n    한편 해당 요청은 그대로 버릴 수도 있고 메시지 큐에 저장할 수도 있다.\n","slug":"가상면접-사례로-배우는-대규모-시스템-설계기초/2021-10-13-처리율-제한-장치의-설계/2021-10-13-처리율-제한-장치의-설계","published":1,"date":"2021-10-26T12:57:04.929Z","updated":"2021-10-26T12:57:04.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvelzqhc001agcau4hd2c8t5","content":"<h1 id=\"처리율-제한-장치의-설계\"><a href=\"#처리율-제한-장치의-설계\" class=\"headerlink\" title=\"처리율 제한 장치의 설계\"></a>처리율 제한 장치의 설계</h1><blockquote>\n<p>API 요청횟수가 특정 임계치를 넘어가면 추가로 도달한 요청은 처리를 중단하는 것</p>\n</blockquote>\n<hr>\n<h2 id=\"장점\"><a href=\"#장점\" class=\"headerlink\" title=\"장점\"></a>장점</h2><ol>\n<li>DoS공격 방지</li>\n<li>비용절감</li>\n<li>서버 과부하 방지</li>\n</ol>\n<hr>\n<h1 id=\"처리율-제한-알고리즘\"><a href=\"#처리율-제한-알고리즘\" class=\"headerlink\" title=\"처리율 제한 알고리즘\"></a>처리율 제한 알고리즘</h1><h2 id=\"토큰-버킷\"><a href=\"#토큰-버킷\" class=\"headerlink\" title=\"토큰 버킷\"></a>토큰 버킷</h2><pre><code>&gt; 토큰을 발급하고 토큰의 갯수 만큼만 API 요청을 버킷에 담음\n버킷이 가득 찬 경우 API요청은 버려짐(overflow)\n&gt;\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138881073-2532be82-cc51-4872-a6be-f7e256b1a74e.png\" alt=\"image\"></p>\n<pre><code>- 가장 간단하고 폭넓게 사용됨(아마존 등)\n- 메모리 효율성 높음\n- 버킷크기:토큰공급률 비율 튜닝이 관건\n</code></pre>\n<hr>\n<h2 id=\"누출-버킷\"><a href=\"#누출-버킷\" class=\"headerlink\" title=\"누출 버킷\"></a>누출 버킷</h2><pre><code>&gt; 토큰 버킷 알고리즘과 유사하지만 처리율이 고정\n큐(FIFO)로 구현\n&gt; \n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138881283-90475661-ca10-481f-a3fb-2e7e3cae0168.png\" alt=\"image\"></p>\n<ul>\n<li>동작방식<ol>\n<li>요청이 도착하면 큐가 가득 차 있는지 확인, 빈자리가 있는 경우 큐에 요청 추가</li>\n<li>큐가 가득 차있는 경우 새 요청은 버림</li>\n<li>지정된 시간마다 큐에서 요청을 꺼내어 처리</li>\n</ol>\n<ul>\n<li>토큰 버킷 알고리즘과 유사</li>\n<li>고정된 처리율을 가지고 있어 안정적 출력이 필요한 환경에 적합</li>\n<li>단시간에 많은 처리율이 들어올 경우 취약함</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"고정-윈도-카운터\"><a href=\"#고정-윈도-카운터\" class=\"headerlink\" title=\"고정 윈도 카운터\"></a>고정 윈도 카운터</h2><ul>\n<li>동작방식<ol>\n<li>타임라인을 고정된 간격의 윈도로 나누고, 각 윈도마다 카운터를 붙임</li>\n<li>요청이 접수될 때마다 이 카운터의 값은 1씩 증가함</li>\n<li>이 카운터 값이 사전에 설정된 임계치에 도달하면 새로운 요청은<br>새 윈도가 열릴 때 까지 버려짐</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138881425-aaf0ecc3-a73c-4007-9d36-3c9693f2062f.png\" alt=\"image\"></p>\n<pre><code>- 메모리 효율 좋음\n- 윈도 경계에서 일시적으로 많은 트래픽이 몰려드는 경우, \n기대했던 시스템의 처리 한도보다 많은 양의 요청을 처리하게 됨\n</code></pre>\n<hr>\n<h2 id=\"이동-윈도-로그\"><a href=\"#이동-윈도-로그\" class=\"headerlink\" title=\"이동 윈도 로그\"></a>이동 윈도 로그</h2><pre><code>&gt; 고정 윈도 카운터 알고리즘의 윈도 경계 부분에서 \n트래픽이 몰리는 경우를 보완하기 위한 알고리즘\n&gt; \n</code></pre>\n<ul>\n<li>동작방식<ol>\n<li>요청의 타임스탬프를 추적함<br>타임스탬프는 보통 Redis의 Sorted Set과 같은 정렬 집합 캐시에 보관</li>\n<li>새 요청이 오면 만료된 타임스탬프는 제거</li>\n<li>새 요청의 타임 스탬프를 로그에 추가</li>\n<li>로그의 크기가 허용치보다 같거나 작으면 요청을 시스템에 전달함<br>그렇지 않은 경우 처리는 거부됨</li>\n</ol>\n<ul>\n<li>윈도 알고리즘의 처리율 한도를 넘지 않음</li>\n<li>다량의 메모리 사용, 거부된 요청의 타임스탬프도 보관하기 때문</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"이동-윈도-카운터\"><a href=\"#이동-윈도-카운터\" class=\"headerlink\" title=\"이동 윈도 카운터\"></a>이동 윈도 카운터</h2><pre><code>&gt; 고정 윈도 카운터 + 이동 윈도 로그\n&gt; \n\n- 이전 시간대의 평균 처리율에 따라 현재 윈도의 상태를 계산하므로 \n짧은 시간에 몰리는 트래픽에도 잘 대응\n- 메모리 효율이 좋음\n- 직전 시간의 추정치를 계산하기 때문에 기준이 느슨함, But 심각한 건 아님\n</code></pre>\n<hr>\n<h1 id=\"프로세스\"><a href=\"#프로세스\" class=\"headerlink\" title=\"프로세스\"></a>프로세스</h1><ol>\n<li>처리율 제한 규칙은 디스크에 보관한다.<br>작업 프로세스는 수시로 규칙을 디스크에서 읽어 캐시에 저장한다.</li>\n<li>클라이언트가 요청을 서버에 보내면 요청은 먼저 처리율 제한 미들웨어에 도달한다.<br>카운터 및 마지막 요청의 타임스탬프를 레디스 캐시에서 가져온다. <ul>\n<li>해당 요청이 처리율 제한에 걸리지 않은 경우 API서버로 보낸다.</li>\n<li>해당 요청이 처리율 제한에 걸렸다면 429(too many request) 에러를 클라이언트에 보낸다.<br>한편 해당 요청은 그대로 버릴 수도 있고 메시지 큐에 저장할 수도 있다.</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"처리율-제한-장치의-설계\"><a href=\"#처리율-제한-장치의-설계\" class=\"headerlink\" title=\"처리율 제한 장치의 설계\"></a>처리율 제한 장치의 설계</h1><blockquote>\n<p>API 요청횟수가 특정 임계치를 넘어가면 추가로 도달한 요청은 처리를 중단하는 것</p>\n</blockquote>\n<hr>\n<h2 id=\"장점\"><a href=\"#장점\" class=\"headerlink\" title=\"장점\"></a>장점</h2><ol>\n<li>DoS공격 방지</li>\n<li>비용절감</li>\n<li>서버 과부하 방지</li>\n</ol>\n<hr>\n<h1 id=\"처리율-제한-알고리즘\"><a href=\"#처리율-제한-알고리즘\" class=\"headerlink\" title=\"처리율 제한 알고리즘\"></a>처리율 제한 알고리즘</h1><h2 id=\"토큰-버킷\"><a href=\"#토큰-버킷\" class=\"headerlink\" title=\"토큰 버킷\"></a>토큰 버킷</h2><pre><code>&gt; 토큰을 발급하고 토큰의 갯수 만큼만 API 요청을 버킷에 담음\n버킷이 가득 찬 경우 API요청은 버려짐(overflow)\n&gt;\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138881073-2532be82-cc51-4872-a6be-f7e256b1a74e.png\" alt=\"image\"></p>\n<pre><code>- 가장 간단하고 폭넓게 사용됨(아마존 등)\n- 메모리 효율성 높음\n- 버킷크기:토큰공급률 비율 튜닝이 관건\n</code></pre>\n<hr>\n<h2 id=\"누출-버킷\"><a href=\"#누출-버킷\" class=\"headerlink\" title=\"누출 버킷\"></a>누출 버킷</h2><pre><code>&gt; 토큰 버킷 알고리즘과 유사하지만 처리율이 고정\n큐(FIFO)로 구현\n&gt; \n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138881283-90475661-ca10-481f-a3fb-2e7e3cae0168.png\" alt=\"image\"></p>\n<ul>\n<li>동작방식<ol>\n<li>요청이 도착하면 큐가 가득 차 있는지 확인, 빈자리가 있는 경우 큐에 요청 추가</li>\n<li>큐가 가득 차있는 경우 새 요청은 버림</li>\n<li>지정된 시간마다 큐에서 요청을 꺼내어 처리</li>\n</ol>\n<ul>\n<li>토큰 버킷 알고리즘과 유사</li>\n<li>고정된 처리율을 가지고 있어 안정적 출력이 필요한 환경에 적합</li>\n<li>단시간에 많은 처리율이 들어올 경우 취약함</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"고정-윈도-카운터\"><a href=\"#고정-윈도-카운터\" class=\"headerlink\" title=\"고정 윈도 카운터\"></a>고정 윈도 카운터</h2><ul>\n<li>동작방식<ol>\n<li>타임라인을 고정된 간격의 윈도로 나누고, 각 윈도마다 카운터를 붙임</li>\n<li>요청이 접수될 때마다 이 카운터의 값은 1씩 증가함</li>\n<li>이 카운터 값이 사전에 설정된 임계치에 도달하면 새로운 요청은<br>새 윈도가 열릴 때 까지 버려짐</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/138881425-aaf0ecc3-a73c-4007-9d36-3c9693f2062f.png\" alt=\"image\"></p>\n<pre><code>- 메모리 효율 좋음\n- 윈도 경계에서 일시적으로 많은 트래픽이 몰려드는 경우, \n기대했던 시스템의 처리 한도보다 많은 양의 요청을 처리하게 됨\n</code></pre>\n<hr>\n<h2 id=\"이동-윈도-로그\"><a href=\"#이동-윈도-로그\" class=\"headerlink\" title=\"이동 윈도 로그\"></a>이동 윈도 로그</h2><pre><code>&gt; 고정 윈도 카운터 알고리즘의 윈도 경계 부분에서 \n트래픽이 몰리는 경우를 보완하기 위한 알고리즘\n&gt; \n</code></pre>\n<ul>\n<li>동작방식<ol>\n<li>요청의 타임스탬프를 추적함<br>타임스탬프는 보통 Redis의 Sorted Set과 같은 정렬 집합 캐시에 보관</li>\n<li>새 요청이 오면 만료된 타임스탬프는 제거</li>\n<li>새 요청의 타임 스탬프를 로그에 추가</li>\n<li>로그의 크기가 허용치보다 같거나 작으면 요청을 시스템에 전달함<br>그렇지 않은 경우 처리는 거부됨</li>\n</ol>\n<ul>\n<li>윈도 알고리즘의 처리율 한도를 넘지 않음</li>\n<li>다량의 메모리 사용, 거부된 요청의 타임스탬프도 보관하기 때문</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"이동-윈도-카운터\"><a href=\"#이동-윈도-카운터\" class=\"headerlink\" title=\"이동 윈도 카운터\"></a>이동 윈도 카운터</h2><pre><code>&gt; 고정 윈도 카운터 + 이동 윈도 로그\n&gt; \n\n- 이전 시간대의 평균 처리율에 따라 현재 윈도의 상태를 계산하므로 \n짧은 시간에 몰리는 트래픽에도 잘 대응\n- 메모리 효율이 좋음\n- 직전 시간의 추정치를 계산하기 때문에 기준이 느슨함, But 심각한 건 아님\n</code></pre>\n<hr>\n<h1 id=\"프로세스\"><a href=\"#프로세스\" class=\"headerlink\" title=\"프로세스\"></a>프로세스</h1><ol>\n<li>처리율 제한 규칙은 디스크에 보관한다.<br>작업 프로세스는 수시로 규칙을 디스크에서 읽어 캐시에 저장한다.</li>\n<li>클라이언트가 요청을 서버에 보내면 요청은 먼저 처리율 제한 미들웨어에 도달한다.<br>카운터 및 마지막 요청의 타임스탬프를 레디스 캐시에서 가져온다. <ul>\n<li>해당 요청이 처리율 제한에 걸리지 않은 경우 API서버로 보낸다.</li>\n<li>해당 요청이 처리율 제한에 걸렸다면 429(too many request) 에러를 클라이언트에 보낸다.<br>한편 해당 요청은 그대로 버릴 수도 있고 메시지 큐에 저장할 수도 있다.</li>\n</ul>\n</li>\n</ol>\n"},{"title":"m1 맥에서 144hz 롤하기","toc":false,"toc_label":"m1 맥에서 144hz 롤하기","_content":"\n\n> 결론부터 말하면 롤 **설정 값**을 바꿔주면 **m1 macbook Air**로 *144hz 방어*가 가능하다.\n>\n\n![](https://user-images.githubusercontent.com/55419159/139523580-e90497ce-2cab-444b-b137-c17ae0875f05.png)\n\n\n## 테스트 스펙\n- macbook air m1(2020) 8g 256gb (깡통 맥북에어 옵션)\n- qhd 165hz 외장모니터\n\n<br>\n\n\n## 방법\n\n### 1. finder - '응용 프로그램' - '리그오브레전드' 오른쪽클릭 '패키지 내용보기'\n\n   ![](https://user-images.githubusercontent.com/55419159/139523689-d613a586-55f2-426c-9e10-09e776c04450.png)\n\n<br>\n\n### 2. 아래의 경로로 들어감\n- LoL/Config/game.cfg\n- 텍스트 에디터로 열기\n\n![](https://user-images.githubusercontent.com/55419159/139523809-a896357e-4c3b-413a-8474-6fc4ec9ecca4.png)\n\n<br>\n\n### 3. [General] 마지막 항목에 \"MetalBetaTest=true\" 추가\n\n![](https://user-images.githubusercontent.com/55419159/139523849-60136e47-3f6b-4ae4-b22d-15f066f4f16b.png)\n\n\n## 결론\n\n- 상옵기준 매우 쾌적하게 플레이 가능 (심지어 발열도 없다.)\n- 심지어 한타중에도 프레임드랍이 없다...🤔\n- 게임하려고 맥북사는 사람들은 없겠지만 롤하려고 맥북은 사도 될지도...?\n\n<br>\n\n참고 : [Mac on Metal Beta Testing](![](https://devtrackers.gg/leagueoflegends/p/c1948cdc-mac-on-metal-beta-testing)\n)\n","source":"_posts/게임/2021-10-30-m1-league-of-legend.md","raw":"---\ntitle: \"m1 맥에서 144hz 롤하기\"\ncategories:\n  - 게임 \ntags:\n  - m1\n  - 롤\n  - league of legend\n  - mac on metal\ntoc: false\ntoc_label: \"m1 맥에서 144hz 롤하기\"\n---\n\n\n> 결론부터 말하면 롤 **설정 값**을 바꿔주면 **m1 macbook Air**로 *144hz 방어*가 가능하다.\n>\n\n![](https://user-images.githubusercontent.com/55419159/139523580-e90497ce-2cab-444b-b137-c17ae0875f05.png)\n\n\n## 테스트 스펙\n- macbook air m1(2020) 8g 256gb (깡통 맥북에어 옵션)\n- qhd 165hz 외장모니터\n\n<br>\n\n\n## 방법\n\n### 1. finder - '응용 프로그램' - '리그오브레전드' 오른쪽클릭 '패키지 내용보기'\n\n   ![](https://user-images.githubusercontent.com/55419159/139523689-d613a586-55f2-426c-9e10-09e776c04450.png)\n\n<br>\n\n### 2. 아래의 경로로 들어감\n- LoL/Config/game.cfg\n- 텍스트 에디터로 열기\n\n![](https://user-images.githubusercontent.com/55419159/139523809-a896357e-4c3b-413a-8474-6fc4ec9ecca4.png)\n\n<br>\n\n### 3. [General] 마지막 항목에 \"MetalBetaTest=true\" 추가\n\n![](https://user-images.githubusercontent.com/55419159/139523849-60136e47-3f6b-4ae4-b22d-15f066f4f16b.png)\n\n\n## 결론\n\n- 상옵기준 매우 쾌적하게 플레이 가능 (심지어 발열도 없다.)\n- 심지어 한타중에도 프레임드랍이 없다...🤔\n- 게임하려고 맥북사는 사람들은 없겠지만 롤하려고 맥북은 사도 될지도...?\n\n<br>\n\n참고 : [Mac on Metal Beta Testing](![](https://devtrackers.gg/leagueoflegends/p/c1948cdc-mac-on-metal-beta-testing)\n)\n","slug":"게임/2021-10-30-m1-league-of-legend","published":1,"date":"2021-10-30T07:18:02.729Z","updated":"2021-10-30T07:18:02.729Z","_id":"ckvelzqhn001ogcau0spbg8v4","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>결론부터 말하면 롤 <strong>설정 값</strong>을 바꿔주면 <strong>m1 macbook Air</strong>로 <em>144hz 방어</em>가 가능하다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/139523580-e90497ce-2cab-444b-b137-c17ae0875f05.png\"></p>\n<h2 id=\"테스트-스펙\"><a href=\"#테스트-스펙\" class=\"headerlink\" title=\"테스트 스펙\"></a>테스트 스펙</h2><ul>\n<li>macbook air m1(2020) 8g 256gb (깡통 맥북에어 옵션)</li>\n<li>qhd 165hz 외장모니터</li>\n</ul>\n<br>\n\n\n<h2 id=\"방법\"><a href=\"#방법\" class=\"headerlink\" title=\"방법\"></a>방법</h2><h3 id=\"1-finder-‘응용-프로그램’-‘리그오브레전드’-오른쪽클릭-‘패키지-내용보기’\"><a href=\"#1-finder-‘응용-프로그램’-‘리그오브레전드’-오른쪽클릭-‘패키지-내용보기’\" class=\"headerlink\" title=\"1. finder - ‘응용 프로그램’ - ‘리그오브레전드’ 오른쪽클릭 ‘패키지 내용보기’\"></a>1. finder - ‘응용 프로그램’ - ‘리그오브레전드’ 오른쪽클릭 ‘패키지 내용보기’</h3><p>   <img src=\"https://user-images.githubusercontent.com/55419159/139523689-d613a586-55f2-426c-9e10-09e776c04450.png\"></p>\n<br>\n\n<h3 id=\"2-아래의-경로로-들어감\"><a href=\"#2-아래의-경로로-들어감\" class=\"headerlink\" title=\"2. 아래의 경로로 들어감\"></a>2. 아래의 경로로 들어감</h3><ul>\n<li>LoL/Config/game.cfg</li>\n<li>텍스트 에디터로 열기</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/139523809-a896357e-4c3b-413a-8474-6fc4ec9ecca4.png\"></p>\n<br>\n\n<h3 id=\"3-General-마지막-항목에-“MetalBetaTest-true”-추가\"><a href=\"#3-General-마지막-항목에-“MetalBetaTest-true”-추가\" class=\"headerlink\" title=\"3. [General] 마지막 항목에 “MetalBetaTest=true” 추가\"></a>3. [General] 마지막 항목에 “MetalBetaTest=true” 추가</h3><p><img src=\"https://user-images.githubusercontent.com/55419159/139523849-60136e47-3f6b-4ae4-b22d-15f066f4f16b.png\"></p>\n<h2 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h2><ul>\n<li>상옵기준 매우 쾌적하게 플레이 가능 (심지어 발열도 없다.)</li>\n<li>심지어 한타중에도 프레임드랍이 없다…🤔</li>\n<li>게임하려고 맥북사는 사람들은 없겠지만 롤하려고 맥북은 사도 될지도…?</li>\n</ul>\n<br>\n\n<p>참고 : <a href=\"!%5B%5D(https://devtrackers.gg/leagueoflegends/p/c1948cdc-mac-on-metal-beta-testing)\">Mac on Metal Beta Testing</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>결론부터 말하면 롤 <strong>설정 값</strong>을 바꿔주면 <strong>m1 macbook Air</strong>로 <em>144hz 방어</em>가 가능하다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/139523580-e90497ce-2cab-444b-b137-c17ae0875f05.png\"></p>\n<h2 id=\"테스트-스펙\"><a href=\"#테스트-스펙\" class=\"headerlink\" title=\"테스트 스펙\"></a>테스트 스펙</h2><ul>\n<li>macbook air m1(2020) 8g 256gb (깡통 맥북에어 옵션)</li>\n<li>qhd 165hz 외장모니터</li>\n</ul>\n<br>\n\n\n<h2 id=\"방법\"><a href=\"#방법\" class=\"headerlink\" title=\"방법\"></a>방법</h2><h3 id=\"1-finder-‘응용-프로그램’-‘리그오브레전드’-오른쪽클릭-‘패키지-내용보기’\"><a href=\"#1-finder-‘응용-프로그램’-‘리그오브레전드’-오른쪽클릭-‘패키지-내용보기’\" class=\"headerlink\" title=\"1. finder - ‘응용 프로그램’ - ‘리그오브레전드’ 오른쪽클릭 ‘패키지 내용보기’\"></a>1. finder - ‘응용 프로그램’ - ‘리그오브레전드’ 오른쪽클릭 ‘패키지 내용보기’</h3><p>   <img src=\"https://user-images.githubusercontent.com/55419159/139523689-d613a586-55f2-426c-9e10-09e776c04450.png\"></p>\n<br>\n\n<h3 id=\"2-아래의-경로로-들어감\"><a href=\"#2-아래의-경로로-들어감\" class=\"headerlink\" title=\"2. 아래의 경로로 들어감\"></a>2. 아래의 경로로 들어감</h3><ul>\n<li>LoL/Config/game.cfg</li>\n<li>텍스트 에디터로 열기</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/55419159/139523809-a896357e-4c3b-413a-8474-6fc4ec9ecca4.png\"></p>\n<br>\n\n<h3 id=\"3-General-마지막-항목에-“MetalBetaTest-true”-추가\"><a href=\"#3-General-마지막-항목에-“MetalBetaTest-true”-추가\" class=\"headerlink\" title=\"3. [General] 마지막 항목에 “MetalBetaTest=true” 추가\"></a>3. [General] 마지막 항목에 “MetalBetaTest=true” 추가</h3><p><img src=\"https://user-images.githubusercontent.com/55419159/139523849-60136e47-3f6b-4ae4-b22d-15f066f4f16b.png\"></p>\n<h2 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h2><ul>\n<li>상옵기준 매우 쾌적하게 플레이 가능 (심지어 발열도 없다.)</li>\n<li>심지어 한타중에도 프레임드랍이 없다…🤔</li>\n<li>게임하려고 맥북사는 사람들은 없겠지만 롤하려고 맥북은 사도 될지도…?</li>\n</ul>\n<br>\n\n<p>참고 : <a href=\"!%5B%5D(https://devtrackers.gg/leagueoflegends/p/c1948cdc-mac-on-metal-beta-testing)\">Mac on Metal Beta Testing</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckvelzqfw0000gcau9y942anm","category_id":"ckvelzqg60001gcauasp526dm","_id":"ckvelzqgd0004gcau9m57eg0h"},{"post_id":"ckvelzqgl0007gcaue91fdu2a","category_id":"ckvelzqg60001gcauasp526dm","_id":"ckvelzqgt000cgcaufm7h1hcm"},{"post_id":"ckvelzqgn0008gcau27b17xue","category_id":"ckvelzqg60001gcauasp526dm","_id":"ckvelzqgt000dgcau2hp87dbr"},{"post_id":"ckvelzqgp000agcauei1h4ufn","category_id":"ckvelzqg60001gcauasp526dm","_id":"ckvelzqgu000ggcaugpc3eose"},{"post_id":"ckvelzqgs000bgcau6zfca07a","category_id":"ckvds1cc700010mau47sg4rwq","_id":"ckvelzqgu000igcaudh87dcpo"},{"post_id":"ckvelzqh4000xgcau865e32x9","category_id":"ckvelzqg60001gcauasp526dm","_id":"ckvelzqh80010gcauczvjhnda"},{"post_id":"ckvelzqh6000ygcau39uk0m4i","category_id":"ckvds1cc700010mau47sg4rwq","_id":"ckvelzqh80011gcaubmvegyc6"},{"post_id":"ckvelzqhc001agcau4hd2c8t5","category_id":"ckvelzqg60001gcauasp526dm","_id":"ckvelzqhe001cgcauhl80buwk"},{"post_id":"ckvelzqhn001ogcau0spbg8v4","category_id":"ckvelzqhq001pgcaufnrthkhc","_id":"ckvelzqhx001sgcaudaol75rm"}],"PostTag":[{"post_id":"ckvelzqfw0000gcau9y942anm","tag_id":"ckvelzqg70002gcaug0gfcqxx","_id":"ckvelzqge0005gcau4d1wfd0w"},{"post_id":"ckvelzqfw0000gcau9y942anm","tag_id":"ckvelzqgc0003gcaub9j74enu","_id":"ckvelzqgf0006gcaugmra2t7d"},{"post_id":"ckvelzqgs000bgcau6zfca07a","tag_id":"ckvds1cc900020mauf76bbmwn","_id":"ckvelzqgu000fgcaugmcw9lwu"},{"post_id":"ckvelzqgs000bgcau6zfca07a","tag_id":"ckvds1cca00030maubzl89fwn","_id":"ckvelzqgu000hgcaud1rtg1g1"},{"post_id":"ckvelzqgl0007gcaue91fdu2a","tag_id":"ckvelzqg70002gcaug0gfcqxx","_id":"ckvelzqgv000kgcau6udke1uk"},{"post_id":"ckvelzqgl0007gcaue91fdu2a","tag_id":"ckvelzqgc0003gcaub9j74enu","_id":"ckvelzqgv000lgcaufo19c7ee"},{"post_id":"ckvelzqgl0007gcaue91fdu2a","tag_id":"ckvelzqgo0009gcau8ynw8cjl","_id":"ckvelzqgw000ngcau4c6idoiw"},{"post_id":"ckvelzqgn0008gcau27b17xue","tag_id":"ckvelzqg70002gcaug0gfcqxx","_id":"ckvelzqgw000ogcau5hcf28fb"},{"post_id":"ckvelzqgn0008gcau27b17xue","tag_id":"ckvelzqgc0003gcaub9j74enu","_id":"ckvelzqgx000pgcau1ad9gu1i"},{"post_id":"ckvelzqgn0008gcau27b17xue","tag_id":"ckvelzqgt000egcau6w1fa0kc","_id":"ckvelzqgx000rgcau1exud4oq"},{"post_id":"ckvelzqgp000agcauei1h4ufn","tag_id":"ckvelzqg70002gcaug0gfcqxx","_id":"ckvelzqgx000sgcauewm33214"},{"post_id":"ckvelzqgp000agcauei1h4ufn","tag_id":"ckvelzqgc0003gcaub9j74enu","_id":"ckvelzqgx000tgcauhu0t0yhj"},{"post_id":"ckvelzqgp000agcauei1h4ufn","tag_id":"ckvelzqgu000jgcaugd8o4odq","_id":"ckvelzqgx000ugcaual9j9ef5"},{"post_id":"ckvelzqgp000agcauei1h4ufn","tag_id":"ckvelzqgw000mgcau3kd0dq4r","_id":"ckvelzqgy000vgcau9w4xh8uo"},{"post_id":"ckvelzqgp000agcauei1h4ufn","tag_id":"ckvelzqgx000qgcau6y6g60od","_id":"ckvelzqgy000wgcaufg7dduft"},{"post_id":"ckvelzqh4000xgcau865e32x9","tag_id":"ckvelzqg70002gcaug0gfcqxx","_id":"ckvelzqh90014gcaudh8o12p0"},{"post_id":"ckvelzqh4000xgcau865e32x9","tag_id":"ckvelzqgc0003gcaub9j74enu","_id":"ckvelzqh90015gcauhdf236dv"},{"post_id":"ckvelzqh4000xgcau865e32x9","tag_id":"ckvelzqh7000zgcaufsy3e2qf","_id":"ckvelzqh90016gcauew9k1imn"},{"post_id":"ckvelzqh4000xgcau865e32x9","tag_id":"ckvelzqh80012gcau9l1scrq9","_id":"ckvelzqh90017gcaubs6a2hj9"},{"post_id":"ckvelzqh6000ygcau39uk0m4i","tag_id":"ckvds1cc900020mauf76bbmwn","_id":"ckvelzqh90018gcau61tofqfg"},{"post_id":"ckvelzqh6000ygcau39uk0m4i","tag_id":"ckvelzqh90013gcauhs1y2sob","_id":"ckvelzqh90019gcau8qr7fdv3"},{"post_id":"ckvelzqhc001agcau4hd2c8t5","tag_id":"ckvelzqg70002gcaug0gfcqxx","_id":"ckvelzqhf001hgcau5qf94snb"},{"post_id":"ckvelzqhc001agcau4hd2c8t5","tag_id":"ckvelzqgc0003gcaub9j74enu","_id":"ckvelzqhf001igcau5qmzgg50"},{"post_id":"ckvelzqhc001agcau4hd2c8t5","tag_id":"ckvelzqhd001bgcauglc7c5db","_id":"ckvelzqhf001jgcaue4g1ch65"},{"post_id":"ckvelzqhc001agcau4hd2c8t5","tag_id":"ckvelzqhe001dgcaucp70g95t","_id":"ckvelzqhf001kgcaug3lm3u67"},{"post_id":"ckvelzqhc001agcau4hd2c8t5","tag_id":"ckvelzqhe001egcau1jhgbb9g","_id":"ckvelzqhf001lgcaucnvn4i6r"},{"post_id":"ckvelzqhc001agcau4hd2c8t5","tag_id":"ckvelzqhf001fgcau6p6e673o","_id":"ckvelzqhg001mgcauasecgxa7"},{"post_id":"ckvelzqhc001agcau4hd2c8t5","tag_id":"ckvelzqhf001ggcau4syn73wi","_id":"ckvelzqhg001ngcauc72l62ix"},{"post_id":"ckvelzqhn001ogcau0spbg8v4","tag_id":"ckvelzqhr001qgcaucepwddbq","_id":"ckvelzqhz001vgcau59mg9elw"},{"post_id":"ckvelzqhn001ogcau0spbg8v4","tag_id":"ckvelzqhw001rgcau8ggk1maw","_id":"ckvelzqhz001wgcau404f4py3"},{"post_id":"ckvelzqhn001ogcau0spbg8v4","tag_id":"ckvelzqhx001tgcau450dgncx","_id":"ckvelzqhz001xgcaueo643yhf"},{"post_id":"ckvelzqhn001ogcau0spbg8v4","tag_id":"ckvelzqhy001ugcau0hxp5b57","_id":"ckvelzqhz001ygcaue2rceoja"}],"Tag":[{"name":"디자인패턴","_id":"ckvds1cc900020mauf76bbmwn"},{"name":"싱글톤","_id":"ckvds1cca00030maubzl89fwn"},{"name":"시스템설계","_id":"ckvelzqg70002gcaug0gfcqxx"},{"name":"대규모설계","_id":"ckvelzqgc0003gcaub9j74enu"},{"name":"키값저장소","_id":"ckvelzqgo0009gcau8ynw8cjl"},{"name":"면접","_id":"ckvelzqgt000egcau6w1fa0kc"},{"name":"DB설계","_id":"ckvelzqgu000jgcaugd8o4odq"},{"name":"서버설계","_id":"ckvelzqgw000mgcau3kd0dq4r"},{"name":"분산설계","_id":"ckvelzqgx000qgcau6y6g60od"},{"name":"안정해시","_id":"ckvelzqh7000zgcaufsy3e2qf"},{"name":"가상노드","_id":"ckvelzqh80012gcau9l1scrq9"},{"name":"팩토리","_id":"ckvelzqh90013gcauhs1y2sob"},{"name":"처리율제한","_id":"ckvelzqhd001bgcauglc7c5db"},{"name":"토큰버킷","_id":"ckvelzqhe001dgcaucp70g95t"},{"name":"누출버킷","_id":"ckvelzqhe001egcau1jhgbb9g"},{"name":"이동윈도로그","_id":"ckvelzqhf001fgcau6p6e673o"},{"name":"고정윈도카운터","_id":"ckvelzqhf001ggcau4syn73wi"},{"name":"m1","_id":"ckvelzqhr001qgcaucepwddbq"},{"name":"롤","_id":"ckvelzqhw001rgcau8ggk1maw"},{"name":"league of legend","_id":"ckvelzqhx001tgcau450dgncx"},{"name":"mac on metal","_id":"ckvelzqhy001ugcau0hxp5b57"}]}}