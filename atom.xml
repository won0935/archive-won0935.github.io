<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jay&#39;s Note</title>
  
  
  <link href="http://won0935.github.io/atom.xml" rel="self"/>
  
  <link href="http://won0935.github.io/"/>
  <updated>2021-11-28T09:11:50.599Z</updated>
  <id>http://won0935.github.io/</id>
  
  <author>
    <name>Song Jae-won, Jay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka 란</title>
    <link href="http://won0935.github.io/2021/11/28/MessageQueue/Kafka/AboutKafka/"/>
    <id>http://won0935.github.io/2021/11/28/MessageQueue/Kafka/AboutKafka/</id>
    <published>2021-11-28T08:46:13.612Z</published>
    <updated>2021-11-28T09:11:50.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="⛳-들어가기-전에"><a href="#⛳-들어가기-전에" class="headerlink" title="⛳ 들어가기 전에.."></a>⛳ 들어가기 전에..</h2><p>회사에서 <code>EFK(ElasticSearch-Fluentd-Kafka)</code> 스택으로 <strong>로깅 시스템</strong>을 구축해야 한다.<br>따라서 각 기술에 대해 공부해보았다.</p><h2 id="📩-Kafka-란"><a href="#📩-Kafka-란" class="headerlink" title="📩 Kafka 란"></a>📩 Kafka 란</h2><p>아파치에서 제공하는 <strong>pub-sub</strong> 기반의 <strong>분산형 메시지 큐</strong>이다.<br>dispatch가 아닌, <strong>subscribe 방식</strong>으로 기존 <code>RabbitMQ</code>에 비해 성능이 좋다.<br>(단, RabbitMQ에서 제공하는 전체 트랜잭션은 제공되지 않음)</p><h2 id="🧱-Kafka-기본용어"><a href="#🧱-Kafka-기본용어" class="headerlink" title="🧱 Kafka 기본용어"></a>🧱 Kafka 기본용어</h2><p><img src="https://user-images.githubusercontent.com/55419159/143737608-fd87cbb9-3ae8-4dc0-81be-ed64de1cf889.png" alt="image"></p><h3 id="1-broker-브로커"><a href="#1-broker-브로커" class="headerlink" title="1. broker (브로커)"></a>1. <code>broker</code> (브로커)</h3><p><code>브로커</code>는 실제로 <strong>메시지를 저장</strong>하는 카프카의 각 노드이다.</p><h4 id="역할-amp-특징"><a href="#역할-amp-특징" class="headerlink" title="역할 &amp; 특징"></a>역할 &amp; 특징</h4><ul><li><code>pub</code>으로 인해 들어온 <strong>데이터 저장</strong> (disk 기반)</li><li><code>leader</code>, <code>follower</code> 개념 존재</li></ul><h3 id="2-zookeeper-주키퍼"><a href="#2-zookeeper-주키퍼" class="headerlink" title="2. zookeeper (주키퍼)"></a>2. <code>zookeeper</code> (주키퍼)</h3><p>주키퍼는 아파치에서 제공하는 코디네이션 분산 플랫폼이다.</p><h4 id="역할-amp-특징-1"><a href="#역할-amp-특징-1" class="headerlink" title="역할 &amp; 특징"></a>역할 &amp; 특징</h4><ul><li>broker health check</li><li><code>leader</code> 선출</li><li><code>znode</code>(파일 시스템의 폴더 구조)라는 곳에 <code>broker</code>의 meta 정보 관리</li></ul><p>zookeeper 클러스터는 <strong>앙상블</strong>이라 부르며, 앙상블은 데이터 write시 과반수가 넘으면 성공으로 간주하게 된다.<br>즉, 앙상블은 <strong>2N+1인 홀수</strong>로 구성이 필요하다.</p><h3 id="3-topic-토픽"><a href="#3-topic-토픽" class="headerlink" title="3. topic (토픽)"></a>3. <code>topic</code> (토픽)</h3><p>토픽은 <strong>큐들의 집합</strong>이다.</p><p>큐들의 집합이라는 용어를 사용한 이유는 토픽은 <strong>한개 이상의 파티션</strong>이 있어야 하고, <strong>파티션이 한개의 큐</strong>이기 때문이다.</p><h4 id="역할-amp-특징-2"><a href="#역할-amp-특징-2" class="headerlink" title="역할 &amp; 특징"></a>역할 &amp; 특징</h4><ul><li>클러스터 내 토픽명 고유</li><li>큐 집합을 논리적 단위로 구분</li><li>메시지 저장기간, 메시지 복제수 등의 설정을 토픽단위 제공 (<a href="https://kafka.apache.org/23/documentation.html#topicconfigs">Kafka 공식문서- Topic</a>)</li></ul><h3 id="4-partition-파티션"><a href="#4-partition-파티션" class="headerlink" title="4. partition (파티션)"></a>4. <code>partition</code> (파티션)</h3><p>파티션은 토픽을 이루는 큐이다.</p><p>각 파티션에는 <code>leader</code>, <code>follower</code>, <code>isr</code> 존재합니다.</p><p>각 용어의 의미는 아래와 같다.</p><ul><li>leader는 메시지를 write, read하는 역할을 수행하며, 토픽의 replication 갯수만큼 follower에게 복제를 명령합니다.</li><li>follower는 leader의 요청을 받아 메시지를 복제하는 역할을 합니다.</li><li>isr는 replication group을 의미하며, leader &amp; follwer 선출 시 이 isr 내에서 선출하게 됩니다.</li></ul><p>아래는 파티션의 leader, follower, isr에 관련해서 보여드리기 위해 캡처한 사진입니다.</p><p><img src="https://user-images.githubusercontent.com/55419159/143746108-38d945e4-9723-446a-a07c-6a42ea37feba.png" alt="image"></p><p>위 사진을 보시면 0번 파티션의 정보로는,</p><p>leader는 2번 broker, isr(in sync replicas)는 현재 2번, 3번으로 되어 있는것을 보실 수 있습니다.</p><p>3-5. producer (프로듀서)</p><p>프로듀서는 카프카에서 메시지를 발행(pub)하는 주최를 의미합니다.</p><p>프로듀서의 특징은 아래와 같습니다.</p><p>메시지 발행 시 직렬화를 제공합니다.(string, json, avro 등)<br>partition에 특정 데이터만을 발행하기 위해 메시지의 key를 지정할 수 있습니다.<br>메시지 발행 후 broker로 부터 ack를 받을 수 있습니다. (<a href="https://kafka.apache.org/23/documentation.html#producerapi">https://kafka.apache.org/23/documentation.html#producerapi</a>)</p><p>3-6. consumer (컨슈머)</p><p>컨슈머는 메시지를 subscribe하는 주최입니다.</p><p>컨슈머의 특징은 아래와 같습니다.</p><p>commit이라는 행위로 어느 offset까지 subscribe했는지 주키퍼에게 알림.<br>컨슈머는 살아있다면 zookeeper에게 heart beat를 전송.<br>poll이라는 행위로 메시지를 subscribe하며, 이때 시간과 최대 갯수등 설정 가능(<a href="https://kafka.apache.org/23/documentation.html#consumerconfigs">https://kafka.apache.org/23/documentation.html#consumerconfigs</a>)</p><p>여기서 offset은 각 파티션에 메시지가 유입된 순서를 의미합니다.</p><p>3-7. consumer group (컨슈머 그룹)</p><p>컨슈머 그룹은 컨슈머들의 논리적인 그룹을 의미합니다.</p><p>컨슈머 그룹은 아래와 같은 특징을 가지고 있습니다.</p><p>토픽별 컨슈머 그룹 단위로 offset과 lag를 관리.<br>컨슈머는 컨슈머그룹을 필수로 가져야 함.<br>토픽의 파티션 갯수만큼 컨슈머들이 동일 컨슈머 그룹에 존재하는것이 Best!!<br>한 파티션은 하나의 컨슈머만 점유 가능하기 때문.<br>파티션을 점유중인 컨슈머가 down 되었을 시 컨슈머 그룹내 리밸런싱 동작.<br>down된 컨슈머가 점유한 파티션을 다른 컨슈머에게 위임하는 작업.</p><p>여기서, lag는 한 토픽의 (총 메시지 갯수 - 컨슈머 그룹이 subscribe한 메시지 갯수) 입니다.</p><p>간단히, 한 토픽에서 한 컨슈머 그룹이 소비해야하는 총 메시지 갯수입니다.</p><ol start="4"><li>마무리<br>이번 포스팅에서는 카프카에 대해 알아보았습니다.</li></ol><p>다음 포스팅부터는 카프카 설치 및 cli를 통한 사용예제를 포스팅하도록 하겠습니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;⛳-들어가기-전에&quot;&gt;&lt;a href=&quot;#⛳-들어가기-전에&quot; class=&quot;headerlink&quot; title=&quot;⛳ 들어가기 전에..&quot;&gt;&lt;/a&gt;⛳ 들어가기 전에..&lt;/h2&gt;&lt;p&gt;회사에서 &lt;code&gt;EFK(ElasticSearch-Fluentd-K</summary>
      
    
    
    
    <category term="Kafka" scheme="http://won0935.github.io/categories/Kafka/"/>
    
    
    <category term="Kafka" scheme="http://won0935.github.io/tags/Kafka/"/>
    
    <category term="MessageQueue" scheme="http://won0935.github.io/tags/MessageQueue/"/>
    
  </entry>
  
  <entry>
    <title>처리율 제한 장치의 설계</title>
    <link href="http://won0935.github.io/2021/11/28/MassiveSystemDesign/Chapter-5/"/>
    <id>http://won0935.github.io/2021/11/28/MassiveSystemDesign/Chapter-5/</id>
    <published>2021-11-28T08:40:52.641Z</published>
    <updated>2021-11-28T08:42:11.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="처리율-제한-장치의-설계"><a href="#처리율-제한-장치의-설계" class="headerlink" title="처리율 제한 장치의 설계"></a>처리율 제한 장치의 설계</h1><blockquote><p>API 요청횟수가 특정 임계치를 넘어가면 추가로 도달한 요청은 처리를 중단하는 것</p></blockquote><hr><h2 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h2><ol><li>DoS공격 방지</li><li>비용절감</li><li>서버 과부하 방지</li></ol><hr><h1 id="처리율-제한-알고리즘"><a href="#처리율-제한-알고리즘" class="headerlink" title="처리율 제한 알고리즘"></a>처리율 제한 알고리즘</h1><h2 id="토큰-버킷"><a href="#토큰-버킷" class="headerlink" title="토큰 버킷"></a>토큰 버킷</h2><blockquote><p>토큰을 발급하고 토큰의 갯수 만큼만 API 요청을 버킷에 담음<br>버킷이 가득 찬 경우 API요청은 버려짐(overflow)</p></blockquote><p><img src="https://user-images.githubusercontent.com/55419159/138881073-2532be82-cc51-4872-a6be-f7e256b1a74e.png" alt="image"></p><ul><li>가장 간단하고 폭넓게 사용됨(아마존 등)</li><li>메모리 효율성 높음</li><li>버킷크기:토큰공급률 비율 튜닝이 관건</li></ul><hr><h2 id="누출-버킷"><a href="#누출-버킷" class="headerlink" title="누출 버킷"></a>누출 버킷</h2><blockquote><p>토큰 버킷 알고리즘과 유사하지만 처리율이 고정<br>큐(FIFO)로 구현</p></blockquote><p><img src="https://user-images.githubusercontent.com/55419159/138881283-90475661-ca10-481f-a3fb-2e7e3cae0168.png" alt="image"></p><ul><li>동작방식<ol><li>요청이 도착하면 큐가 가득 차 있는지 확인, 빈자리가 있는 경우 큐에 요청 추가</li><li>큐가 가득 차있는 경우 새 요청은 버림</li><li>지정된 시간마다 큐에서 요청을 꺼내어 처리</li></ol><ul><li>토큰 버킷 알고리즘과 유사</li><li>고정된 처리율을 가지고 있어 안정적 출력이 필요한 환경에 적합</li><li>단시간에 많은 처리율이 들어올 경우 취약함</li></ul></li></ul><hr><h2 id="고정-윈도-카운터"><a href="#고정-윈도-카운터" class="headerlink" title="고정 윈도 카운터"></a>고정 윈도 카운터</h2><ul><li>동작방식<ol><li>타임라인을 고정된 간격의 윈도로 나누고, 각 윈도마다 카운터를 붙임</li><li>요청이 접수될 때마다 이 카운터의 값은 1씩 증가함</li><li>이 카운터 값이 사전에 설정된 임계치에 도달하면 새로운 요청은<br>새 윈도가 열릴 때 까지 버려짐</li></ol></li></ul><p><img src="https://user-images.githubusercontent.com/55419159/138881425-aaf0ecc3-a73c-4007-9d36-3c9693f2062f.png" alt="image"></p><ul><li>메모리 효율 좋음</li><li>윈도 경계에서 일시적으로 많은 트래픽이 몰려드는 경우, 기대했던 시스템의 처리 한도보다 많은 양의 요청을 처리하게 됨</li></ul><hr><h2 id="이동-윈도-로그"><a href="#이동-윈도-로그" class="headerlink" title="이동 윈도 로그"></a>이동 윈도 로그</h2><blockquote><p>고정 윈도 카운터 알고리즘의 윈도 경계 부분에서<br>트래픽이 몰리는 경우를 보완하기 위한 알고리즘</p></blockquote><ul><li>동작방식<ol><li>요청의 타임스탬프를 추적함<br>타임스탬프는 보통 Redis의 Sorted Set과 같은 정렬 집합 캐시에 보관</li><li>새 요청이 오면 만료된 타임스탬프는 제거</li><li>새 요청의 타임 스탬프를 로그에 추가</li><li>로그의 크기가 허용치보다 같거나 작으면 요청을 시스템에 전달함<br>그렇지 않은 경우 처리는 거부됨</li></ol><ul><li>윈도 알고리즘의 처리율 한도를 넘지 않음</li><li>다량의 메모리 사용, 거부된 요청의 타임스탬프도 보관하기 때문</li></ul></li></ul><hr><h2 id="이동-윈도-카운터"><a href="#이동-윈도-카운터" class="headerlink" title="이동 윈도 카운터"></a>이동 윈도 카운터</h2><blockquote><p>고정 윈도 카운터 + 이동 윈도 로그 </p></blockquote><ul><li>이전 시간대의 평균 처리율에 따라 현재 윈도의 상태를 계산하므로 짧은 시간에 몰리는 트래픽에도 잘 대응</li><li>메모리 효율이 좋음</li><li>직전 시간의 추정치를 계산하기 때문에 기준이 느슨함, But 심각한 건 아님</li></ul><hr><h1 id="프로세스"><a href="#프로세스" class="headerlink" title="프로세스"></a>프로세스</h1><ol><li>처리율 제한 규칙은 디스크에 보관한다.<br>작업 프로세스는 수시로 규칙을 디스크에서 읽어 캐시에 저장한다.</li><li>클라이언트가 요청을 서버에 보내면 요청은 먼저 처리율 제한 미들웨어에 도달한다.<br>카운터 및 마지막 요청의 타임스탬프를 레디스 캐시에서 가져온다. <ul><li>해당 요청이 처리율 제한에 걸리지 않은 경우 API서버로 보낸다.</li><li>해당 요청이 처리율 제한에 걸렸다면 429(too many request) 에러를 클라이언트에 보낸다.<br>한편 해당 요청은 그대로 버릴 수도 있고 메시지 큐에 저장할 수도 있다.</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;처리율-제한-장치의-설계&quot;&gt;&lt;a href=&quot;#처리율-제한-장치의-설계&quot; class=&quot;headerlink&quot; title=&quot;처리율 제한 장치의 설계&quot;&gt;&lt;/a&gt;처리율 제한 장치의 설계&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;API 요청횟수가 특정 </summary>
      
    
    
    
    <category term="가상면접 사례로 배우는 대규모 시스템 설계기초" scheme="http://won0935.github.io/categories/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/"/>
    
    
    <category term="시스템설계" scheme="http://won0935.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%84%A4%EA%B3%84/"/>
    
    <category term="대규모설계" scheme="http://won0935.github.io/tags/%EB%8C%80%EA%B7%9C%EB%AA%A8%EC%84%A4%EA%B3%84/"/>
    
    <category term="처리율제한" scheme="http://won0935.github.io/tags/%EC%B2%98%EB%A6%AC%EC%9C%A8%EC%A0%9C%ED%95%9C/"/>
    
    <category term="토큰버킷" scheme="http://won0935.github.io/tags/%ED%86%A0%ED%81%B0%EB%B2%84%ED%82%B7/"/>
    
    <category term="누출버킷" scheme="http://won0935.github.io/tags/%EB%88%84%EC%B6%9C%EB%B2%84%ED%82%B7/"/>
    
    <category term="이동윈도로그" scheme="http://won0935.github.io/tags/%EC%9D%B4%EB%8F%99%EC%9C%88%EB%8F%84%EB%A1%9C%EA%B7%B8/"/>
    
    <category term="고정윈도카운터" scheme="http://won0935.github.io/tags/%EA%B3%A0%EC%A0%95%EC%9C%88%EB%8F%84%EC%B9%B4%EC%9A%B4%ED%84%B0/"/>
    
  </entry>
  
  <entry>
    <title>ObjectMapper</title>
    <link href="http://won0935.github.io/2021/11/23/Java/ObjectMapper/"/>
    <id>http://won0935.github.io/2021/11/23/Java/ObjectMapper/</id>
    <published>2021-11-23T11:01:39.919Z</published>
    <updated>2021-11-23T11:07:08.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jackson-ObjectMapper"><a href="#Jackson-ObjectMapper" class="headerlink" title="Jackson ObjectMapper"></a>Jackson ObjectMapper</h1><ul><li>ObjectMapper는 생성 비용이 꽤 비싸기 때문에 멤버변수, bean, static으로 처리</li><li>ObjectMapper는 Thread Safe하기 때문에 굳이 매번 생성해서 따로 쓸 필요가 없음</li><li>Spring의 경우 Bean으로 등록해서 DI받아서 쓰는 것이 좋음</li></ul><h2 id="readValue-vs-convertValue"><a href="#readValue-vs-convertValue" class="headerlink" title="readValue vs convertValue"></a><code>readValue</code> vs <code>convertValue</code></h2><ul><li><p><code>readValue</code></p><p>json String → Model</p></li><li><p><code>convertValue</code></p><p>Object → Model</p><p>Jackson 2.7.x+부터 멤버 변수 자체에 주석을 달 수 있는 방법이 있습니다.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; newsletters;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Jackson-ObjectMapper&quot;&gt;&lt;a href=&quot;#Jackson-ObjectMapper&quot; class=&quot;headerlink&quot; title=&quot;Jackson ObjectMapper&quot;&gt;&lt;/a&gt;Jackson ObjectMapper&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="자바" scheme="http://won0935.github.io/categories/%EC%9E%90%EB%B0%94/"/>
    
    
    <category term="자바" scheme="http://won0935.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
    <category term="Util" scheme="http://won0935.github.io/tags/Util/"/>
    
    <category term="ObjectMapper" scheme="http://won0935.github.io/tags/ObjectMapper/"/>
    
  </entry>
  
  <entry>
    <title>EnumUtils</title>
    <link href="http://won0935.github.io/2021/11/23/Java/EnumUtils/"/>
    <id>http://won0935.github.io/2021/11/23/Java/EnumUtils/</id>
    <published>2021-11-23T11:01:01.220Z</published>
    <updated>2021-11-23T11:06:25.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EnumUtils"><a href="#EnumUtils" class="headerlink" title="EnumUtils"></a>EnumUtils</h1><ul><li><code>apache.commons</code>의 <code>EnumUtils</code>를 상속받음</li><li><code>StringUtils</code>의 <code>defaultIfEmpty()</code> 메소드와 비슷하게 만들었음</li><li>wildcard로 동적으로 파라미터를 정함</li><li><code>&lt;T extends 제한타입&gt;</code> =&gt; 제너릭타입의 상한 제한. 제한타입과 그 자손(타입)들만 가능</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumUtils</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">commons</span>.<span class="title">lang</span>.<span class="title">enums</span>.<span class="title">EnumUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&gt; <span class="function">E <span class="title">defaultIfEmpty</span><span class="params">(E value, E defalutValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vlaue == <span class="keyword">null</span> ? defaultValue : value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;EnumUtils&quot;&gt;&lt;a href=&quot;#EnumUtils&quot; class=&quot;headerlink&quot; title=&quot;EnumUtils&quot;&gt;&lt;/a&gt;EnumUtils&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apache.commons&lt;/code&gt;의 &lt;code&gt;E</summary>
      
    
    
    
    <category term="자바" scheme="http://won0935.github.io/categories/%EC%9E%90%EB%B0%94/"/>
    
    
    <category term="자바" scheme="http://won0935.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
    <category term="Util" scheme="http://won0935.github.io/tags/Util/"/>
    
    <category term="Enum" scheme="http://won0935.github.io/tags/Enum/"/>
    
  </entry>
  
  <entry>
    <title>데코레이터 패턴</title>
    <link href="http://won0935.github.io/2021/11/13/DesignPattern/DecoratorPattern/"/>
    <id>http://won0935.github.io/2021/11/13/DesignPattern/DecoratorPattern/</id>
    <published>2021-11-13T06:40:11.478Z</published>
    <updated>2021-11-13T07:30:16.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🎁-데코레이터-패턴이란"><a href="#🎁-데코레이터-패턴이란" class="headerlink" title="🎁 데코레이터 패턴이란"></a>🎁 데코레이터 패턴이란</h2><blockquote><p>객체에 <strong>추가적인 요건</strong>을 동적으로 첨가한다.<br>데코레이터는 <strong>서브클래스</strong>를 만드는 것을 통해서 기능을 유연하게 확장할 수 있는 방법을 제공한다.</p></blockquote><h3 id="클래스-다이어그램"><a href="#클래스-다이어그램" class="headerlink" title="클래스 다이어그램"></a>클래스 다이어그램</h3><p><img src="https://user-images.githubusercontent.com/55419159/141609476-9786bc6c-9a46-45d3-b2ad-63c6678abc0e.png" alt="image"></p><ul><li><p><code>ConcreteComponent</code>에 <strong>새로운 행동을 동적으로 추가</strong>할 수 있다.<br>각 데코레이터 안에는 구성요소(Component)에 대란 레퍼런스가 들어있는 인스턴스 변수가있다.</p></li><li><p><code>Decorator</code>는 자신이 장식할 구성요소(Component)와 같은 인터페이스 또는 <strong>추상 클래스를 구현</strong>한다.</p></li><li><p><code>ConcreteDecoratorA</code>, <code>ConcreteDecoratorB</code> 에는 그 객체가 장식하고있는(데코레이터가 감싸고 있는 Component객체)을 위한 인스턴스 변수가 있다.<br>따라서 데코레이터는 <code>Component</code>의 <strong>상태를 확장</strong>할 수 있다.</p></li><li><p><code>ConcreteDecoratorA</code>, <code>ConcreteDecoratorB</code> 데코레이터에서 <strong>새로운 메소드를 추가</strong>할 수도 있다.<br>하지만 일반적으로 새로운 메소드를 추가하는 대신 <code>Component</code>에 원래 있던 메소드를 호출하기 전, 또는 후에 <strong>별도의 작업을 처리하는 방식</strong>으로 새로운 기능을 추가한다.</p></li></ul><hr><h2 id="활용예제"><a href="#활용예제" class="headerlink" title="활용예제"></a>활용예제</h2><h3 id="☕️-카페-주문시스템-만들기"><a href="#☕️-카페-주문시스템-만들기" class="headerlink" title="☕️ 카페 주문시스템 만들기"></a>☕️ 카페 주문시스템 만들기</h3><blockquote><p><em>커피를 주문할 때는 스팀 우유나 두유, 모카를 추가하고, 그 위에 휘핑 크림을 얹기도 한다.<br>각각을 추가할 때마다 커피 가격이 올라가기 때문에 주문 시스템에서도 그런 점들을 모두 고려해야 한다.</em></p></blockquote><p>기존의 코드는 <strong>건드리지 않은 채로</strong> 확장을 통해서 새로운 행동을 간단하게 추가할 수 있는 <strong>데코레이터 패턴</strong>을 사용해보자.</p><p>우선 특정 음료에서 시작해서 첨가물로 그 음료를 장식 해보자.</p><ol><li><code>DarkRoast</code> 객체를 가져온다.</li><li><code>Mocha</code> 객체로 장식한다.</li><li><code>Whip</code> 객체로 장식한다.</li><li><code>cost()</code> 메소드를 호출한다. 이때 첨가물의 가격을 계산하는 일은 해당 객체들에게 위임된다.</li></ol><p>디자인을 바탕으로 코드를 만들어보자.</p><p><img src="https://user-images.githubusercontent.com/55419159/141609675-00fe88e7-909c-4349-9dc8-88f3eeca5d05.png" alt="image"></p><h4 id="Beverage-추상클래스-구현"><a href="#Beverage-추상클래스-구현" class="headerlink" title="Beverage 추상클래스 구현"></a><code>Beverage</code> 추상클래스 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description = <span class="string">&quot;Empty&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Beverage-를-확장하는-CondimentDecorator-구현"><a href="#Beverage-를-확장하는-CondimentDecorator-구현" class="headerlink" title="Beverage 를 확장하는 CondimentDecorator 구현"></a><code>Beverage</code> 를 확장하는 <code>CondimentDecorator</code> 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Beverage-를-활용해-음료-객체-구현"><a href="#Beverage-를-활용해-음료-객체-구현" class="headerlink" title="Beverage 를 활용해 음료 객체 구현"></a><code>Beverage</code> 를 활용해 음료 객체 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = <span class="string">&quot;에스프레소&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3500</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBlend</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseBlend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = <span class="string">&quot;하우스블렌드&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CondimentDecorator-를-활용해-꾸며진-객체-구현"><a href="#CondimentDecorator-를-활용해-꾸며진-객체-구현" class="headerlink" title="CondimentDecorator 를 활용해 꾸며진 객체 구현"></a><code>CondimentDecorator</code> 를 활용해 꾸며진 객체 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;, 모카&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">500</span> + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Beverage beverage = <span class="keyword">new</span> Espresso();</span><br><span class="line">        System.out.println(beverage.getDescription() + <span class="string">&quot; cost : &quot;</span> + beverage.cost());</span><br><span class="line"></span><br><span class="line">        Beverage beverage1 = <span class="keyword">new</span> DarkRoast();</span><br><span class="line">        beverage1 = <span class="keyword">new</span> Mocha(beverage1);</span><br><span class="line">        beverage1 = <span class="keyword">new</span> Mocha(beverage1);</span><br><span class="line">        beverage1 = <span class="keyword">new</span> Whip(beverage1);</span><br><span class="line">        System.out.println(beverage1.getDescription() + <span class="string">&quot; cost : &quot;</span> + beverage1.cost());</span><br><span class="line"></span><br><span class="line">        Beverage beverage2 = <span class="keyword">new</span> HouseBlend();</span><br><span class="line">        beverage2 = <span class="keyword">new</span> Soy(beverage2);</span><br><span class="line">        beverage2 = <span class="keyword">new</span> Mocha(beverage2);</span><br><span class="line">        beverage2 = <span class="keyword">new</span> Whip(beverage2);</span><br><span class="line">        System.out.println(beverage2.getDescription() + <span class="string">&quot; cost : &quot;</span> + beverage2.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="디자인-원칙"><a href="#디자인-원칙" class="headerlink" title="디자인 원칙"></a>디자인 원칙</h3><blockquote><p><strong>OCP(Open-Closed principle)</strong><br><em>클래스는 확장에 대해서는 열려 있어야하지만 코드 변경에 대해서는 닫혀 있어야 한다.</em></p></blockquote><hr><h2 id="데코레이터가-적용된-예-자바-I-O"><a href="#데코레이터가-적용된-예-자바-I-O" class="headerlink" title="데코레이터가 적용된 예 : 자바 I/O"></a>데코레이터가 적용된 예 : 자바 I/O</h2><p>개발하면서 스트림의 개념이 잘 잡히지 않았을때.. 자바 I/O API를 보고 한숨을 쉬는 사람들이 나말고도 많았을 거라 생각한다.<br>기반스트림과 보조스트림을 데코레이터 패턴을 배우고 나서 머리속에서 다시 정리해보면 많은 클래스들이 좀더 친근하게 다가 온다.</p><p>실제 자바에서 클래스 다이어그램을 그려보면</p><p><img src="https://user-images.githubusercontent.com/55419159/141609807-708dd839-da97-46a2-832b-2c82ecc82bd4.png" alt="image"></p><p><code>InputStream</code> 이 추상구성요소이고 모든 보조스트림의 조상인 <code>FilterInputStream</code> 이 추상 데코레이터 이다.<br><code>FilterInputStream</code>을 상속받아 구현하는 <code>BufferedInputStream</code> 클래스들이 구상 데코레이터이다.<br><code>InputStream</code>을 상속받는 <code>FileInputStream</code> 같은 기반 스트림들은 데코레이터로 포장될 구상 구성요소 역할을 한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;🎁-데코레이터-패턴이란&quot;&gt;&lt;a href=&quot;#🎁-데코레이터-패턴이란&quot; class=&quot;headerlink&quot; title=&quot;🎁 데코레이터 패턴이란&quot;&gt;&lt;/a&gt;🎁 데코레이터 패턴이란&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;객체에 &lt;strong&gt;추</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="데코레이터" scheme="http://won0935.github.io/tags/%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0/"/>
    
  </entry>
  
  <entry>
    <title>옵저버 패턴</title>
    <link href="http://won0935.github.io/2021/11/12/DesignPattern/ObserverPattern/"/>
    <id>http://won0935.github.io/2021/11/12/DesignPattern/ObserverPattern/</id>
    <published>2021-11-12T08:05:58.356Z</published>
    <updated>2021-11-13T06:40:11.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🔭-옵저버-패턴이란"><a href="#🔭-옵저버-패턴이란" class="headerlink" title="🔭 옵저버 패턴이란"></a>🔭 옵저버 패턴이란</h2><blockquote><p>옵저버 패턴(observer pattern)은 객체의 상태 변화를 관찰하는 <strong>관찰자</strong>들,<br>즉 옵저버들의 목록을 객체에 등록하여 <strong>상태 변화가 있을 때마다</strong> 메서드 등을 통해 객체가 직접 목록의 각 <strong>옵저버에게 통지하도록</strong> 하는 디자인 패턴이다.</p></blockquote><h3 id="클래스-다이어그램"><a href="#클래스-다이어그램" class="headerlink" title="클래스 다이어그램"></a>클래스 다이어그램</h3><p><img src="https://user-images.githubusercontent.com/55419159/141607954-d5fd0a63-b644-4e8d-8004-5af5dc53da83.png" alt="image"></p><p>옵저버 패턴은 주제와 옵저버가 <strong>느슨하게</strong> 결합되어 있는 객체 디자인을 제공한다. 주제가 옵저버에 대해서 아는 것은 옵저버가 특정 인터페이스(Observer 인터페이스)를 구현 한다는 것 뿐이다.</p><ul><li>옵저버는 언제든지 새로 추가할 수 있음. (주제는 Observer인터페이스 구현하는 객체 목록에만 의존하기때문)</li><li>새로운 형식의 옵저버를 추가하려해도 주제를 전혀 변경할 필요가 없음. (새로운 클래스에서 Observer 인터페이스만 구현해주면됨)</li><li>주제나 옵저버가 바뀌더라도 서로에게 전혀 영향을 주지않음. 그래서 주제와 옵저버는 서로 독립적으로 재 사용할수 있음.</li></ul><p>느슨하게 결합하는 디자인을 사용하면 변경 사항이 생겨도 무난히 처리할 수 있는 유연한 객체지향 시스템을 구축할수 있다. (객체 사이의 상호 의존성을 최소화 할 수 있기 때문)</p><h3 id="디자인-원칙"><a href="#디자인-원칙" class="headerlink" title="디자인 원칙"></a>디자인 원칙</h3><blockquote><p>서로 상호작용을 하는 객체 사이에서는 가능하면 <strong>느슨하게 결합</strong>하는 디자인을 사용해야 한다.</p></blockquote><hr><h2 id="활용예제"><a href="#활용예제" class="headerlink" title="활용예제"></a>활용예제</h2><h3 id="☀️-기상데이터-관찰"><a href="#☀️-기상데이터-관찰" class="headerlink" title="☀️ 기상데이터 관찰"></a>☀️ 기상데이터 관찰</h3><p>날씨 데이터를 가지고 있는 회사와 데이터를 연동하여 여러종류의 각각의 디스플레이에 날씨데이터를 출력해줘야 하는 업무가 생겼다고 가정했을때. 아래의 기능이 필요하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getTemperature():온도</span><br><span class="line"></span><br><span class="line">        getHumidity():습도</span><br><span class="line"></span><br><span class="line">        getPressure():기압</span><br><span class="line"></span><br><span class="line">        measurementsChanged():새로운 기상 측정 데이터가 나올때마다 자동으로 호출되는 부분.</span><br></pre></td></tr></table></figure><h3 id="1-옵저버-패턴-구현해보기"><a href="#1-옵저버-패턴-구현해보기" class="headerlink" title="1. 옵저버 패턴 구현해보기"></a>1. 옵저버 패턴 구현해보기</h3><p><img src="https://user-images.githubusercontent.com/55419159/141608207-0b9249cf-e475-4169-97c1-7c7d3e7a92a0.png" alt="image"></p><h4 id="Subject-인터페이스-구현"><a href="#Subject-인터페이스-구현" class="headerlink" title="Subject 인터페이스 구현"></a><code>Subject</code> 인터페이스 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerobserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Observer-인테페이스-구현"><a href="#Observer-인테페이스-구현" class="headerlink" title="Observer 인테페이스 구현"></a><code>Observer</code> 인테페이스 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Subject를-구현하는-WeatherData-생성"><a href="#Subject를-구현하는-WeatherData-생성" class="headerlink" title="Subject를 구현하는 WeatherData 생성"></a><code>Subject</code>를 구현하는 <code>WeatherData</code> 생성</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurementsChanged</span><span class="params">(<span class="keyword">float</span> t, <span class="keyword">float</span> h, <span class="keyword">float</span> p)</span> </span>&#123;    <span class="comment">//값이 세팅된다고 가정.</span></span><br><span class="line">        <span class="keyword">this</span>.temperature = t;</span><br><span class="line">        <span class="keyword">this</span>.humidity = h;</span><br><span class="line">        <span class="keyword">this</span>.pressure = p;</span><br><span class="line">        <span class="keyword">this</span>.measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(<span class="keyword">this</span>.temperature, <span class="keyword">this</span>.humidity, <span class="keyword">this</span>.pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerobserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (observers.contains(observer)) observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Observer를-구현하는-CurrentConditions-생성"><a href="#Observer를-구현하는-CurrentConditions-생성" class="headerlink" title="Observer를 구현하는 CurrentConditions 생성"></a><code>Observer</code>를 구현하는 <code>CurrentConditions</code> 생성</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditions</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> Subject weatherData;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditions</span><span class="params">(Subject weatherData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weatherData = weatherData;</span><br><span class="line">        <span class="keyword">this</span>.weatherData.registerobserver(<span class="keyword">this</span>);    <span class="comment">//옵저버 등록</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Current conditions : &quot;</span> + temperature + <span class="string">&quot; , &quot;</span> + humidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temp;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line"></span><br><span class="line">        CurrentConditions currentConditions = <span class="keyword">new</span> CurrentConditions(weatherData);</span><br><span class="line">        StatisticsDisplay statisticsDisplay = <span class="keyword">new</span> StatisticsDisplay(weatherData);</span><br><span class="line">        ForecastDisplay forecastDisplay = <span class="keyword">new</span> ForecastDisplay(weatherData);</span><br><span class="line"></span><br><span class="line">        weatherData.setMeasurementsChanged(<span class="number">85</span>, <span class="number">62</span>, <span class="number">36.7f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-자바-내장-옵저버-패턴-사용"><a href="#2-자바-내장-옵저버-패턴-사용" class="headerlink" title="2. 자바 내장 옵저버 패턴 사용"></a>2. 자바 내장 옵저버 패턴 사용</h3><p><code>java.util.Observer</code> 인터페이스와 <code>java.util.Observable</code> 클래스를 사용할수 있다.</p><p><img src="https://user-images.githubusercontent.com/55419159/141608538-b814feab-5924-497c-bfb4-885ff8473279.png" alt="image"></p><h4 id="java-util-Observable를-구현한-WeatherData-생성"><a href="#java-util-Observable를-구현한-WeatherData-생성" class="headerlink" title="java.util.Observable를 구현한 WeatherData 생성"></a><code>java.util.Observable</code>를 구현한 <code>WeatherData</code> 생성</h4><ul><li><p>이전에 구현 했던것과 마찬가지로 <code>java.util.Observer</code> 인터페이스를 구현하고 <code>java.util.Observable</code> 객체의<br><code>addObserver()</code> 메소드를 호출하면 옵저버 목록에 추가되고, <code>deleteObserver()</code>를 호출하면 옵저버 목록에서 제거된다.</p></li><li><p><strong>연락을 돌리는 방법</strong>은 <code>java.util.Observable</code>를 상속받는 주제 클래스에서 <code>setChanged()</code> 메소드를 호출해서 객체의 상태가 바뀌었다는 것을 알린 후 <code>notifyObservers()</code> 또는 <code>notifyObserver(Object arg)</code> 메소드를 호출하면 된다. (인자값을 넣어주는 메소드는 푸시방식으로 쓰임.)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setChanged();    <span class="comment">//상태가 바뀌었다는 플래그값을 바꿔줌.</span></span><br><span class="line">        <span class="keyword">this</span>.notifyObservers(); <span class="comment">//풀 방식을 사용해서 알림</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurementsChanged</span><span class="params">(<span class="keyword">float</span> t, <span class="keyword">float</span> h, <span class="keyword">float</span> p)</span> </span>&#123;    <span class="comment">//값이 세팅된다고 가정.</span></span><br><span class="line">        <span class="keyword">this</span>.temperature = t;</span><br><span class="line">        <span class="keyword">this</span>.humidity = h;</span><br><span class="line">        <span class="keyword">this</span>.pressure = p;</span><br><span class="line">        <span class="keyword">this</span>.measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temperature;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java-util-Observer를-구현한-CurrentConditions-생성"><a href="#java-util-Observer를-구현한-CurrentConditions-생성" class="headerlink" title="java.util.Observer를 구현한 CurrentConditions 생성"></a><code>java.util.Observer</code>를 구현한 <code>CurrentConditions</code> 생성</h4><ul><li>옵저버 객체가 <strong>연락을 받는 방법</strong>은 <code>update(Observable o, Object arg)</code> 메소드를 구현한다.</li><li><code>Observable o</code> 에는 연락을 보내는 주제 객체가 인자로 전달되고, <code>Object arg</code> 에는 <code>notifyObservers(Object arg)</code> 메소드에서 인자로 전달된 데이터 객체가 넘어온다. (데이터 객체가 지정되지 않은경우 <code>null</code>)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditions</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Observable observable;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditions</span><span class="params">(Observable observable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observable = observable;</span><br><span class="line">        <span class="keyword">this</span>.observable.addObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Current conditions : &quot;</span> + temperature + <span class="string">&quot; , &quot;</span> + humidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> WeatherData) &#123;</span><br><span class="line">            WeatherData weatherData = (WeatherData) o;</span><br><span class="line">            <span class="keyword">this</span>.temperature = weatherData.getTemperature();</span><br><span class="line">            <span class="keyword">this</span>.humidity = weatherData.getHumidity();</span><br><span class="line">            <span class="keyword">this</span>.display();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java-util-Observable-의-단점"><a href="#java-util-Observable-의-단점" class="headerlink" title="java.util.Observable 의 단점"></a><code>java.util.Observable</code> 의 단점</h4><ol><li><code>Observable</code> 은 클래스이기 때문에 <strong>서브클래스</strong>를 만들어야 한다. 이미 다른 수퍼클래스를 확장하고 있는 클래스에 <code>Observable</code>의 기능을 추가할수가 없어서 <strong>재사용성에 제약</strong>이 생긴다.</li><li><code>Observable</code> 인터페이스라는 것이 없기 때문에 자바에 내장된 Observer API 하고 잘 맞는 클래스를 직접 구현하는 것이 불가능하다.</li></ol><hr><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p><code>java.util.Observable</code>을 확장한 클래스를 쓸 수 있는 상황이면<br><code>Observable API</code>를 쓰는 것도 괜찮지만 상황에 따라 직접 구현해야 할수도 있다.</p><p>어떤방법을 쓰든 옵저버 패턴만 제대로 알고 있다면 그 패턴을 활용하는 API는 어떤 것이든 잘 활용할 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;🔭-옵저버-패턴이란&quot;&gt;&lt;a href=&quot;#🔭-옵저버-패턴이란&quot; class=&quot;headerlink&quot; title=&quot;🔭 옵저버 패턴이란&quot;&gt;&lt;/a&gt;🔭 옵저버 패턴이란&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;옵저버 패턴(observer patte</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="옵저버" scheme="http://won0935.github.io/tags/%EC%98%B5%EC%A0%80%EB%B2%84/"/>
    
  </entry>
  
  <entry>
    <title>스트레티지 패턴</title>
    <link href="http://won0935.github.io/2021/11/11/DesignPattern/StrategyPattern/"/>
    <id>http://won0935.github.io/2021/11/11/DesignPattern/StrategyPattern/</id>
    <published>2021-11-11T10:05:19.598Z</published>
    <updated>2021-11-12T08:05:58.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="📍-스트레티지-패턴이란"><a href="#📍-스트레티지-패턴이란" class="headerlink" title="📍 스트레티지 패턴이란"></a>📍 스트레티지 패턴이란</h2><blockquote><p>알고리즘군을 정의하고 각각 <strong>캡슐화</strong>하여 교환해서 사용할 수 있도록 만든다.<br>스트래티지패턴을 활용하면 알고리즘을 사용하는 클라이언트와는 <strong>독립적으로</strong> 알고리즘을 변경할수 있다.</p></blockquote><hr><h2 id="🦆-활용예제-오리-게임-만들기"><a href="#🦆-활용예제-오리-게임-만들기" class="headerlink" title="🦆 활용예제 : 오리 게임 만들기"></a>🦆 활용예제 : 오리 게임 만들기</h2><p>오리 어플리케이션 게임을 운영하는 회사를 다니면서 오리게임을 만든다고 가정했을때. 표준적인 객체지향 기법을 사용하여 <code>Duck</code> 이라는 <strong>슈퍼클래스</strong>를 만든다음 그 <strong>클래스를 확장</strong>하여 다른 종류의 오리를<br>만든다.</p><h3 id="☠️-디자인패턴을-적용하지-않을-때"><a href="#☠️-디자인패턴을-적용하지-않을-때" class="headerlink" title="☠️ 디자인패턴을 적용하지 않을 때"></a>☠️ 디자인패턴을 적용하지 않을 때</h3><p><img src="https://user-images.githubusercontent.com/55419159/141426069-89b87dc4-ca38-42dc-bf65-f53e8125d49e.png" alt="image"></p><p>추상클래스인 <code>Duck</code> 클래스를 <code>ReadHeadDuck</code> 클래스와 <code>MallardDuck</code> 클래스가 상속을 받아 추상메소드인 <code>display()</code>를 각각 구현한다.</p><h4 id="문제의-시작1"><a href="#문제의-시작1" class="headerlink" title="문제의 시작1"></a>문제의 시작1</h4><p>원래는 그럴 계획이 없었는데..<br>오리들이 물에 떠있는 기능 이외에 날아다녀야하는 요구사항이 생겼다.</p><p><img src="https://user-images.githubusercontent.com/55419159/141426644-cdd48f86-a3c7-4eda-9803-57a1bce59486.png" alt="image"></p><p>간단하네.. ?<br>이제 모든 오리들에게 날수있는 기능이 추가되었다.<br>그런데 날 수없는 오리가 있었다는 사실을 잊고있었다.</p><p><img src="https://user-images.githubusercontent.com/55419159/141426734-0a0a532e-668b-4a32-82a1-89b1494d5f22.png" alt="image"></p><p><code>Duck</code> 코드의 한부분만을 바꿈으로 해서 프로그램 전체에 부작용이 발생하였다. (장난감 고무오리가 날아다님)<br>문제를 해결하기 위하여 <code>RubberDuck</code> 클래스에서 <code>fly()</code> 메소드와 <code>quack()</code> 메소드를 오버라이드 하여 소리와 날수있게 하는기능을 변경시켜주었다.</p><p><img src="https://user-images.githubusercontent.com/55419159/141427908-0733cfdb-596a-424b-a934-92dbf3674d08.png" alt="image"></p><p>일단 문제는 해결되었지만.. 향후에 <code>RubberDuck</code>과 같은 가짜오리가 더 추가가 된다면 그때마다 <strong>맞지않는 상속되는 메소드들을 오버라이드 해서 구현해야하는 문제</strong>가 여전히 존재한다.</p><h4 id="문제의-시작2"><a href="#문제의-시작2" class="headerlink" title="문제의 시작2"></a>문제의 시작2</h4><p>회사에서 1개월마다 한번씩 새로운 오리를 업데이트 한다고 한다. 여러 오리가 새롭게 추가될것이고 그 규격도 계속 변할것이라고 한다.<br>그렇다면 매번 모든 오리 서브클래스의 <code>fly()</code> 와 <code>quack()</code> 같은 메소드를 일일이 살펴봐야하고 상황에따라 오버라이드로 해야할수있다.</p><p>상속활용이 맞는건가.. 다시생각해보자.</p><p>그렇다면 인터페이스를 사용한다면?</p><p><img src="https://user-images.githubusercontent.com/55419159/141428073-9d371761-e436-4073-a117-b51220dc1ada.png" alt="image"></p><p>코드중복이 엄청나겠지..<br>메소드 몇게 오버라이드 해야하는것을 피하다가 날아가는 동작 바꾸기위해 새롭게 생긴 모든 <code>Duck</code> 서브클래스들을 전부 고쳐야하네.</p><h3 id="✅-디자인패턴을-적용할-때"><a href="#✅-디자인패턴을-적용할-때" class="headerlink" title="✅ 디자인패턴을 적용할 때"></a>✅ 디자인패턴을 적용할 때</h3><p>상속을 사용하는것도 서브클래스들의 행동이 바뀔수 있는데도 모든 서브클래스들이 하나의 행동을 사용하는것이 문제가되고<br><code>Flyable</code>, <code>Quackable</code> 인터페이스 사용을 하는 방법도 코드재사용을 할수없다는 문제가 있다.<br>(한가지의 행동을 바꿀때마다 그 행동이 정의되어있는 모든 서브클래스들은 전부 찾아서 코드를 일일히 고쳐야 하고, 그 과정에서 새로운 버그가 생길 가능성이 많음!)</p><h4 id="디자인-원칙-1"><a href="#디자인-원칙-1" class="headerlink" title="디자인 원칙 1"></a>디자인 원칙 1</h4><blockquote><p><em>애플리케이션에서 <strong>달라지는 부분</strong>을 찾아내고, 달라지지 않는 부분으로부터 <strong>분리</strong>시킨다.</em></p></blockquote><p>달라지는 부분을 찾아서 나머지 코드에 영향을 주지 않도록 <strong>캡슐화</strong>한다.</p><p>오리마다 달라지는 부분은.. <code>fly()</code> 와 <code>quack()</code> 이다.<br>이러한 행동을 <code>Duck</code> 클래스로부터 분리시키기 위해 나타낼 새로운 <strong>클래스의 집합</strong>을 만들어 준다.</p><p><img src="https://user-images.githubusercontent.com/55419159/141428230-1e024573-ef62-4224-8076-19ec12155a53.png" alt="image"></p><p>행동에 관한 인터페이스를 만들고, 구체적인 행동을 구현하는 클래스들을 만든다.<br>이제 더이상 <code>Duck</code>에서 나는 행동과 소리를 내는 행동을 Duck 클래스나 그 서브클래스에서 구현하지않고 <strong>다른클래스에게 위임</strong>하게 된다.</p><h4 id="디자인-원칙-2"><a href="#디자인-원칙-2" class="headerlink" title="디자인 원칙 2"></a>디자인 원칙 2</h4><blockquote><p><em><del>상속</del>보다는 <strong>구성</strong>을 활용한다.</em></p></blockquote><h4 id="디자인-원칙-3"><a href="#디자인-원칙-3" class="headerlink" title="디자인 원칙 3"></a>디자인 원칙 3</h4><blockquote><p><em><del>구현</del>이 아닌 <strong>인터페이스</strong>에 맞춰서 프로그래밍 한다.</em></p></blockquote><p>그리고 <code>Duck</code> 클래스는 두개의 인터페이스 형식의 인스턴스 변수가 추가가 된다.</p><p><img src="https://user-images.githubusercontent.com/55419159/141428498-583654d3-79b9-4c32-9813-b9c92c3dc16e.png" alt="image"></p><p><code>Duck</code> 클래스에서는 이제 행동을 직접 처리하는 대신 새로 만든 <code>performQuck()</code>, <code>performFly()</code> 메소드에서 각각 <code>FlyBehavior</code>, <code>QuackBehavior</code> 로 참조되는 객체에 그 행동을 위임해 줄것이다.</p><hr><h2 id="🛒-정리"><a href="#🛒-정리" class="headerlink" title="🛒 정리"></a>🛒 정리</h2><h3 id="⚙️-소스코드"><a href="#⚙️-소스코드" class="headerlink" title="⚙️ 소스코드"></a>⚙️ 소스코드</h3><h4 id="Duck-추상클래스-구현"><a href="#Duck-추상클래스-구현" class="headerlink" title="Duck 추상클래스 구현"></a><code>Duck</code> 추상클래스 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    FlyBehavior flyBehavior;</span><br><span class="line">    QuackBehavior quackBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;물에 떠있습니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        quackBehavior.quack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior.fly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlyBehavior</span><span class="params">(FlyBehavior flyBehavior)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flyBehavior = flyBehavior;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuackBehavior</span><span class="params">(QuackBehavior quackBehavior)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.quackBehavior = quackBehavior;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FlyBehavior-QuackBehavior-구현-및-구체적인-행동-클래스-구현"><a href="#FlyBehavior-QuackBehavior-구현-및-구체적인-행동-클래스-구현" class="headerlink" title="FlyBehavior, QuackBehavior 구현 및 구체적인 행동 클래스 구현"></a><code>FlyBehavior</code>, <code>QuackBehavior</code> 구현 및 구체적인 행동 클래스 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;난다!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;날지못해요.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;꿱꿱.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;삑삑.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.prinln(<span class="string">&quot;조용.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Duck을-상속해-MallardDuck-구현"><a href="#Duck을-상속해-MallardDuck-구현" class="headerlink" title="Duck을 상속해 MallardDuck 구현"></a><code>Duck</code>을 상속해 <code>MallardDuck</code> 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MallardDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> FlyWithWings();</span><br><span class="line">        quackBehavior = <span class="keyword">new</span> Quack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;청둥오리 입니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="활용"><a href="#활용" class="headerlink" title="활용"></a>활용</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniDuckSimulator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Duck mallard = <span class="keyword">new</span> MallardDuck();</span><br><span class="line"></span><br><span class="line">        mallard.performQuack();</span><br><span class="line">        mallard.performFly();</span><br><span class="line"></span><br><span class="line">        mallard.setFlyBehavior(<span class="keyword">new</span> FlyNoWay());</span><br><span class="line">        mallard.performFly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🔎-요약하자면"><a href="#🔎-요약하자면" class="headerlink" title="🔎 요약하자면.."></a>🔎 요약하자면..</h3><blockquote><p>‘A는 B이다’ 보다 ‘A에는 B가 있다’가 나을 수 있다.</p></blockquote><p>각각의 오리들에게는 <code>FlyBehavior</code>와 <code>QuackBehavior</code>이 있으며 행동을 위임 받는다.</p><p><img src="https://user-images.githubusercontent.com/55419159/141429071-35b99838-2961-4ecf-b606-f6358c62d4ec.png" alt="image"></p><p>이런 식으로 두클래스를 합치는 것을 <strong>구성(composition)을 이용하는 것</strong>이라고 한다.</p><p>여기의 오리 클래스는 행동을 상속 받는 대신, 올바른 <strong>행동 객체로 구성</strong>됨으로써 행동을 부여받게 된다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;📍-스트레티지-패턴이란&quot;&gt;&lt;a href=&quot;#📍-스트레티지-패턴이란&quot; class=&quot;headerlink&quot; title=&quot;📍 스트레티지 패턴이란&quot;&gt;&lt;/a&gt;📍 스트레티지 패턴이란&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;알고리즘군을 정의하고 각</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="스트레티지" scheme="http://won0935.github.io/tags/%EC%8A%A4%ED%8A%B8%EB%A0%88%ED%8B%B0%EC%A7%80/"/>
    
  </entry>
  
  <entry>
    <title>컴포지트 패턴</title>
    <link href="http://won0935.github.io/2021/11/11/DesignPattern/CompositePattern/"/>
    <id>http://won0935.github.io/2021/11/11/DesignPattern/CompositePattern/</id>
    <published>2021-11-11T07:52:55.365Z</published>
    <updated>2021-11-11T10:05:19.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🌲-컴포지트-패턴이란"><a href="#🌲-컴포지트-패턴이란" class="headerlink" title="🌲 컴포지트 패턴이란"></a>🌲 컴포지트 패턴이란</h2><blockquote><p>객체들을 트리 구조로 구성하여 부분과 전체를 나타내는 계층구조로 만들수 있다.<br>클라이언트에서 개별 객체와 다른 객체들오 구성된 복합 객체(composite)를 똑같은 방법으로 다룰 수 있다.</p></blockquote><p>식당 메뉴를 예로들어 생각해본다면<br>중첩되어 있는 메뉴 그룹과 메뉴 항목을 똑같은 구조 내에서 처리할수 있게끔 하는 것이다.</p><p>메뉴와 메뉴항목을 같은 구조에 집어넣어서 <strong>부분-전체 계층구조</strong>를 생성할수 있다.</p><p>이런 복합구조를 사용하면 복합 객체와 개별 객체에 대해 구분없이 똑같은 작업을 적용할 수 있다.</p><hr><h2 id="⛵️-컴포지트-패턴의-이해"><a href="#⛵️-컴포지트-패턴의-이해" class="headerlink" title="⛵️ 컴포지트 패턴의 이해"></a>⛵️ 컴포지트 패턴의 이해</h2><p><img src="https://user-images.githubusercontent.com/55419159/141273718-978b7d56-3eb8-496d-99cb-367e5a2380b6.png" alt="image"></p><h3 id="🚀-활용-예시"><a href="#🚀-활용-예시" class="headerlink" title="🚀 활용 예시"></a>🚀 활용 예시</h3><p><em>컴포지트 패턴을 메뉴에 적용시켜본다면…</em></p><p>우선 구성요소 <strong>인터페이스를 만드는 것</strong>부터 시작해보자.</p><p>이 인터페이스는 메뉴와 메뉴 항목 모두에 적용되는 <strong>공통 인터페이스</strong> 역할을 하며, 이 인터페이스가 있어야만 그 들을 <strong>똑같은 방법</strong>으로 처리할 수 있다. </p><p>즉 메뉴와 메뉴 항목에 대해서 같은 메소드를 호출 할 수 있게 된다.</p><p><img src="https://user-images.githubusercontent.com/55419159/141273915-f2bb7cba-e951-4955-92e0-2ab3eb8ed03a.png" alt="image"></p><h4 id="Component-추상클래스-구현"><a href="#Component-추상클래스-구현" class="headerlink" title="Component 추상클래스 구현"></a><code>Component</code> 추상클래스 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> MenuComponent <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Component-를-상속받는-Leaf-객체-구현"><a href="#Component-를-상속받는-Leaf-객체-구현" class="headerlink" title="Component 를 상속받는 Leaf 객체 구현"></a><code>Component</code> 를 상속받는 <code>Leaf</code> 객체 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123; <span class="comment">//MenuItem은 Leaf에 해당한다.</span></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    String description;</span><br><span class="line">    <span class="keyword">boolean</span> vegetarian;</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">        <span class="keyword">this</span>.vegetarian = vegetarian;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vegetarian;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; <span class="comment">//중요 - Composite 객체에서 공유하게 된다.</span></span><br><span class="line">        System.out.println(getName());</span><br><span class="line">        <span class="keyword">if</span> (isVegetarian()) System.out.println(<span class="string">&quot;(v)&quot;</span>);</span><br><span class="line">        System.out.println(getPrice());</span><br><span class="line">        System.out.println(getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Component-를-상속받는-Composite-객체-구현"><a href="#Component-를-상속받는-Composite-객체-구현" class="headerlink" title="Component 를 상속받는 Composite 객체 구현"></a><code>Component</code> 를 상속받는 <code>Composite</code> 객체 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">extends</span> <span class="title">Menucomponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Menucomponent&gt; menuComponents = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    String name;</span><br><span class="line">    String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Menu</span><span class="params">(String name, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        menuComponents.add(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        menuComponents.remove(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MenuComponent <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuComponents.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; <span class="comment">//중요 - Leaf 객체에서 공유하게 된다.</span></span><br><span class="line">        System.out.println(getName());</span><br><span class="line">        System.out.println(getDescription());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------&quot;</span>);</span><br><span class="line">        Iterator&lt;MenuComponent&gt; iterator = menuComponents.iterator();    <span class="comment">//Menu 정보 뿐아니라 Menu안의 아이템까지 출력</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            MenuComponent menuComponent = iterator.next();</span><br><span class="line">            menuComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client-객체-구현"><a href="#Client-객체-구현" class="headerlink" title="Client 객체 구현"></a><code>Client</code> 객체 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waitress</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    MenuComponent allMenus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Waitress</span><span class="params">(menuComponent allMenus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.allMenus = allMenus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        allMenus.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuTestDrive</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MenuComponent pancakeHouseMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;펜케이크 하우스 메뉴&quot;</span>, <span class="string">&quot;아침 메뉴&quot;</span>);</span><br><span class="line">        MenuComponent dinerMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;객체마을 식당 메뉴&quot;</span>, <span class="string">&quot;점심 메뉴&quot;</span>);</span><br><span class="line">        MenuComponent cafeMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;카페 메뉴&quot;</span>, <span class="string">&quot;저녁 메뉴&quot;</span>);</span><br><span class="line">        MenuComponent dessertMenu = <span class="keyword">new</span> Menu(<span class="string">&quot;디저트 메뉴&quot;</span>, <span class="string">&quot;디저트를 즐겨 보세요&quot;</span>);</span><br><span class="line">        MenuComponent allMenus = <span class="keyword">new</span> Menu(<span class="string">&quot;전체 메뉴&quot;</span>, <span class="string">&quot;전체 메뉴&quot;</span>);</span><br><span class="line"></span><br><span class="line">        allMenus.add(pancakeHouseMenu);</span><br><span class="line">        allMenus.add(dinerMenu);</span><br><span class="line">        allMenus.add(cafeMenu);</span><br><span class="line"></span><br><span class="line">        dinerMenu.add(<span class="keyword">new</span> menuItem(<span class="string">&quot;파스타&quot;</span>, <span class="string">&quot;마리나라 소스 스파게티.&quot;</span>, <span class="keyword">true</span>, <span class="number">3.89</span>));</span><br><span class="line">        dinerMenu.add(dessertMenu);</span><br><span class="line"></span><br><span class="line">        dessertMenu.add(<span class="keyword">new</span> menuItem(<span class="string">&quot;애플 파이&quot;</span>, <span class="string">&quot;바삭바삭한 크러스트에 바닐라아이스크림이&quot;</span>, <span class="keyword">true</span>, <span class="number">1.59</span>));</span><br><span class="line"></span><br><span class="line">        Waitress waitress = <span class="keyword">new</span> Waitress(allMenus);</span><br><span class="line">        waitress.printMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🧨-컴포지트패턴-vs-단일역할원칙"><a href="#🧨-컴포지트패턴-vs-단일역할원칙" class="headerlink" title="🧨 컴포지트패턴 vs 단일역할원칙"></a>🧨 컴포지트패턴 vs 단일역할원칙</h2><p>한 클래스에서 한 역할만 맡아야 한다고 했는데,<br>여기서는 <strong>계층구조를 관리하는 역할</strong>과 <strong>메뉴관련 작업을 처리하는 역할</strong> 두 가지를 처리하고 있다</p><blockquote><p>컴포지트 패턴은 <strong>단일 역할 원칙</strong>을 깨면서, 대신에 <strong>투명성을 확보</strong>하기 위한 패턴이다.</p></blockquote><hr><h2 id="🛠-컴포지트-이터레이터-패턴-적용"><a href="#🛠-컴포지트-이터레이터-패턴-적용" class="headerlink" title="🛠 컴포지트 + 이터레이터 패턴 적용"></a>🛠 컴포지트 + 이터레이터 패턴 적용</h2><h3 id="컴포지트-패턴-내에서-이터레이터-패턴을-활용해보자"><a href="#컴포지트-패턴-내에서-이터레이터-패턴을-활용해보자" class="headerlink" title="컴포지트 패턴 내에서 이터레이터 패턴을 활용해보자"></a>컴포지트 패턴 내에서 이터레이터 패턴을 활용해보자</h3><h4 id="Composite-Leaf-객체에-이터레이터-적용"><a href="#Composite-Leaf-객체에-이터레이터-적용" class="headerlink" title="Composite, Leaf 객체에 이터레이터 적용"></a><code>Composite</code>, <code>Leaf</code> 객체에 이터레이터 적용</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"><span class="comment">//나머지 코드는 그대로</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;MenuComponent&gt; <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CompositeIterator(menucomponents.iterator());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"><span class="comment">//나머지 코드는 그대로</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;MenuComponent&gt; <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NullIterator();<span class="comment">//널 반복자.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NullIterator-란"><a href="#NullIterator-란" class="headerlink" title="NullIterator 란"></a><code>NullIterator</code> 란</h4><p><code>MenuItem</code>에 대해서는 반복작업을 할 대상이없다. 그래서 <code>createIterator()</code>메소드를 구현하기가 애매해진다.</p><ol><li>그냥 null을 리턴한다. 그렇다면 클라이언트에서 리턴값이 널인지 아닌지를 판단하기 위해 조건문을 써야하는 단점이있다. </li><li>hasNext()가 호출되었을 때 무조건 false 를 리턴하는 반복자를 리턴한다.</li></ol><p>두번째 방법은 여전히 반복자를 리턴할수 있기 때문에 클라이언트에서는 리턴된 객체가 <strong>널 객체인지에 대해 신경 쓸 필요가 없다.</strong></p><p>이렇게 아무일도 하지 않는 반복자를 <code>NullIterator</code>라고 부른다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Iterator-구현"><a href="#Iterator-구현" class="headerlink" title="Iterator 구현"></a><code>Iterator</code> 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Iterator&lt;MenuComponent&gt;&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompositeIterator</span><span class="params">(Iterator iterator)</span> </span>&#123;</span><br><span class="line">        stack.push(iterator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MenuComponent <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterator&lt;MenuComponent&gt; iterator = stack.peek();</span><br><span class="line">        MenuComponent component = iterator.next();</span><br><span class="line">        <span class="keyword">if</span> (component <span class="keyword">instanceof</span> Menu) stack.push(((Menu) component).iterator());</span><br><span class="line">        <span class="keyword">return</span> component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stack.empty()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Iterator&lt;MenuComponent&gt; iterator = stack.peek();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!iterator.hasNext()) &#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">            <span class="keyword">return</span> hasNext();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupporttedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Iterator-를-적용한-Client-구현"><a href="#Iterator-를-적용한-Client-구현" class="headerlink" title="Iterator 를 적용한 Client 구현"></a><code>Iterator</code> 를 적용한 <code>Client</code> 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waitress</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    MenuComponent allMenus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Waitress</span><span class="params">(MenuComponent allMenus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.allMenus = allMenus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        allMenus.print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printVegetarianMenu</span><span class="params">()</span> </span>&#123; <span class="comment">//이 메소드는 &#x27;채식메뉴 인 것&#x27;만 추려낸다</span></span><br><span class="line">        Iterator&lt;MenuComponent&gt; iterator = allMenus.createIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Menucomponent menuComponent = iterator.next();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (menuComponent.isVegetarian()) menuComponent.print();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedOpoerationException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="try-문을-쓴-이유"><a href="#try-문을-쓴-이유" class="headerlink" title="try 문을 쓴 이유"></a>try 문을 쓴 이유</h3><ul><li><p>위와 같이 <code>try/catch</code> 코드를 쓴이유는 <code>instanceof</code> 를 써서 실행중에 형식을 확인하여 <code>isVegetarian()</code>을 호출할 수도 있다.<br>하지만 그렇게하면 <code>Menu</code>와 <code>MenuItem</code>을 <strong>똑같이 다루지 않게 되는 셈</strong>이되어 <strong>투명성</strong>을 잃어버리게 된다.</p></li><li><p><code>Menu</code> 의 <code>isVegetarian()</code>메소드에서 무조건 <code>false</code>를 리턴하도록 하는 방법도 있다.<br>이렇게하면 코드도 간단해지고 <strong>투명성도 계속 유지</strong>할수 있다. </p></li><li><p>하지만 위 예제에서는 <code>Menu</code>에서는 그 메소드가 <strong>지원되지 않는다는 것</strong>을 분명하게 나타내기 위해서 사용되었다.</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;🌲-컴포지트-패턴이란&quot;&gt;&lt;a href=&quot;#🌲-컴포지트-패턴이란&quot; class=&quot;headerlink&quot; title=&quot;🌲 컴포지트 패턴이란&quot;&gt;&lt;/a&gt;🌲 컴포지트 패턴이란&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;객체들을 트리 구조로 구성하여 </summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="컴포지트" scheme="http://won0935.github.io/tags/%EC%BB%B4%ED%8F%AC%EC%A7%80%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>이터레이터 패턴</title>
    <link href="http://won0935.github.io/2021/11/09/DesignPattern/IteratePattern/"/>
    <id>http://won0935.github.io/2021/11/09/DesignPattern/IteratePattern/</id>
    <published>2021-11-09T11:33:27.687Z</published>
    <updated>2021-11-11T09:30:49.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🎛-이터레이터-패턴이란"><a href="#🎛-이터레이터-패턴이란" class="headerlink" title="🎛 이터레이터 패턴이란"></a>🎛 이터레이터 패턴이란</h2><blockquote><p>컬렉션 구현 방법을 <strong>노출시키지 않으면서도</strong>, 그 집합체 안에 들어있는 <strong>모든 항목에 접근할 수 있는 방법</strong>을 제공한다.</p></blockquote><p>컬렉션 객체 안에 들어있는 모든 항목에 <strong>접근하는 방식이 통일되어 있으면</strong> 어떤 종류의 집합체에 대해서도 사용할 수 있는 다형적인 코드를 만들수 있다.</p><p><code>이터레이터 패턴</code>을 사용하면 모든 항목에 일일이 접근하는 작업을 컬렉션 객체가 아닌 <strong>반복자 객체</strong>에서 맡게 된다.<br>이렇게 하면 집합체의 인터페이스 및 구현이 간단해질 뿐 아니라, 집합체에서는 반복작업에서 손을 떼고 원래 자신이 할 일(객체 컬렉션 관리)에만 전념할 수 있다</p><hr><h2 id="🔎-이터레이터-패턴의-이해"><a href="#🔎-이터레이터-패턴의-이해" class="headerlink" title="🔎 이터레이터 패턴의 이해"></a>🔎 이터레이터 패턴의 이해</h2><p><img src="https://user-images.githubusercontent.com/55419159/141257200-343f3e03-e28d-4be6-bc54-9f613d0aaf71.png" alt="image"></p><h3 id="🚀-활용-예시"><a href="#🚀-활용-예시" class="headerlink" title="🚀 활용 예시"></a>🚀 활용 예시</h3><p><em>두개의 서로 다른 식당이있고 각각의 식당에서 메뉴를 구현한다고 가정해보자</em></p><p><code>java.util.Iterator</code> 인터페이스를 사용해서 <code>Iterator</code>를 적용시켜보자.</p><h4 id="이터레이트-인터페이스"><a href="#이터레이트-인터페이스" class="headerlink" title="이터레이트 인터페이스"></a>이터레이트 인터페이스</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Menu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;MenuItem&gt; <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="인터페이스를-구현하는-객체-생성"><a href="#인터페이스를-구현하는-객체-생성" class="headerlink" title="인터페이스를 구현하는 객체 생성"></a>인터페이스를 구현하는 객체 생성</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PancakeHouseMenu</span> <span class="keyword">implements</span> <span class="title">Menu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;MenuItem&gt; menuItems; <span class="comment">//이 객체는 메뉴들이 ArrayList 이다</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PancakeHouseMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menuItems = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        additem(<span class="string">&quot;K&amp;B 팬케이크 세트&quot;</span>, <span class="string">&quot;스크램블드 에그와 토스트가 곁들여진 펜케이크&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>);</span><br><span class="line">        additem(<span class="string">&quot;레귤러 팬케이크 세트&quot;</span>, <span class="string">&quot;달걀 후라이와 소시지가 곁들여진 펜케이크&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>);</span><br><span class="line">        additem(<span class="string">&quot;블루베리 펜케이크&quot;</span>, <span class="string">&quot;신선한 블루베리와 블루베리 시럽으로 만든 펜케이크&quot;</span>, <span class="keyword">true</span>, <span class="number">3.49</span>);</span><br><span class="line">        additem(<span class="string">&quot;와플&quot;</span>, <span class="string">&quot;와플, 취향에 따라 블루베리나 딸기를 얹을 수 있습니다.&quot;</span>, <span class="keyword">true</span>, <span class="number">3.59</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">additem</span><span class="params">(string name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetarian, price);</span><br><span class="line">        menuItem.add(menuItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;MenuItem&gt; <span class="title">getMenuItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;MenuItem&gt; <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems.iterator(); <span class="comment">//ArrayList 컬렉션은 반복자를 리턴하는 iterator() 라는 메소드가 있음.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DinerMenu</span> <span class="keyword">implements</span> <span class="title">Menu</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ITEMS = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> numberOfItems = <span class="number">0</span>;</span><br><span class="line">    MenuItem[] menuItems; <span class="comment">//이 객체는 메뉴들이 배열 이다</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DinerMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menuItems = <span class="keyword">new</span> MenuItem[MAX_ITEMS];</span><br><span class="line">        additem(<span class="string">&quot;채식주의자용 BLT&quot;</span>, <span class="string">&quot;통밀 위에 (식물성)베이컨, 상추, 토마토를 얹은 메뉴&quot;</span>, <span class="keyword">true</span>, <span class="number">2.99</span>);</span><br><span class="line">        additem(<span class="string">&quot;BLT&quot;</span>, <span class="string">&quot;통밀 위에 베이컨, 상추, 토마토를 얹은 메뉴&quot;</span>, <span class="keyword">false</span>, <span class="number">2.99</span>);</span><br><span class="line">        additem(<span class="string">&quot;오늘의 스프&quot;</span>, <span class="string">&quot;감자 샐러드를 곁들인 오늘의 스프&quot;</span>, <span class="keyword">false</span>, <span class="number">3.29</span>);</span><br><span class="line">        additem(<span class="string">&quot;핫도그&quot;</span>, <span class="string">&quot;사워크라우트, 갖은 양념, 양파, 치즈가 곁들여진 핫도그&quot;</span>, <span class="keyword">false</span>, <span class="number">3.05</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">additem</span><span class="params">(string name, String description, <span class="keyword">boolean</span> vegetarian, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetarian, price);</span><br><span class="line">        <span class="keyword">if</span> (nemberOfItems &gt;= MAX_ITEMS) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;죄송합니다, 메뉴가 꽉 찼습니다. 더 이상 추가할 수 없습니다.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            menuItems[numberOfItems] = menuItem;</span><br><span class="line">            numberOfItems = numberOfItems + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MenuItem[] getMenuItems() &#123;</span><br><span class="line">        <span class="keyword">return</span> menuItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;MenuItem&gt; <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DinerMenujIterator(menuItems);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java-util-Iterator-인터페이스를-사용해서-Iterator-객체를-구현"><a href="#java-util-Iterator-인터페이스를-사용해서-Iterator-객체를-구현" class="headerlink" title="java.util.Iterator 인터페이스를 사용해서 Iterator 객체를 구현"></a><code>java.util.Iterator</code> 인터페이스를 사용해서 <code>Iterator</code> 객체를 구현</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DinerMenuIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">MenuItem</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    Menuitem[] list;</span><br><span class="line">    <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DinerMenuIterator</span><span class="params">(MenuItem[] list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MenuItem <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MenuItem menuItem = list[position];</span><br><span class="line">        position += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> menuItem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (position &gt;= list.length || list[position] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; <span class="comment">// 반드시 기능을 제공하지 않아도됨 그렇다면 java.lang.UnsupportedOperationException을 던지도록 하면됨</span></span><br><span class="line">        <span class="keyword">if</span> (position &lt;= <span class="number">0</span>) <span class="function">Throw new <span class="title">IllegalStateException</span><span class="params">(<span class="string">&quot;next()가 한번도 호출되지 않음.&quot;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (list[position - <span class="number">1</span>] != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = position - <span class="number">1</span>; i &lt; (list.length - <span class="number">1</span>); i++) &#123;</span><br><span class="line">                list[i] = list[i + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            list[list.length - <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PancakeHouseMenu 는 ArrayList안에 이미 Iterator 구현되어 있기 때문에 생략해도 된다.</span></span><br></pre></td></tr></table></figure><h4 id="클라이언트-객체에서의-활용"><a href="#클라이언트-객체에서의-활용" class="headerlink" title="클라이언트 객체에서의 활용"></a>클라이언트 객체에서의 활용</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waitress</span> </span>&#123; </span><br><span class="line">    ArrayList&lt;Menu&gt; menus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Waitress</span><span class="params">(ArrayList&lt;Menu&gt; menus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menus = menus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Iterator menuIterator = menus.iterator();</span><br><span class="line">        <span class="keyword">while</span> (menuIterator.hasNext()) &#123;</span><br><span class="line">            Menu menu = menuIterator.next();</span><br><span class="line">            printMenu(menu.createIterator());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">(Iterator&lt;MenuItem&gt; iterator)</span> </span>&#123; <span class="comment">//클라이언트 객체에서의 반복작업이 매우 간단해졌다</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            MenuItem menuItem = iterator.next();</span><br><span class="line">            System.out.println(menuItem.getName());</span><br><span class="line">            System.out.println(menuItem.getPrice());</span><br><span class="line">            System.out.println(menuItem.getDescription());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuTestDrive</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Menu&gt; menuList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        menuList.add(<span class="keyword">new</span> PancakeHouseMenu());</span><br><span class="line">        menuList.add(<span class="keyword">new</span> DinerMenu());</span><br><span class="line">        Waitress waitress = <span class="keyword">new</span> Waitress(menuList);</span><br><span class="line">        waitress.printMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>이제 <strong>집합체 내</strong>에서 어떤 식으로 일이 처리되는 지에 대해서 <strong>전혀 모르는 상태</strong>에서도 그 안에 들어있는 모든 항목들에 대해서 반복작업을 수행할수 있게 되었다.</p></blockquote><p>집합체에서 내부 컬랙션과 관련된 기능과 반복자용 메소드 관련기능을 전부 구현하도록 했다면 어떨까?</p><p>우선 클래스에서 원래 그 클래스의 역할(집합체 관리) 외에 다른 역할(반복자 메소드)을 처리하도록 하면, 두 가지 이유로 인해 그 클래스가 바뀔 수 있게 된다.</p><ol><li>컬렉션이 어떤 이유로 인해 바뀌게 되면 그 클래스의 <strong>소스코드</strong>를 바꿔야 한다. </li><li><strong>반복자 관련 기능</strong>이 바뀌었을 때도 클래스가 바뀌여야 한다.</li></ol><hr><h2 id="🛡-디자인-원칙"><a href="#🛡-디자인-원칙" class="headerlink" title="🛡 디자인 원칙"></a>🛡 디자인 원칙</h2><blockquote><p><em>클래스를 바꾸는 이유는 <strong>한 가지</strong> 뿐이어야 한다.</em></p></blockquote><p> <strong>클래스를 고치는 것은 최대한 피해야 한다.</strong></p><p> 때문에 코드를 변경할 만한 이유가 두가지가 되면 그만큼 그 클래스를 나중에 고쳐야 할 가능성이 커지게 될 뿐 아니라, 디자인에 있어서 두 가지 부분이 동시에 영향이 미치게 된다.</p><p>이 원칙에 따르면 <strong>한 역할은 한 클래스에서만</strong> 맡게 해야 한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;🎛-이터레이터-패턴이란&quot;&gt;&lt;a href=&quot;#🎛-이터레이터-패턴이란&quot; class=&quot;headerlink&quot; title=&quot;🎛 이터레이터 패턴이란&quot;&gt;&lt;/a&gt;🎛 이터레이터 패턴이란&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;컬렉션 구현 방법을 &lt;s</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="이터레이터" scheme="http://won0935.github.io/tags/%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0/"/>
    
  </entry>
  
  <entry>
    <title>템플릿메소드 패턴</title>
    <link href="http://won0935.github.io/2021/11/08/DesignPattern/TemplateMethodPattern/"/>
    <id>http://won0935.github.io/2021/11/08/DesignPattern/TemplateMethodPattern/</id>
    <published>2021-11-08T11:12:10.891Z</published>
    <updated>2021-11-09T11:33:27.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="📦-템플릿메소드-패턴이란"><a href="#📦-템플릿메소드-패턴이란" class="headerlink" title="📦 템플릿메소드 패턴이란"></a>📦 템플릿메소드 패턴이란</h2><blockquote><p>메소드에서 알고리즘의 <strong>골격</strong>을 정의한다.<br>알고리즘의 여러 단계 중 일부는 <strong>서브클래스</strong>에서 구현할 수 있다.<br>템플릿 메소드를 이용하면 알고리즘의 <em>구조는 그대로 유지하면서</em> 서브클래스에서 <strong>특정 단계를 재정의</strong> 할 수 있다.</p></blockquote><p>알고리즘의 틀을 만들기 위한 패턴이다.<br>이 패턴에서 틀(템플릿)이란 일련의 단계들로 알고리즘을 정의한 메소드다.<br>여러 던계 가운데 하나 이상이 추상 메소드로 정의되며, 그 추상 메소드는 서브클래스에서 구현된다.<br>이렇게 하면 서브클래스에서 일부분의 단계를 구현할 수 있도록 하면서도 알고리즘의 구조는 바꾸지 않아도 되도록 할 수 있다.</p><hr><h2 id="🔎-템플릿메소드-패턴의-이해"><a href="#🔎-템플릿메소드-패턴의-이해" class="headerlink" title="🔎 템플릿메소드 패턴의 이해"></a>🔎 템플릿메소드 패턴의 이해</h2><h3 id="🚀-활용-예시"><a href="#🚀-활용-예시" class="headerlink" title="🚀 활용 예시"></a>🚀 활용 예시</h3><p><em>커피와 차가 만들어 지는법을 비교해보자.</em></p><h4 id="커피-만드는-법"><a href="#커피-만드는-법" class="headerlink" title="커피 만드는 법"></a>커피 만드는 법</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) 물을 끓인다.</span><br><span class="line"><span class="number">2</span>) 끓는 물에 커피를 우려낸다.</span><br><span class="line"><span class="number">3</span>) 커피를 컵에 따른다.</span><br><span class="line"><span class="number">4</span>) 설탕과 우유를 추가한다. </span><br></pre></td></tr></table></figure><h4 id="홍차-만드는-법"><a href="#홍차-만드는-법" class="headerlink" title="홍차 만드는 법"></a>홍차 만드는 법</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) 물을 끓인다. <span class="comment">//동일</span></span><br><span class="line"><span class="number">2</span>) 끓는 물에 차를 우려낸다. <span class="comment">//~~ 우려낸다</span></span><br><span class="line"><span class="number">3</span>) 차를 컵에 따른다. <span class="comment">//동일</span></span><br><span class="line"><span class="number">4</span>) 레몬을 추가한다. <span class="comment">//~~ 추가한다</span></span><br></pre></td></tr></table></figure><p>거의 동일하다.<br>공통으로 사용할 수 있는 방법을 생각해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prepareRecipe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brewCoffeeGrinds();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addSugarAndMilk();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;물 끓이는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breqCoffeeGrinds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;필터를 통해 커피를 우려내는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;컵에 따르는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSugarAndMilk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;설탕과 우유를 추가하는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prepareRecipe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        steepTeaBag();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addLemon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;물 끓이는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">steepTeaBag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;차를 우려내는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;컵에 따르는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLemon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;레몬을 추가하는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="공통부분-추상화"><a href="#공통부분-추상화" class="headerlink" title="공통부분 추상화"></a>공통부분 추상화</h4><p>공통 단계를 묶어보면…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">final</span> <span class="title">prepareRecipe</span><span class="params">()</span> </span>&#123; <span class="comment">//공통적인 단계는 수정할 수 없도록 final로 선언한다.</span></span><br><span class="line">        boilWater();</span><br><span class="line">        brew(); <span class="comment">//공통으로 사용</span></span><br><span class="line">        pourInCup();</span><br><span class="line">        addcondiments();  <span class="comment">//공통으로 사용</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span></span>;  <span class="comment">//상속객체에서 직접 구현할 수 있도록 추상메소드로 선언한다</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addcondiments</span><span class="params">()</span></span>;  <span class="comment">//상속객체에서 직접 구현할 수 있도록 추상메소드로 선언한다</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;물 끓이는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;컵에 따르는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;필터를 통해 커피를 우려내는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;설탕과 우유를 추가하는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> <span class="keyword">extends</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;차를 우려내는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;레몬을 추가하는 중&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🚨-헐리우드-원칙"><a href="#🚨-헐리우드-원칙" class="headerlink" title="🚨 헐리우드 원칙"></a>🚨 헐리우드 원칙</h2><p><em>‘먼저 연락하지 마세요. 저희가 연락 드리겠습니다.’</em></p><h3 id="의존성-부패"><a href="#의존성-부패" class="headerlink" title="의존성 부패"></a>의존성 부패</h3><p>이 디자인 원칙을 확용하면 <strong>의존성 부패</strong>(dependency rot)를 방지 할수 있다.<br>어떤 고수준 구성요소가 저수준 구성요소에 의존하고, 그 저수준 구성요소는 다시 고수준 구성요소에 의존하고, 그 고수준 구성요소는 다시 또 다른 구성요소에 의존하고.. </p><p>이런 식으로 의존성이 복잡하게 꼬여있는 것을 <strong>의존성 부패</strong>라고 한다.</p><p><strong>헐리우드 원칙</strong>을 사용하면, 저수준 구성요소에서 시스템에 접속을 할수는 있지만, 언제 어떤 식으로 그 구성요소들을 사용할지는 <strong>고수준 구성요소에서 결정</strong>하게 된다.</p><blockquote><p>즉, 저수준 구성요소는 컴퓨테이션에 참여할 수는 있지만 절대 <strong>고수준 구성요소를 직접 호출하면 안된다</strong>는 것이다.</p></blockquote><h4 id="CaffeineBeverage-디자인을-이용해-본다면"><a href="#CaffeineBeverage-디자인을-이용해-본다면" class="headerlink" title="CaffeineBeverage 디자인을 이용해 본다면.."></a>CaffeineBeverage 디자인을 이용해 본다면..</h4><p><img src="https://user-images.githubusercontent.com/55419159/140914388-faeda3ca-a3f8-4fe1-9984-490453f4bd1e.png" alt="image"></p><p><code>CaffeineBeverage</code>는 고수준 구성요소 이다.<br>음료를 만드는 방법에 대당하는 알고리즘을 장악하고 있고, 메소드 구현이 필요한 상태에서만 서브클래스를 불러낸다.</p><p><code>Coffee</code>와 <code>Tea</code> 와 같은 서브클래스는 각각의 <strong>메소드 구현을 제공하기 위한 용도</strong>로만 쓰인다.</p><p>이와같은 서브 클래스들은 고수준 구성요소인 <code>CaffeineBeverage</code> 클래스로부터 호출 당하기 전까지는 절대로 <code>CaffeineBeverage</code> 추상 클래스를 직접 호출하지 않는다.</p><p>이렇게 함으로 <code>CaffeineBeverage</code> 클래스의 클라이언트에서는 <code>Tea</code>나 <code>Coffee</code> 같은 구상 클래스가 아닌 <code>CaffeineBeverage</code>에 추상화 되어 있는 부분에 의존하게 된다. </p><p>그렇게 함으로써 <strong>전체 시스템의 의존성</strong>이 줄어들 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;📦-템플릿메소드-패턴이란&quot;&gt;&lt;a href=&quot;#📦-템플릿메소드-패턴이란&quot; class=&quot;headerlink&quot; title=&quot;📦 템플릿메소드 패턴이란&quot;&gt;&lt;/a&gt;📦 템플릿메소드 패턴이란&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;메소드에서 알고리</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="템플릿메소드" scheme="http://won0935.github.io/tags/%ED%85%9C%ED%94%8C%EB%A6%BF%EB%A9%94%EC%86%8C%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>어댑터 &amp; 파사드 패턴</title>
    <link href="http://won0935.github.io/2021/11/08/DesignPattern/AdaptAndFacadePattern/"/>
    <id>http://won0935.github.io/2021/11/08/DesignPattern/AdaptAndFacadePattern/</id>
    <published>2021-11-08T10:23:29.584Z</published>
    <updated>2021-11-23T11:02:23.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🧤-어댑터-amp-파사드-패턴이란"><a href="#🧤-어댑터-amp-파사드-패턴이란" class="headerlink" title="🧤 어댑터 &amp; 파사드 패턴이란"></a>🧤 어댑터 &amp; 파사드 패턴이란</h2><h3 id="어댑터-패턴"><a href="#어댑터-패턴" class="headerlink" title="어댑터 패턴"></a>어댑터 패턴</h3><blockquote><p>한 클래스의 인터페이스를 클라이언트에서 사용하고자하는 다른 인터페이스로 <strong>변환</strong>한다.<br>어댑터를 이용하면 인터페이스 <strong>호환성</strong> 문제 때문에 같이 쓸 수 없는 클래스들을 연결해서 쓸 수 있다.</p></blockquote><h3 id="파사드-패턴"><a href="#파사드-패턴" class="headerlink" title="파사드 패턴"></a>파사드 패턴</h3><blockquote><p>어떤 서브시스템의 일련의 인터페이스에 대한 <strong>통합된 인터페이스</strong>를 제공한다.<br>퍼사드에서 고수준 인터페이스를 정의하기 때문에 서브시스템을 더 쉽게 사용할수 있다.</p></blockquote><hr><h2 id="🔧-어댑터-패턴의-이해"><a href="#🔧-어댑터-패턴의-이해" class="headerlink" title="🔧 어댑터 패턴의 이해"></a>🔧 어댑터 패턴의 이해</h2><p><img src="https://user-images.githubusercontent.com/55419159/140725965-84c06d1c-050a-4c09-bbe1-73d91d037601.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/55419159/140726207-74aafe97-0197-473f-84ad-e3ed5bea9407.png" alt="image"></p><h3 id="🚀-활용-예시"><a href="#🚀-활용-예시" class="headerlink" title="🚀 활용 예시"></a>🚀 활용 예시</h3><p><em>칠면조를 오리로 변환하기 위해서는… (둘다 새이긴 하니까)</em></p><blockquote><p>Duck 객체가 모자라서 Turkey 객체를 대신 사용해야 하는 상황이라고 해보자.<br>인터페이스가 다르기 때문에 Turkey객체를 바로 사용할 수는 없다.<br>어댑터를 만들어 보자.</p></blockquote><h4 id="오리-인터페이스"><a href="#오리-인터페이스" class="headerlink" title="오리 인터페이스"></a>오리 인터페이스</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>; <span class="comment">//오리는 꽥꽥</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="오리-구현체"><a href="#오리-구현체" class="headerlink" title="오리 구현체"></a>오리 구현체</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">implements</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Quack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m flying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="칠면조-인터페이스"><a href="#칠면조-인터페이스" class="headerlink" title="칠면조 인터페이스"></a>칠면조 인터페이스</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span></span>; <span class="comment">//칠면조는 이렇게 운다..</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="칠면조-구현체"><a href="#칠면조-구현체" class="headerlink" title="칠면조 구현체"></a>칠면조 구현체</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildTurkey</span> <span class="keyword">implements</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Gobble gobble&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m flying a short distance&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="어댑터-구현"><a href="#어댑터-구현" class="headerlink" title="어댑터 구현"></a><strong>어댑터 구현</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurkeyAdapter</span> <span class="keyword">implements</span> <span class="title">Duck</span> </span>&#123; <span class="comment">//오리인터페이스를 구현한다.</span></span><br><span class="line">    Turkey turkey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TurkeyAdapter</span><span class="params">(Turkey turkey)</span> </span>&#123; <span class="comment">//생성자에서 칠면조를 받는다.</span></span><br><span class="line">        <span class="keyword">this</span>.turkey = turkey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        turkey.gobble(); <span class="comment">//변환 작업</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        turkey.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuckTestDrive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MallardDuck duck = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">        WildTurkey turkey = <span class="keyword">new</span> WildTurkey();</span><br><span class="line"></span><br><span class="line">        Duck turkeyAdapter = <span class="keyword">new</span> TurkeyAdapter(turkey);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;The turkey says...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        turkey.gobble();</span><br><span class="line">        turkey.fly();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;The Duck says...&quot;</span>);</span><br><span class="line">        testDuck(duck);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;The TurkeyAdapter says...&quot;</span>);</span><br><span class="line">        testDuck(turkeyAdapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDuck</span><span class="params">(Duck duck)</span> </span>&#123;</span><br><span class="line">        duck.quack();</span><br><span class="line">        duck.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="🚌-정리"><a href="#🚌-정리" class="headerlink" title="🚌 정리"></a>🚌 정리</h3><ul><li>클라이언트 -&gt; <code>request()</code> -&gt; 어댑터 - <code>translatedRequest()</code> -&gt; 어댑티.</li><li>클라이언트는 타겟 인터페이스에 맞게 구현, 어댑터는 타겟 인터페이스를 구현하며, 어댑티 인스턴스가 들어있음.</li></ul><hr><h2 id="🗿-파사드-패턴의-이해"><a href="#🗿-파사드-패턴의-이해" class="headerlink" title="🗿 파사드 패턴의 이해"></a>🗿 파사드 패턴의 이해</h2><blockquote><p>패턴을 사용할때는 항상 패턴이 어떤 용도로 쓰이는지를 잘 알아둬야 한다.<br>퍼사드 패턴은 단순화된 인터페이스를 통해서 서브시스템을 더 쉽게 사용할 수 있도록 하기위한 용도로 쓰인다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/55419159/140728533-8bf247c6-484d-4375-9746-d49960e445c3.png" alt="image"></p><h3 id="💿-DVD영화를-보려고하면"><a href="#💿-DVD영화를-보려고하면" class="headerlink" title="💿 DVD영화를 보려고하면.."></a>💿 DVD영화를 보려고하면..</h3><blockquote><p>홈씨어터로 퍼사드 패턴을 구현해보자.<br>전선과 프로젝터를 설치하고, 각 장치들을 케이블로 연결하고 등등 여러 인터페이스들이 나열되어 있다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/55419159/140728598-7bcbeb79-d888-413f-bca6-368863c1e56d.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>팝콘 기계를켠다.</span><br><span class="line"><span class="number">2.</span>팝콘 튀기기 시작.</span><br><span class="line"><span class="number">3.</span>전등을 어둡게 조절</span><br><span class="line"><span class="number">4.</span>스크린을 내린다.</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line"><span class="number">12.</span>DVD 플레이어를 켠다</span><br><span class="line"><span class="number">13.</span>DVD를 재생한다.</span><br><span class="line"></span><br><span class="line">poper.on();</span><br><span class="line">poper.pop();</span><br><span class="line">light.dim(<span class="number">10</span>)</span><br><span class="line">screen.down();</span><br><span class="line">.....</span><br><span class="line">dvd.on();</span><br><span class="line">dvd.play(movie);</span><br></pre></td></tr></table></figure><blockquote><p><em>너무 복잡하다… 버튼하나로 모든 세팅이 끝나게 할 수는 없을까?</em></p></blockquote><ul><li>이런 경우에 퍼사드를 사용하면 된다.</li><li>퍼사드 패턴은 <strong>인터페이스를 단순화시키기 위해서</strong> 인터페이스를 변경한다.</li><li><strong>통합 인터페이스</strong>를 제공하는 <strong>퍼사드 클래스</strong>를 구현함으로써 복잡한 시스템을 훨씬 쉽게 사용할 수 있다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeTheaterFacade</span> </span>&#123; <span class="comment">//영화 세팅의 모든것이 담겨있는 파사드 객체</span></span><br><span class="line">    Amplifier amp;</span><br><span class="line">    Tuner tuner;</span><br><span class="line">    Dvdplayer dvd;</span><br><span class="line">    CdPlayer cd;</span><br><span class="line">    Projector projector;</span><br><span class="line">    TheaterLights lights;</span><br><span class="line">    Screen screen;</span><br><span class="line">    PopcornPopper popper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeTheaterFacade</span><span class="params">(Amplifier amp,</span></span></span><br><span class="line"><span class="params"><span class="function">                             Tuner tuner,</span></span></span><br><span class="line"><span class="params"><span class="function">                             DvdPlayer dvd,</span></span></span><br><span class="line"><span class="params"><span class="function">                             CdPlayer cd,</span></span></span><br><span class="line"><span class="params"><span class="function">                             Projector projector,</span></span></span><br><span class="line"><span class="params"><span class="function">                             Screen screen,</span></span></span><br><span class="line"><span class="params"><span class="function">                             TheaterLights lights,</span></span></span><br><span class="line"><span class="params"><span class="function">                             PopcornPopper popper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.amp = amp;</span><br><span class="line">        <span class="keyword">this</span>.tunner = tuner;</span><br><span class="line">        <span class="keyword">this</span>.dvd = dvd;</span><br><span class="line">        <span class="keyword">this</span>.cd = cd;</span><br><span class="line">        <span class="keyword">this</span>.projector = projector;</span><br><span class="line">        <span class="keyword">this</span>.screen = screen;</span><br><span class="line">        <span class="keyword">this</span>.lights = lights;</span><br><span class="line">        <span class="keyword">this</span>.popper = popper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchMovie</span><span class="params">(String movie)</span> </span>&#123;  <span class="comment">//영화를 보고싶으면 그냥 이 메소드만 호출하면 된다!</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Get ready to watch a movie...&quot;</span>);</span><br><span class="line">        popper.on();</span><br><span class="line">        popper.pop();</span><br><span class="line">        lights.dim(<span class="number">10</span>);</span><br><span class="line">        screen.down();</span><br><span class="line">        projector.on();</span><br><span class="line">        projector.wideScreenMode();</span><br><span class="line">        amp.on();</span><br><span class="line">        amp.setDvd(dvd);</span><br><span class="line">        amp.setsurroundSound();</span><br><span class="line">        amp.setVolume(<span class="number">5</span>);</span><br><span class="line">        dvd.on();</span><br><span class="line">        dvd.play(movie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endMovie</span><span class="params">()</span> </span>&#123; <span class="comment">//끌 때도 마찬가지!</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Shutting movie theater down...&quot;</span>);</span><br><span class="line">        popper.off();</span><br><span class="line">        lights.on();</span><br><span class="line">        screen.up();</span><br><span class="line">        projector.off();</span><br><span class="line">        amp.off();</span><br><span class="line">        dvd.stop();</span><br><span class="line">        dvd.eject();</span><br><span class="line">        dvd.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeTheaterTestDrive</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// instantiate components here</span></span><br><span class="line">        HomeTheaterFacade homeTheater =</span><br><span class="line">                <span class="keyword">new</span> HomeTheaterFacade(amp, tuner, dvd, cd, projector, screen, lights, popper);</span><br><span class="line">        homeTheater.watchMovie(<span class="string">&quot;타짜&quot;</span>);</span><br><span class="line">        homeTheater.endMovie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="💰-최소지식원칙"><a href="#💰-최소지식원칙" class="headerlink" title="💰 최소지식원칙"></a>💰 최소지식원칙</h2><blockquote><p><em>‘정말 친한 친구하고만 얘기하라’</em></p></blockquote><p>어떤 객체든 그 객체와 상호작용을 하는 클래스의 개수에 주의해야 하며, 그런 객체들과 어떤 식으로 상호작용을 하는지에도 주의를 기울여야 한다는 뜻이다.</p><h3 id="⚙️-최소지식원칙을-지키는-방법"><a href="#⚙️-최소지식원칙을-지키는-방법" class="headerlink" title="⚙️ 최소지식원칙을 지키는 방법"></a>⚙️ 최소지식원칙을 지키는 방법</h3><p>어떻게 하면 여러 객체하고 인연을 맺는 것을 피할 수 있을까<br>어떤 메소드에서든지 아래와 같은 <strong>네 종류</strong>의 객체의 <code>메소드</code>만을 호출하면 된다.</p><ol><li>객체 <strong>자체</strong></li><li>메소드에 <strong>매개변수</strong>로 전달된 객체</li><li>그 메소드에서 생성하거나 <strong>인스턴스</strong>를 만든 객체</li><li>그 객체에 속하는 <strong>구성요소</strong></li></ol><h3 id="🥊-활용-예시"><a href="#🥊-활용-예시" class="headerlink" title="🥊 활용 예시"></a>🥊 활용 예시</h3><h4 id="원칙을-따르지-않은-경우"><a href="#원칙을-따르지-않은-경우" class="headerlink" title="원칙을 따르지 않은 경우"></a>원칙을 따르지 않은 경우</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thermometer thermometer=station.getThermometer(); <span class="comment">// station 오로부터 thermometer라는 객체를 받은다음</span></span><br><span class="line">        <span class="keyword">return</span> thermometer.getTemperature(); <span class="comment">//그 갹체의 getTemperature()메소드를 직접 호출.</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="원칙을-따르는-경우"><a href="#원칙을-따르는-경우" class="headerlink" title="원칙을 따르는 경우"></a>원칙을 따르는 경우</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> station.getTemperature(); <span class="comment">// Station 클래스에 thermometer에 요청을 해주는 메소드를 추가</span></span><br><span class="line">        <span class="comment">// 이렇게 하면 의존해야 하는 클래스의 개수를 줄일수 있다.</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="자동차로-예시를-들면"><a href="#자동차로-예시를-들면" class="headerlink" title="자동차로 예시를 들면"></a>자동차로 예시를 들면</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    Engine engine; <span class="comment">//이 클래스의 구성요소. 이 구성요소의 메소드는 호출해도 된다.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Key key)</span> </span>&#123; <span class="comment">// 매개변수로 전달된 객체의 메소드는 호출해도 된다.</span></span><br><span class="line"></span><br><span class="line">        Doors doors = <span class="keyword">new</span> Doors(); <span class="comment">//새로운 객체 생성. 이 객체의 메소드는 호출해도 된다.</span></span><br><span class="line">        <span class="keyword">boolean</span> authorized = key.turns(); <span class="comment">//매개변수로 전달된 객체의 메소드는 호출해도 된다.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (authorized) &#123;</span><br><span class="line">            engine.start(); <span class="comment">// 이 객체의 구성요소의 메소드는 호출해도 된다.</span></span><br><span class="line">            updateDashboardDisplay(); <span class="comment">// 객체 내에 있는 메소드는 호출해도 된다.</span></span><br><span class="line">            doors.lock(); <span class="comment">//직접 생성하거나 인스턴스를 만든 객체의 메소드는 호출해도 된다.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDashboardDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;🧤-어댑터-amp-파사드-패턴이란&quot;&gt;&lt;a href=&quot;#🧤-어댑터-amp-파사드-패턴이란&quot; class=&quot;headerlink&quot; title=&quot;🧤 어댑터 &amp;amp; 파사드 패턴이란&quot;&gt;&lt;/a&gt;🧤 어댑터 &amp;amp; 파사드 패턴이란&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="어댑터" scheme="http://won0935.github.io/tags/%EC%96%B4%EB%8C%91%ED%84%B0/"/>
    
    <category term="파사드" scheme="http://won0935.github.io/tags/%ED%8C%8C%EC%82%AC%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>커맨드 패턴</title>
    <link href="http://won0935.github.io/2021/11/06/DesignPattern/CommandPattern/"/>
    <id>http://won0935.github.io/2021/11/06/DesignPattern/CommandPattern/</id>
    <published>2021-11-06T09:58:47.875Z</published>
    <updated>2021-11-07T12:58:38.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="👋-커맨드패턴이란"><a href="#👋-커맨드패턴이란" class="headerlink" title="👋 커맨드패턴이란"></a>👋 커맨드패턴이란</h2><blockquote><p><em>레스토랑에서 주문을 했다고 가정하자</em><br><em><strong>손님</strong>은 항상 요리의 <strong>요리 방법</strong>을 알아야 하는가?</em><br><em>손님은 그저 <strong>웨이터</strong>에게 주문만 하면 된다. 요리 방법법을 알아야만 하는 건 <strong>요리사</strong> 뿐이다.</em></p></blockquote><p>커맨드 패턴(Command pattern)이란 <strong>요청을 객체의 형태로 캡슐화</strong>하여 사용자가 보낸 요청을 나중에 이용할 수 있도록<br>매서드 이름, 매개변수 등 요청에 필요한 정보를 저장 또는 로깅, 취소할 수 있게 하는 패턴이다.</p><br><ul><li>커맨드 패턴에는 <strong>명령</strong>(<code>command</code>), <strong>수신자</strong>(<code>receiver</code>), <strong>발동자</strong>(<code>invoker</code>), <strong>클라이언트</strong>(<code>client</code>)의 네개의 용어가 항상 따른다. </li><li><strong>커맨드 객체</strong>는 수신자 객체를 가지고 있으며, 수신자의 메서드를 호출하고, 이에 수신자는 자신에게 정의된 메서드를 수행한다. </li><li>커맨드 객체는 별도로 <strong>발동자 객체</strong>에 전달되어 명령을 발동하게 한다. </li><li><strong>발동자 객체</strong>는 필요에 따라 명령 발동에 대한 기록을 남길 수 있다. 한 발동자 객체에 <strong>다수</strong>의 커맨드 객체가 전달될 수 있다. </li><li><strong>클라이언트 객체</strong>는 발동자 객체와 하나 이상의 커맨드 객체를 보유한다. 클라이언트 객체는 어느 시점에서 어떤 명령을 수행할지를 결정한다. </li><li>명령을 수행하려면, <strong>클라이언트 객체</strong>는 발동자 객체로 커맨드 객체를 전달한다.</li></ul><hr><h2 id="🎩-커맨드패턴이-필요한-이유"><a href="#🎩-커맨드패턴이-필요한-이유" class="headerlink" title="🎩 커맨드패턴이 필요한 이유"></a>🎩 커맨드패턴이 필요한 이유</h2><p>커맨드 객체는 일련의 행동을 특정 리시버하고 연결시킴으로써 <strong>요구사항을 캡슐화</strong>한다.</p><p>이렇게 하기 위해 행동과 <strong>리시버</strong>를 한 객체에 집어넣고 메소드 하나만 외부에 공개하는 방법을 사용한다.</p><hr><h2 id="🔧-커맨드패턴-클래스-다이어그램"><a href="#🔧-커맨드패턴-클래스-다이어그램" class="headerlink" title="🔧 커맨드패턴 클래스 다이어그램"></a>🔧 커맨드패턴 클래스 다이어그램</h2><p><img src="https://user-images.githubusercontent.com/55419159/140605872-990096e0-f4bc-4d27-9e0a-40c5ee684c1d.png" alt="image"></p><h3 id="🍔-식당을-예로들어보자"><a href="#🍔-식당을-예로들어보자" class="headerlink" title="🍔 식당을 예로들어보자"></a>🍔 식당을 예로들어보자</h3><ol><li>손님이 웨이터에게 <strong>주문</strong>을 한다.</li><li>웨이터가 고객의 주문을 <strong>주문서</strong>에 적는다.</li><li><strong>웨이터</strong>는 주문서를 주방에 전달하여 주문을 요청한다.</li><li><strong>주방장</strong>은 주문서에 적힌 주문대로 음식을 자신의 노하우로 만든다.</li></ol><blockquote><ul><li>손님 == <code>클라이언트</code></li><li>웨이터 == <code>인보커 객체</code></li><li>주문서 == <code>커맨드 객체</code></li><li>주방장 == <code>리시버 객체</code></li><li>주문을 하는것 == <code>setCommand()</code></li><li>주문을 요청하는것 == <code>execute()</code></li></ul></blockquote><p>으로 볼수있다.</p><hr><h2 id="🎞-구현방법"><a href="#🎞-구현방법" class="headerlink" title="🎞 구현방법"></a>🎞 구현방법</h2><h3 id="1-커맨드-인터페이스-구현"><a href="#1-커맨드-인터페이스-구현" class="headerlink" title="1. 커맨드 인터페이스 구현"></a>1. 커맨드 인터페이스 구현</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-커맨드-구현-객체"><a href="#2-커맨드-구현-객체" class="headerlink" title="2. 커맨드 구현 객체"></a>2. 커맨드 구현 객체</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Light light;   <span class="comment">//이 Light 객체는 실제 불키는 방법을 알고있는 리시버 객체</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(Light light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-인보커"><a href="#3-인보커" class="headerlink" title="3. 인보커"></a>3. 인보커</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleRemoteControl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Command slot;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleRemotecontrol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        slot = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buttonWasPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        slot.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-클라이언트"><a href="#4-클라이언트" class="headerlink" title="4. 클라이언트"></a>4. 클라이언트</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteControlTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SimpleRemoteControl remote = <span class="keyword">new</span> SimpleRemoteControl();</span><br><span class="line">        Light light = <span class="keyword">new</span> Light();</span><br><span class="line">        LightOnCommand lightOn = <span class="keyword">new</span> LightOnCommand(light);</span><br><span class="line"></span><br><span class="line">        remote.setCommand(lightOn);</span><br><span class="line">        remote.buttonWasPressed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="매크로-커맨드"><a href="#매크로-커맨드" class="headerlink" title="+ 매크로 커맨드"></a>+ 매크로 커맨드</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacroCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Command[] commands;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MacroCommand</span><span class="params">(Command[] commands)</span> </span>&#123;  <span class="comment">//커맨드의 묶음으로 메소드 한번으로 실행할 수 있다.</span></span><br><span class="line">        <span class="keyword">this</span>.commands = commands;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> o = <span class="number">0</span>; i &lt; commands.length; i++) &#123;</span><br><span class="line">            commands[i].execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🥊-커맨드-패턴의-활용방식"><a href="#🥊-커맨드-패턴의-활용방식" class="headerlink" title="🥊 커맨드 패턴의 활용방식"></a>🥊 커맨드 패턴의 활용방식</h2><h3 id="메시지-큐"><a href="#메시지-큐" class="headerlink" title="메시지 큐"></a>메시지 큐</h3><ul><li>큐 한 쪽 끝은 커멘드를 추가하고 다른 쪽 끝에는 커맨드를 처리하기 위한 스레드들이 대기.</li><li>각 스레드에서는 execute() 메소드를 호출하고 그 호출이 완료되고 나면 커맨드 객체를 보내고 새로운 커맨드</li><li>객체를 가져온다.</li></ul><h3 id="리퀘스트-로깅"><a href="#리퀘스트-로깅" class="headerlink" title="리퀘스트 로깅"></a>리퀘스트 로깅</h3><ul><li>자바에서는 이런 메소드를 객체 직렬화를 통해 구현할 수도 있지만, 직렬화와 관련된 제약 조건때문에 쉽지않을수 있다.</li><li>커맨더 패턴을 이용한다면, Command 인터페이스에 store(), load() 라는 메소드를 추가하여 기능을 지원 가능하다.</li><li>인보커 클래스가 Command1, Command2, Command3.. 각각 커멘드를 execute() 할때마다 각 Command 들은 store()를 실행시켜 디스크에 각각의 객체를을 저장한다. </li><li>컴퓨터가 다운되어 모든작업이 멈추고 이후 컴퓨터가 복구되었을때, 디스크로 부터 각각의 Command1, Command2 .. 작업완료 하지 못한 객체들을 로딩하고 다시 순서대로 작업을 처리한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;👋-커맨드패턴이란&quot;&gt;&lt;a href=&quot;#👋-커맨드패턴이란&quot; class=&quot;headerlink&quot; title=&quot;👋 커맨드패턴이란&quot;&gt;&lt;/a&gt;👋 커맨드패턴이란&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;레스토랑에서 주문을 했다고 가정하자&lt;/</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="커맨드" scheme="http://won0935.github.io/tags/%EC%BB%A4%EB%A7%A8%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>m1 맥에서 144hz 롤하기</title>
    <link href="http://won0935.github.io/2021/10/30/Extra/m1-league-of-legend/"/>
    <id>http://won0935.github.io/2021/10/30/Extra/m1-league-of-legend/</id>
    <published>2021-10-30T07:18:02.729Z</published>
    <updated>2021-11-13T05:31:56.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>결론부터 말하면 롤 <strong>설정 값</strong>을 바꿔주면 <strong>m1 macbook Air</strong>로 <em>144hz 방어</em>가 가능하다.</p></blockquote><p><img src="https://user-images.githubusercontent.com/55419159/139523580-e90497ce-2cab-444b-b137-c17ae0875f05.png"></p><h2 id="테스트-스펙"><a href="#테스트-스펙" class="headerlink" title="테스트 스펙"></a>테스트 스펙</h2><ul><li>macbook air m1(2020) 8g 256gb (깡통 맥북에어 옵션)</li><li>qhd 165hz 외장모니터</li></ul><br><h2 id="방법"><a href="#방법" class="headerlink" title="방법"></a>방법</h2><h3 id="1-finder-‘응용-프로그램’-‘리그오브레전드’-오른쪽클릭-‘패키지-내용보기’"><a href="#1-finder-‘응용-프로그램’-‘리그오브레전드’-오른쪽클릭-‘패키지-내용보기’" class="headerlink" title="1. finder - ‘응용 프로그램’ - ‘리그오브레전드’ 오른쪽클릭 ‘패키지 내용보기’"></a>1. finder - ‘응용 프로그램’ - ‘리그오브레전드’ 오른쪽클릭 ‘패키지 내용보기’</h3><p>   <img src="https://user-images.githubusercontent.com/55419159/139523689-d613a586-55f2-426c-9e10-09e776c04450.png"></p><br><h3 id="2-아래의-경로로-들어감"><a href="#2-아래의-경로로-들어감" class="headerlink" title="2. 아래의 경로로 들어감"></a>2. 아래의 경로로 들어감</h3><ul><li>LoL/Config/game.cfg</li><li>텍스트 에디터로 열기</li></ul><p><img src="https://user-images.githubusercontent.com/55419159/139523809-a896357e-4c3b-413a-8474-6fc4ec9ecca4.png"></p><br><h3 id="3-General-마지막-항목에-“MetalBetaTest-true”-추가"><a href="#3-General-마지막-항목에-“MetalBetaTest-true”-추가" class="headerlink" title="3. [General] 마지막 항목에 “MetalBetaTest=true” 추가"></a>3. [General] 마지막 항목에 “MetalBetaTest=true” 추가</h3><p><img src="https://user-images.githubusercontent.com/55419159/139523849-60136e47-3f6b-4ae4-b22d-15f066f4f16b.png"></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>상옵기준 매우 쾌적하게 플레이 가능 (심지어 발열도 없다.)</li><li>심지어 한타중에도 프레임드랍이 없다…🤔</li><li>게임하려고 맥북사는 사람들은 없겠지만 롤하려고 맥북은 사도 될지도…?</li></ul><br><p>참고 : <a href="!%5B%5D(https://devtrackers.gg/leagueoflegends/p/c1948cdc-mac-on-metal-beta-testing)">Mac on Metal Beta Testing</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;결론부터 말하면 롤 &lt;strong&gt;설정 값&lt;/strong&gt;을 바꿔주면 &lt;strong&gt;m1 macbook Air&lt;/strong&gt;로 &lt;em&gt;144hz 방어&lt;/em&gt;가 가능하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img s</summary>
      
    
    
    
    <category term="기타" scheme="http://won0935.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
    
    <category term="m1" scheme="http://won0935.github.io/tags/m1/"/>
    
    <category term="롤" scheme="http://won0935.github.io/tags/%EB%A1%A4/"/>
    
    <category term="league of legend" scheme="http://won0935.github.io/tags/league-of-legend/"/>
    
    <category term="mac on metal" scheme="http://won0935.github.io/tags/mac-on-metal/"/>
    
  </entry>
  
  <entry>
    <title>팩토리 패턴</title>
    <link href="http://won0935.github.io/2021/10/28/DesignPattern/FatoryPattern/"/>
    <id>http://won0935.github.io/2021/10/28/DesignPattern/FatoryPattern/</id>
    <published>2021-10-28T11:13:20.382Z</published>
    <updated>2021-11-13T05:32:17.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="⛳-들어가기-전에"><a href="#⛳-들어가기-전에" class="headerlink" title="⛳ 들어가기 전에.."></a>⛳ 들어가기 전에..</h2><p>회사에서 같은 프로세스 내에서 각각의 제휴사에 서비스를 인터페이스해야 하는 경우가 있었다.</p><p>전체적인 프로세스 플로우를 인터페이스로, 제휴사를 클래스(Bean)로 만들어 팩토리 패턴으로 구현하였다.</p><p>동일한 프로세스 플로우 내에서 각기 다른 제휴사의 API와 연동해야 했는데 팩토리 패턴이 많은 도움이 되었다.</p><hr><h2 id="👋-팩토리패턴이란"><a href="#👋-팩토리패턴이란" class="headerlink" title="👋 팩토리패턴이란"></a>👋 팩토리패턴이란</h2><h3 id="⚾-팩토리-메소드-패턴"><a href="#⚾-팩토리-메소드-패턴" class="headerlink" title="⚾ 팩토리 메소드 패턴"></a>⚾ 팩토리 메소드 패턴</h3><blockquote><p>객체를 생성하기 위한 인터페이스를 정의하는데,<br>어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정하게 만든다.<br>즉, 팩토리 메소드 패턴을 이용하면 <strong>클래스의 인스턴스를 만드는 일을 서브클래스에게 맡기는 것</strong>.</p></blockquote><h3 id="🥎-추상-팩토리-패턴"><a href="#🥎-추상-팩토리-패턴" class="headerlink" title="🥎 추상 팩토리 패턴"></a>🥎 추상 팩토리 패턴</h3><blockquote><p><strong>인터페이스를 이용</strong>하여 서로 연관된,<br>또는 의존하는 객체를 구상 클래스를 지정하지 않고도 생성한다.</p></blockquote><hr><h2 id="🎩-팩토리패턴이-필요한-이유"><a href="#🎩-팩토리패턴이-필요한-이유" class="headerlink" title="🎩 팩토리패턴이 필요한 이유"></a>🎩 팩토리패턴이 필요한 이유</h2><p><code>new</code>를 사용하는 것은 구상 클래스의 인스턴스를 만드는 것이다. 당연히! 인터페이스가 아닌 <em>특정 구현을 사용하게 되어버리는 것</em>. 일련의 구상 클래스들이 있을때는 어쩔수 없이 다음과 같은 코드를 만들어야 하는<br>경우가 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Duck duck;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(type==picnic)duck=<span class="keyword">new</span> MallardDuck();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==hunting)duck=<span class="keyword">new</span> DecoyDuck();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==inBathTub)duck=<span class="keyword">new</span> RubberDuck();</span><br></pre></td></tr></table></figure><p>이런 코드가 있다는 것은, 뭔가 변경하거나 확장해야 할 때 <em>코드를 다시 확인하고 추가 또는 제거해야 한다는 것</em>을 의미한다.<br><strong>인터페이스</strong>에 맞춰서 코딩을 하면 시스템에서 일어날 수 있는 여러 변화를 이겨낼 수 있다.<br><strong>다형성</strong> 덕분에 어떤 클래스든 특정 인터페이스만 구현하면 사용할수 있기 때문이다.</p><p>반대로. 구상 클래스를 많이 사용하면 새로운 구상 클래스가 추가될 때마다 코드를 고쳐야 하기때문에 많은 문제가 생길수 있다. 즉, <em>변화에 대해 닫혀 있는 코드</em>가 되어버리는 것이다.</p><blockquote><p>바뀔 수 있는 부분을 찾아내서 바뀌지 않는 부분하고 분리시켜야 한다는 원칙.</p></blockquote><hr><h2 id="🎢-고전적인-팩토리-패턴"><a href="#🎢-고전적인-팩토리-패턴" class="headerlink" title="🎢 고전적인 팩토리 패턴"></a>🎢 고전적인 팩토리 패턴</h2><ul><li><strong>피자 가게</strong>를 운영하고 있고 <strong>피자가게 클래스</strong>를 만들어야 된다고 가정한다.</li></ul><blockquote><p>피자가게는 다양한 피자가 있을 수 있다.<br>또한 다양한 피자가게가 있을 수 있다.</p></blockquote><h3 id="🎞-기존소스"><a href="#🎞-기존소스" class="headerlink" title="🎞 기존소스"></a>🎞 기존소스</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Pizza <span class="title">orderPizza</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Pizza pizza;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//추가하거나 제거 시 매번 바뀌어야 하는부분</span></span><br><span class="line">        <span class="keyword">if</span>(type.equals(<span class="string">&quot;cheese&quot;</span>))pizza=<span class="keyword">new</span> CheesePizza();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">&quot;greek&quot;</span>))pizza=<span class="keyword">new</span> GreekPizza();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">&quot;pepperoni&quot;</span>))pizza=<span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="1-피자-팩토리를-만든다"><a href="#1-피자-팩토리를-만든다" class="headerlink" title="1. 피자 팩토리를 만든다."></a>1. 피자 팩토리를 만든다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123; <span class="comment">//이런 경우에는 static메소드로 선언하는 경우가 종종 있음.</span></span><br><span class="line"></span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pizza.equals(<span class="string">&quot;cheese&quot;</span>)) pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">        <span class="keyword">if</span> (pizza.equals(<span class="string">&quot;pepper&quot;</span>)) pizza = <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">        <span class="keyword">if</span> (pizza.equals(<span class="string">&quot;clam&quot;</span>)) pizza = <span class="keyword">new</span> ClamPizza();</span><br><span class="line">        <span class="keyword">if</span> (pizza.equals(<span class="string">&quot;veggie&quot;</span>)) pizza = <span class="keyword">new</span> VeggiePizza();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-피자-가게를-만든다"><a href="#2-피자-가게를-만든다" class="headerlink" title="2. 피자 가게를 만든다."></a>2. 피자 가게를 만든다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SimplePizzaFactory simplePizzaFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PizzaStore</span><span class="params">(SimplePizzaFactory simplePizzaFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.simplePizzaFactory = simplePizzaFactory;  <span class="comment">//피자 가게를 동적으로 설정</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Pizza pizza;</span><br><span class="line">        pizza = simplePizzaFactory.createPizza(type); <span class="comment">//수정 안해도 됨</span></span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-다양한-피자가게가-생긴다"><a href="#3-다양한-피자가게가-생긴다" class="headerlink" title="3. 다양한 피자가게가 생긴다."></a>3. 다양한 피자가게가 생긴다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PizzaStore nyStore=<span class="keyword">new</span> PizzaStore(<span class="keyword">new</span> NYPizzaFactory());</span><br><span class="line">       nyStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br><span class="line"></span><br><span class="line">       PizzaStore chicagoStore=<span class="keyword">new</span> PizzaStore(<span class="keyword">new</span> ChicagoPizzafactory());</span><br><span class="line">       chicagoStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>각 피자가게에서 <code>orderPizza()</code> 만 호출하면 피자를 생성할 수 있게 되었다.</li></ul><blockquote><p>그러나, 각 팩토리를 가진 피자가게 체인점들이 서로의 구현방식이 달라지는 일이 발생할수도 있게 되었다.<br>(PizzaStore가 각각 있다보니 굽는 방식이 달라진다거나 피자를 자르는 단계를 빼먹거나 하는..)</p></blockquote><hr><h2 id="🎟-팩토리-메소드-패턴"><a href="#🎟-팩토리-메소드-패턴" class="headerlink" title="🎟 팩토리 메소드 패턴"></a>🎟 팩토리 메소드 패턴</h2><blockquote><p>피자가게와 피자 <strong>제작 과정 전체를 하나로 묶어주는 프레임워크</strong>를 만들어야 된다는 결론!!<br>파자를 만드는 활동 자체는 전부 PizzaStore 클래스에 국한시키면서도 분점마다 고유의 스타일을 살릴 수 있는 방법은 ??</p></blockquote><h3 id="4-피자가게를-묶는-추상-클래스를-만든다-프렌차이즈-본사랄까"><a href="#4-피자가게를-묶는-추상-클래스를-만든다-프렌차이즈-본사랄까" class="headerlink" title="4. 피자가게를 묶는 추상 클래스를 만든다. (프렌차이즈 본사랄까..)"></a>4. 피자가게를 묶는 추상 클래스를 만든다. (프렌차이즈 본사랄까..)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123; <span class="comment">//추상 클래스로 구현</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Pizza pizza;</span><br><span class="line">        pizza = createPizza(type);</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>; <span class="comment">//Pizza 인스턴스를 만드는 일은 팩토리 역할을 하는 메소드에서 맡아 처리</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-각-피자가게에서-추상클래스-본사-를-상속받게-한다"><a href="#5-각-피자가게에서-추상클래스-본사-를-상속받게-한다" class="headerlink" title="5. 각 피자가게에서 추상클래스(본사)를 상속받게 한다."></a>5. 각 피자가게에서 추상클래스(본사)를 상속받게 한다.</h3><p>이제 각 분점을 위한 지역별로 서브클래스를 만들어줘야 한다. 피자의 스타일은 각 서브클래스에서 결정.</p><p><img src="https://user-images.githubusercontent.com/55419159/139077742-76ac1027-09c3-4e42-8046-82a2b4e0cb54.jpg" alt="image"></p><p>이제 <code>ChicagoPizzaStore</code>, <code>NYPizzaStore</code> 에는 구상 피자클래스를 분기해주는 각각의 <code>createPizza()</code> 메소드가 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;cheese&quot;</span>)) pizza = <span class="keyword">new</span> NYStyleCheesePizza();</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;peper&quot;</span>)) pizza = <span class="keyword">new</span> NYStylePepperoniPizza();</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;clam&quot;</span>)) pizza = <span class="keyword">new</span> NYStyleClamPizza();</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;veggie&quot;</span>)) pizza = <span class="keyword">new</span> NYStyleVeggiePizza();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChicagoPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;cheese&quot;</span>)) pizza = <span class="keyword">new</span> ChicagoStyleCheesePizza();</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;peper&quot;</span>)) pizza = <span class="keyword">new</span> ChicagoStylePepperoniPizza();</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;clam&quot;</span>)) pizza = <span class="keyword">new</span> ChicagoStyleClamPizza();</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;veggie&quot;</span>)) pizza = <span class="keyword">new</span> ChicagoStyleVeggiePizza();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="6-피자-추상클래스를-만든다-순수한-피자-그-자체"><a href="#6-피자-추상클래스를-만든다-순수한-피자-그-자체" class="headerlink" title="6. 피자 추상클래스를 만든다.(순수한 피자 그 자체)"></a>6. 피자 추상클래스를 만든다.(순수한 피자 그 자체)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String dough;</span><br><span class="line">    String sauce;</span><br><span class="line">    ArrayList&lt;String&gt; toppings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Preparing : &quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;Tossing dough...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding source&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding toppings&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String topping : toppings) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\ttopping : &quot;</span> + topping);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bake for 25 minutes at 350&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cutting the pizza into diagonal slices&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Place pizza in official PizzaStore box&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-다양한-피자를-만들어-피자-추상클래스를-상속한다"><a href="#7-다양한-피자를-만들어-피자-추상클래스를-상속한다" class="headerlink" title="7. 다양한 피자를 만들어 피자 추상클래스를 상속한다."></a>7. 다양한 피자를 만들어 피자 추상클래스를 상속한다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYStyleCheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NYStyleCheesePizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;NY Style CheesePizza&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.dough = <span class="string">&quot;Thin Crust Dough&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.sauce = <span class="string">&quot;Marinara Sauce&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.toppings.add(<span class="string">&quot;Grated Reggiano Cheese&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChicagoStyleCheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChicagoStyleCheesePizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;Chicago Style CheesePizza&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.dough = <span class="string">&quot;Extra Thick Crust Dough&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.sauce = <span class="string">&quot;Plum Tomato Sauce&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.toppings.add(<span class="string">&quot;Shredded mozzarella Cheese&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cutting the pizza into square slices&quot;</span>);</span><br><span class="line">    &#125; <span class="comment">//바꾸고 싶은 메소드만 오버라이딩</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-피자를-주문한다"><a href="#8-피자를-주문한다" class="headerlink" title="8. 피자를 주문한다."></a>8. 피자를 주문한다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaTestDrive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        PizzaStore nyStore = <span class="keyword">new</span> NYPizzaStore();</span><br><span class="line">        PizzaStore chicagoStore = <span class="keyword">new</span> ChicagoPizzaStore();</span><br><span class="line"></span><br><span class="line">        Pizza nySytpePizza = nyStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br><span class="line">        System.out.println(nySytpePizza.getname());</span><br><span class="line"></span><br><span class="line">        Pizza chicagoStypePizza = chicagoStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br><span class="line">        System.out.println(chicagoStypePizza.getname());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>모든 팩토리 패턴에서는 <strong>객체 생성을 캡슐화</strong> 한다.</li><li>팩토리 메소드 패턴에서는 <em>서브 클래스에서 어떤 클래스를 만들지를 결정하게 함</em>으로써 객체 생성을 캡슐화 한다.</li></ul><ul><li>생산자 클래스(피자가게)</li></ul><p><img src="https://user-images.githubusercontent.com/55419159/139077751-6a262811-5faf-4937-b7f1-5fb3447d8b90.jpg" alt="image2"></p><ul><li>제품 클래스(피자)</li></ul><p><img src="https://user-images.githubusercontent.com/55419159/139077752-b27d2d2f-57fb-4226-bab6-f890d0f70a74.jpg" alt="image3"></p><p>위 클래스 다이어그램에서는 <code>PizzaStore</code> 추상 클래스에서 객체를 만들기 위한 메소드, 즉 팩토리 메소드를 위한 인터페이스를 제공한다는 것을 알수있다.</p><p><code>PizzaStore</code>에 구현되어 있는 다른 메소드 <code>orderPizza()</code> 에서는 팩토리 메소드에 의해 생산된 제품을 가지고 필요한 작업을 처리한다. 하지만 실제 팩토리 메소드를 구현하고 제품(객체 인스턴스)을<br>만들어 내는 일은 <strong>서브클래스</strong>에서만 할수 있다.</p><hr><h2 id="🎭-디자인원칙-의존성-뒤집기-원칙"><a href="#🎭-디자인원칙-의존성-뒤집기-원칙" class="headerlink" title="🎭 디자인원칙 : 의존성 뒤집기 원칙"></a>🎭 디자인원칙 : 의존성 뒤집기 원칙</h2><blockquote><p>추상화된 것에 의존하도록 만들어라. 구상 클래스에 의존하도록 만들지 않도록 한다.</p></blockquote><p><del>구현클래스에 의존하는 형태</del></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PizzaStore-&gt;NYStyleCheesePizza</span><br><span class="line">        PizzaStore-&gt;ChicagoStypeCheesePizza</span><br><span class="line">        PizzaStore-&gt;NYStyleVeggiePizza</span><br></pre></td></tr></table></figure><p><del>-&gt; 좋지않음</del></p><p>추상클래스(인터페이스)를 의존하는 형태</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PizzaStore-&gt;Pizza</span><br><span class="line">        Pizza&lt;-NYStyleCheesePizza</span><br><span class="line">        Pizza&lt;-ChicagoStyleCheesePizza</span><br><span class="line">        Pizza&lt;-NYStyleVeggiePizza</span><br></pre></td></tr></table></figure><p>-&gt; <strong>좋음</strong></p><h3 id="🛒-원칙에-도움이-되는-가이드"><a href="#🛒-원칙에-도움이-되는-가이드" class="headerlink" title="🛒 원칙에 도움이 되는 가이드"></a>🛒 원칙에 도움이 되는 가이드</h3><p><em><strong>1. 어떤 변수에도 구상 클래스에 대한 레퍼런스를 지정하지 않는다.</strong></em></p><ul><li><code>new</code> 연산자를 사용하면 레퍼런스를 사용하게 되는 것이다.</li></ul><p><em><strong>2. 구상 클래스에서 유도된 클래스를 만들지 않는다.</strong></em></p><ul><li>구상클래스에서 유도된 클래스를 만들면 특정 구상 클래스에 의존하게된다, 추상화 된 것을 사용해야 한다.</li></ul><p><em><strong>3. 베이스 클래스에 이미 구현되어 있던 메소드를 오버라이드 하지 않는다.</strong></em></p><ul><li>이미 구현되어 있는 메소드를 오버라이드 한다는 것은 애초부터 베이스 클래스가 제대로 추상화 된것이 아니었다고 볼 수 있다.</li><li>베이스 클래스에서 메소드를 정의할 때는 모든 서브 클래스에서 공유할 수 있는 것만 정의해야한다.</li></ul><hr><h2 id="🦺-추상-팩토리-패턴"><a href="#🦺-추상-팩토리-패턴" class="headerlink" title="🦺 추상 팩토리 패턴"></a>🦺 추상 팩토리 패턴</h2><p>이렇게 PizzaStore 디자인이 모양새를 갖췄다. 유연한 프레임워크도 만들어 졌고, 디자인 원칙도 충실하게 지켰다.</p><p>각각 체인점들이 미리 정해놓은 절차를 잘 따르고 있지만 몇몇 체인점들이 자잘한 재료를 더 싼 재료로 바꿔서 원가를 절감해 마진을 남기고 있다.</p><p>원재료의 품질까지 관리하는 방법이 있을까??</p><ul><li><strong>원재료 군</strong>을 만들어 파악하자.</li><li>제품에 들어가는 재료군(반죽, 소스, 치즈, 야채, 고기)은 같지만, 지역마다 재료의 구체적인 내용이 조금씩 다르다.</li></ul><ol><li>지역별로 팩토리를 만들어 각 생성 메소드를 구현하는 <code>PizzaingredientFactory</code> 클래스를 만든다.</li><li><code>ReggianoCheese</code>, <code>RedPeppers</code>, <code>ThickCrustDough</code>와 같이 팩토리에서 사용할 원재료 클래스들을 구현한다.</li><li>만든 원재료 공장을 <code>PizzaStore</code> 코드에서 사용하도록 함으로써 하나로 묶어준다.</li></ol><h3 id="9-원재료-공장을-만든다"><a href="#9-원재료-공장을-만든다" class="headerlink" title="9. 원재료 공장을 만든다."></a>9. 원재료 공장을 만든다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dough <span class="title">createDough</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cheese <span class="title">createCheese</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Veggies[] createVeggies();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pepperoni <span class="title">createPepperoni</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Clams <span class="title">createClams</span><span class="params">()</span></span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaingredientFactory</span> <span class="keyword">implements</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dough <span class="title">createDough</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThinCrustdough();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MarinaraSauce();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cheese <span class="title">createCheese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReggianoCheese();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Veggies[] createVeggies() &#123;</span><br><span class="line">        Veggies veggies[] = &#123;<span class="keyword">new</span> Farlic(), <span class="keyword">new</span> Onion(), <span class="keyword">new</span> Mushroom(), <span class="keyword">new</span> RedPepper()&#125;;</span><br><span class="line">        <span class="keyword">return</span> veggies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pepperoni <span class="title">createPepperoni</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SlicedPepperoni();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Clams <span class="title">createClams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Freshclams();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChicagoPizzaingredientFactory</span> <span class="keyword">implements</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dough <span class="title">createDough</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThickCrustDough();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PlumTomatoSauce();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cheese <span class="title">createCheese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MozzarellaCheese();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Veggies[] createVeggies() &#123;</span><br><span class="line">        Veggies veggies[] = &#123;<span class="keyword">new</span> BlackOlives(), <span class="keyword">new</span> Spinach(), <span class="keyword">new</span> EggPlant()&#125;;</span><br><span class="line">        <span class="keyword">return</span> veggies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pepperoni <span class="title">createPepperoni</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Slicedpepperoni();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Clams <span class="title">createClams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FrozenClam();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-피자마다-재료는-다르다"><a href="#10-피자마다-재료는-다르다" class="headerlink" title="10. 피자마다 재료는 다르다."></a>10. 피자마다 재료는 다르다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    Dough dough;</span><br><span class="line">    Sauce sauce;</span><br><span class="line">    Veggies veggies[];</span><br><span class="line">    Cheese cheese;</span><br><span class="line">    Pepperoni pepperoni;</span><br><span class="line">    Clams clams;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>; <span class="comment">//추상 메소드로 변경됨.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bake for 25 minutes at 350&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cutting the pizza into diagonal slices&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Place pizza in official PizzaStore box&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CheesePizza</span><span class="params">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dough = ingredientFactory.createDough();</span><br><span class="line">        <span class="keyword">this</span>.sauce = ingredientFactory.createSauce();</span><br><span class="line">        <span class="keyword">this</span>.cheese = ingredientFactory.createCheese();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClamPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClamPizza</span><span class="params">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dough = ingredientFactory.createDough();</span><br><span class="line">        <span class="keyword">this</span>.sauce = ingredientFactory.createSauce();</span><br><span class="line">        <span class="keyword">this</span>.cheese = ingredientFactory.createCheese();</span><br><span class="line">        <span class="keyword">this</span>.clams = ingredientFactory.createClams();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-피자마다-지역마다-다른-피자를-만든다"><a href="#11-피자마다-지역마다-다른-피자를-만든다" class="headerlink" title="11. 피자마다, 지역마다 다른 피자를 만든다."></a>11. 피자마다, 지역마다 다른 피자를 만든다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        PizzaIngredientFactory ingredientFactory = <span class="keyword">new</span> NYPizzaingredientFactory();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza(ingredientFactory);</span><br><span class="line">            pizza.setName(ingredientFactory.NY_STYLE + <span class="string">&quot; Cheese Pizza&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">&quot;peper&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperoniPizza(ingredientFactory);</span><br><span class="line">            pizza.setName(ingredientFactory.NY_STYLE + <span class="string">&quot; Pepperoni Pizza&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">&quot;clam&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> ClamPizza(ingredientFactory);</span><br><span class="line">            pizza.setName(ingredientFactory.NY_STYLE + <span class="string">&quot; Clam Pizza&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">&quot;veggie&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> VeggiePizza(ingredientFactory);</span><br><span class="line">            pizza.setName(ingredientFactory.NY_STYLE + <span class="string">&quot; Veggie Pizza&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="⛳-프로세스-정리"><a href="#⛳-프로세스-정리" class="headerlink" title="⛳ 프로세스 정리"></a>⛳ 프로세스 정리</h3><p><img src="https://user-images.githubusercontent.com/55419159/139077755-c920f73b-e347-41d4-b1a8-9f0bc5e028fa.jpg" alt="image4"></p><p>이제 전체적인 흐름은.</p><ol><li>뉴욕 피자가게를 만든다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PizzaStore nyPizzaStore=<span class="keyword">new</span> NYPizzaStore();</span><br></pre></td></tr></table></figure><ol start="2"><li>주문을 한다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nyPizzaStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>orderPizza 메소드에서는 우선 createPizza() 메소드를 호출한다</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pizza pizza=createPizza(<span class="string">&quot;cheese&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>createPizza() 메소드가 호출되면 원재료 공장이 돌아가기 시작한다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pizza pizza=<span class="keyword">new</span> CheesePizza(nyIngredientFactory);</span><br></pre></td></tr></table></figure><ol start="5"><li>피자를 준비하는 prepare()메소드가 호출되면 팩토리에 원재료 주문이 들어간다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dough=nyIngredientFactory.createDough();</span><br><span class="line">        sauce=nyIngredientFactory.createSauce();</span><br><span class="line">        cheese=nyIngredientFactory.createCheese();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>준비단계가 끝나고 orderPizza() 메소드에서는 피자를 굽고, 자르고, 포장한다.</li></ol><hr><h2 id="💎-요약"><a href="#💎-요약" class="headerlink" title="💎 요약"></a>💎 요약</h2><h3 id="추상-팩토리-패턴"><a href="#추상-팩토리-패턴" class="headerlink" title="추상 팩토리 패턴"></a>추상 팩토리 패턴</h3><blockquote><p>제품군을 생성하기 위한 <strong>인터페이스</strong>를 생성하고, 그 <strong>인터페이스를 구성</strong>하여 사용할수 있게끔 하는것.</p></blockquote><h3 id="추상-메소드-패턴"><a href="#추상-메소드-패턴" class="headerlink" title="추상 메소드 패턴"></a>추상 메소드 패턴</h3><blockquote><p>하나의 추상클래스에서 <strong>추상 메소드</strong>를 만들고, 서브클래스들이 <strong>그 추상메소드를 구현</strong>하여 인스턴스를 만들게끔 하는것.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;⛳-들어가기-전에&quot;&gt;&lt;a href=&quot;#⛳-들어가기-전에&quot; class=&quot;headerlink&quot; title=&quot;⛳ 들어가기 전에..&quot;&gt;&lt;/a&gt;⛳ 들어가기 전에..&lt;/h2&gt;&lt;p&gt;회사에서 같은 프로세스 내에서 각각의 제휴사에 서비스를 인터페이스해야</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="팩토리" scheme="http://won0935.github.io/tags/%ED%8C%A9%ED%86%A0%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>싱글톤 패턴</title>
    <link href="http://won0935.github.io/2021/10/27/DesignPattern/SingletonPattern/"/>
    <id>http://won0935.github.io/2021/10/27/DesignPattern/SingletonPattern/</id>
    <published>2021-10-27T13:48:15.469Z</published>
    <updated>2021-10-27T13:48:15.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 클래스의 인스턴스가 하나만 만들어지고,<br>어디서든지 그 인스턴스에 접근할 수 있도록 하기 위한 패턴</p></blockquote><h2 id="고전적인-싱글톤-패턴-문제-있음"><a href="#고전적인-싱글톤-패턴-문제-있음" class="headerlink" title="고전적인 싱글톤 패턴 (문제 있음)"></a>고전적인 싱글톤 패턴 (문제 있음)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> uniqueInstance;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>멀티쓰레드 환경에서는 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 부분에서  2개 이상의 인스턴스가 생성될 수 있다.</p><h2 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h2><h3 id="1-synchronized-사용"><a href="#1-synchronized-사용" class="headerlink" title="1. synchronized 사용"></a>1. <code>synchronized</code> 사용</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> uniqueInstance;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>단점 : 속도 저하  → 메소드가  <code>synchronized</code> 되면 약 100배 정도 성능 저하가 일어난다고 한다.</li></ul><h3 id="2-인스턴스를-처음부터-만들어-버림"><a href="#2-인스턴스를-처음부터-만들어-버림" class="headerlink" title="2. 인스턴스를 처음부터 만들어 버림"></a>2. 인스턴스를 처음부터 만들어 버림</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> uniqueInstance;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>클래스가 로딩될 때 JVM에서 Singleton의 유일한 인스턴스를 생성해준다.</li></ul><h3 id="3-DCL-Double-Checking-Locking-사용"><a href="#3-DCL-Double-Checking-Locking-사용" class="headerlink" title="3. DCL(Double-Checking Locking) 사용"></a>3. DCL(Double-Checking Locking) 사용</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                                  <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                                             uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                                  &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> uniqueInstance;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><code>volatile</code> 키워드를 사용하면 자바의 일종의 최적화인 리오더링(보통 컴파일 과정에서 일어나며, 프로그래머가 만들어낸 코드는 컴파일 될 때 좀더 빠르게 실행될 수 있도록 조작이 가해져 최적하됨)을 회피하여 읽기와 쓰기순서를 보장한다.</li><li>멀티스레딩을 쓰더라도 uniqueInstance변수가 Singleton 인스턴스로 초기화 되는 과정이 올바르게 진행되도록 할 수 있다.</li><li><strong>DCL은 자바1.5이상의 버전에서만 사용가능</strong>하다.</li><li>자바 1.4 및 그 전에 나온 버전의 JVM 중에는 volatile 키워드를 사용하더라도 동기화가 잘 안되는 것이 많다. 일종의 버그.</li></ul><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li>우리가 알고있던 싱글톤 패턴은 사실 <strong>싱글톤 패턴이 아님</strong>!</li><li>위의 3가지 방법을 사용하자</li><li>개인적으론 **생성자(2번)**가 가장 간단한 것 같음</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;해당 클래스의 인스턴스가 하나만 만들어지고,&lt;br&gt;어디서든지 그 인스턴스에 접근할 수 있도록 하기 위한 패턴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;고전적인-싱글톤-패턴-문제-있음&quot;&gt;&lt;a href=&quot;#고전적인-싱글톤</summary>
      
    
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    
    <category term="디자인패턴" scheme="http://won0935.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/"/>
    
    <category term="싱글톤" scheme="http://won0935.github.io/tags/%EC%8B%B1%EA%B8%80%ED%86%A4/"/>
    
  </entry>
  
  <entry>
    <title>안정 해시 설계</title>
    <link href="http://won0935.github.io/2021/10/26/MassiveSystemDesign/Chapter-4/"/>
    <id>http://won0935.github.io/2021/10/26/MassiveSystemDesign/Chapter-4/</id>
    <published>2021-10-26T12:53:30.299Z</published>
    <updated>2021-11-28T08:43:29.362Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>수평적 규모 확장을 위해서는 요청 또는 데이터를 서버로 균등하게 나누는 것이 중요<br>안정 해시는 이 목표를 달성하기 위해 보편적으로 사용하는 기술</p></blockquote><hr><h2 id="안정-해시-설계의-이점"><a href="#안정-해시-설계의-이점" class="headerlink" title="안정 해시 설계의  이점"></a>안정 해시 설계의  이점</h2><ul><li>서버가 추가되거나 삭제될 때 재배치되는 키의 수가 최소화된다.</li><li>데이터가 보다 균등하게 분포하게 되므로 수평적 규모 확장성을 달성하기 쉽다.</li><li>핫스팟(hotspot) 키 문제를 줄인다.</li></ul><hr><h3 id="만약-잘-분배가-되어있던-서버-하나가-죽었을-경우"><a href="#만약-잘-분배가-되어있던-서버-하나가-죽었을-경우" class="headerlink" title="만약 잘 분배가 되어있던 서버 하나가 죽었을 경우?"></a>만약 잘 분배가 되어있던 서버 하나가 죽었을 경우?</h3><h3 id="기존-해시-테이블"><a href="#기존-해시-테이블" class="headerlink" title="기존 해시 테이블"></a>기존 해시 테이블</h3><ul><li>모든 키를 재배치함</li></ul><p><img src="https://user-images.githubusercontent.com/55419159/138881514-e09e12fd-2764-40ee-9eef-2cf3a4a84f3f.png"></p><h3 id="안정-해시"><a href="#안정-해시" class="headerlink" title="안정 해시"></a>안정 해시</h3><ul><li>이상이 있는 부분만 재배치</li></ul><p><img src="https://user-images.githubusercontent.com/55419159/138881565-e60403c1-c98e-48ab-bb80-8a8c5f10320b.png"></p><hr><h2 id="기본-구현법"><a href="#기본-구현법" class="headerlink" title="기본 구현법"></a>기본 구현법</h2><ol><li>서버와 키를 균등 분포 해시 함수를 사용해 해시 링에 배치한다.</li><li>키의 위치에서 링을 시계 방향을 탐색하다 만나는 최초의 서버가 키가 저장될 서버다.</li></ol><p><strong>문제점</strong></p><ul><li>서버가 추가되거나 삭제될 때 파티션의 크기를 균등하게 유지하는게 불가능</li><li>키의 균등 분포를 달성하기가 어려움</li></ul><hr><h2 id="가상-노드"><a href="#가상-노드" class="headerlink" title="가상 노드"></a>가상 노드</h2><blockquote><p>기본 구현법의 문제를 해결하기 위한 방법<br>실제 노드를 가르키는 가상 노드를 만들어 해시 링에 균등하게 배치하는 방법</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;수평적 규모 확장을 위해서는 요청 또는 데이터를 서버로 균등하게 나누는 것이 중요&lt;br&gt;안정 해시는 이 목표를 달성하기 위해 보편적으로 사용하는 기술&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;안정-해시-설계의</summary>
      
    
    
    
    <category term="가상면접 사례로 배우는 대규모 시스템 설계기초" scheme="http://won0935.github.io/categories/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/"/>
    
    
    <category term="시스템설계" scheme="http://won0935.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%84%A4%EA%B3%84/"/>
    
    <category term="대규모설계" scheme="http://won0935.github.io/tags/%EB%8C%80%EA%B7%9C%EB%AA%A8%EC%84%A4%EA%B3%84/"/>
    
    <category term="안정해시" scheme="http://won0935.github.io/tags/%EC%95%88%EC%A0%95%ED%95%B4%EC%8B%9C/"/>
    
    <category term="가상노드" scheme="http://won0935.github.io/tags/%EA%B0%80%EC%83%81%EB%85%B8%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>시스템 설계 면접 공략법</title>
    <link href="http://won0935.github.io/2021/10/26/MassiveSystemDesign/Chapter-3/"/>
    <id>http://won0935.github.io/2021/10/26/MassiveSystemDesign/Chapter-3/</id>
    <published>2021-10-26T12:52:30.866Z</published>
    <updated>2021-11-28T08:43:29.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="효과적-면접을-위한-4단계-접근법"><a href="#효과적-면접을-위한-4단계-접근법" class="headerlink" title="효과적 면접을 위한 4단계 접근법"></a>효과적 면접을 위한 4단계 접근법</h1><h2 id="1-문제-이해-및-설계-범위-확정"><a href="#1-문제-이해-및-설계-범위-확정" class="headerlink" title="1. 문제 이해 및 설계 범위 확정"></a>1. 문제 이해 및 설계 범위 확정</h2><ul><li>구체적으로 어떤 기능들을 만들어야 하나</li><li>제품 사용자 수는 얼마나 되나</li><li>회사의 규모는 얼마나 빨리 커지리라 예상하나? 석 달, 여섯 달, 일년 뒤의 규모는 얼마가 되리라 예상하는가</li><li>회사가 주로 사용하는 기술 스택은 무엇인가</li><li>설계를 단순화 하기 위한 기존 서비스로는 어떤 것이 있는가</li></ul><p>→ 중요한 것은 모호함을 없에는 것</p><hr><h2 id="2-개략적인-설계안-제시-및-동의-구하기"><a href="#2-개략적인-설계안-제시-및-동의-구하기" class="headerlink" title="2. 개략적인 설계안 제시 및 동의 구하기"></a>2. 개략적인 설계안 제시 및 동의 구하기</h2><ul><li>청사진을 만들고 의견을 구하라</li><li>화이트보드에 다이어그램 그리기<ul><li>클라이언트, API, 웹서버, DB, 캐시, CDN, MQ 등</li></ul></li><li>청사진이 제약사항에 부합하는지 확인하라</li></ul><hr><h2 id="3-상세-설계"><a href="#3-상세-설계" class="headerlink" title="3. 상세 설계"></a>3. 상세 설계</h2><ul><li>시스템에서 전반적으로 달성해야 할 목표와 기능 범위 확인</li><li>전체 설계의 개략적 청사진 마련</li><li>해당 청사진에 대한 면접관의 의견 청취</li><li>상세 설계에서 집중해야 할 영역들 확인</li></ul><hr><h2 id="4-마무리"><a href="#4-마무리" class="headerlink" title="4. 마무리"></a>4. 마무리</h2><ul><li>개선점 찾기 ex&gt; 병목구간</li><li>설계 핵심 요약</li><li>운영 관련 이슈</li><li>메트릭, 모니터링, 로그, 배포 등</li><li>시스템 확장 방식</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;효과적-면접을-위한-4단계-접근법&quot;&gt;&lt;a href=&quot;#효과적-면접을-위한-4단계-접근법&quot; class=&quot;headerlink&quot; title=&quot;효과적 면접을 위한 4단계 접근법&quot;&gt;&lt;/a&gt;효과적 면접을 위한 4단계 접근법&lt;/h1&gt;&lt;h2 id=&quot;1</summary>
      
    
    
    
    <category term="가상면접 사례로 배우는 대규모 시스템 설계기초" scheme="http://won0935.github.io/categories/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/"/>
    
    
    <category term="시스템설계" scheme="http://won0935.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%84%A4%EA%B3%84/"/>
    
    <category term="대규모설계" scheme="http://won0935.github.io/tags/%EB%8C%80%EA%B7%9C%EB%AA%A8%EC%84%A4%EA%B3%84/"/>
    
    <category term="면접" scheme="http://won0935.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>키-값 저장소 설계</title>
    <link href="http://won0935.github.io/2021/10/26/MassiveSystemDesign/Chapter-6/"/>
    <id>http://won0935.github.io/2021/10/26/MassiveSystemDesign/Chapter-6/</id>
    <published>2021-10-26T12:52:30.860Z</published>
    <updated>2021-11-28T08:43:29.365Z</updated>
    
    <content type="html"><![CDATA[<ul><li>비 관계형 데이터베이스</li><li>고유식별자(key)를 키로 가짐</li><li>키와 값 사이의 연결 관계를 “키-값” 쌍(pair)라고 표현</li></ul><hr><h2 id="분산-키-값-저장소의-CAP-정리"><a href="#분산-키-값-저장소의-CAP-정리" class="headerlink" title="분산 키-값 저장소의 CAP 정리"></a>분산 키-값 저장소의 CAP 정리</h2><p>데이터 일관성(Consistency), 가용성(Availability), 파티션 감내성(Partition Tolerance)라 표현하며,<br>동시에 3가지 요구사항을 만족하는 것은 불가능하다는 정리</p><p><img src="https://user-images.githubusercontent.com/55419159/138880667-4a4e727b-07d8-44e0-99b5-14088750a4b2.png" alt="image"></p><hr><h3 id="용어-정리"><a href="#용어-정리" class="headerlink" title="용어 정리"></a>용어 정리</h3><p>데이터 일관성(Consistency)</p><ul><li>분산 시스템에 접속하는 모든 클라이언트는 어떤 노드에 접속했느냐에 관계 없이 언제나 같은 데이터를 보게 되어야 한다.</li></ul><p>가용성(Availability)</p><ul><li>분산 시스템에 접속하는 클라이언트는 일부 노드에 장애가 발생하더라도 항상 응답을 받을 수 있어야 한다.</li></ul><p>파티션 감내성(Partition Tolerance)</p><ul><li>파티션은 두 노드 사이에 통신 장애가 발생하였음을 의미한다. 파티션 감내는 네트워크에 파티션이 생기더라도 시스템은 계속 동작하여야 한다는 것을 뜻한다.</li></ul><hr><h3 id="분산-키-값-저장소가-가져야하는-기능"><a href="#분산-키-값-저장소가-가져야하는-기능" class="headerlink" title="분산 키-값 저장소가 가져야하는 기능"></a>분산 키-값 저장소가 가져야하는 기능</h3><table><thead><tr><th>목표/문제</th><th>기술</th></tr></thead><tbody><tr><td>대규모 데이터 저장</td><td>안정 해시를 사용해 서버들에 부하 분산</td></tr><tr><td>읽기 연산에 대한 높은 가용성 보장</td><td>여러 데이터센터에 다중화</td></tr><tr><td>쓰기 연산에 대한 높은 가용성 보장</td><td>버저닝 및 벡터 시계를 사용한 충돌 해소</td></tr><tr><td>데이터 파티션</td><td>안정 해시</td></tr><tr><td>점진적 규모 확장성</td><td>안정 해시</td></tr><tr><td>다양성(heterogeneity)</td><td>안정 해시</td></tr><tr><td>조절 가능한 데이터 일관성</td><td>정족수 합의</td></tr><tr><td>일시적 장애 처리</td><td>느슨한 정족수 프로토콜과 단서 후 임시 위탁</td></tr><tr><td>영구적 장애 처리</td><td>머클 트리</td></tr><tr><td>데이터 센터 장애 대응</td><td>여러 데이터 센터에 걸친 데이터 다중화</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;비 관계형 데이터베이스&lt;/li&gt;
&lt;li&gt;고유식별자(key)를 키로 가짐&lt;/li&gt;
&lt;li&gt;키와 값 사이의 연결 관계를 “키-값” 쌍(pair)라고 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;분산-키-값-저장소의-CAP-정리&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="가상면접 사례로 배우는 대규모 시스템 설계기초" scheme="http://won0935.github.io/categories/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/"/>
    
    
    <category term="시스템설계" scheme="http://won0935.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%84%A4%EA%B3%84/"/>
    
    <category term="대규모설계" scheme="http://won0935.github.io/tags/%EB%8C%80%EA%B7%9C%EB%AA%A8%EC%84%A4%EA%B3%84/"/>
    
    <category term="키값저장소" scheme="http://won0935.github.io/tags/%ED%82%A4%EA%B0%92%EC%A0%80%EC%9E%A5%EC%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>분산 시스템을 위한 유일 ID 생성기 설계</title>
    <link href="http://won0935.github.io/2021/10/26/MassiveSystemDesign/Chapter-7/"/>
    <id>http://won0935.github.io/2021/10/26/MassiveSystemDesign/Chapter-7/</id>
    <published>2021-10-26T12:52:30.860Z</published>
    <updated>2021-11-16T13:37:16.889Z</updated>
    
    <content type="html"><![CDATA[<p>데이터베이스의 PK 세팅 전략을 세우려 한다.</p><blockquote><p><del>그냥 DB에서 <code>auto_increment</code> 하면 되지 않나?</del><br>➡️ 분산되어있는 환경이기 때문에 불가능하다.</p></blockquote><p><strong>분산 DB 환경</strong>에선 생각보다 쉽지 않다.<br>방법을 찾아보자.</p><h2 id="1단계-문제이해-및-설계범위-확정"><a href="#1단계-문제이해-및-설계범위-확정" class="headerlink" title="1단계 : 문제이해 및 설계범위 확정"></a>1단계 : 문제이해 및 설계범위 확정</h2><blockquote><p><em>시스템 설계 면접의 첫 단계는 적절한 질문을 통해 모호함을 없애고 설계 방향을 정하는 것이다.</em></p></blockquote><h3 id="지원자-vs-면접관-질문-예시"><a href="#지원자-vs-면접관-질문-예시" class="headerlink" title="지원자 vs 면접관 질문 예시"></a>지원자 vs 면접관 질문 예시</h3><pre><code>지원자 : ID는 어떤 특성을 갖나요?면접관 : 유일해야 하고, 정렬 가능해야합니다지원자 : 새로운 레코드에 붙일 ID는 항상 1만큼 큰 값이여야 하나요?면접관 : ID의 값은 시간이 흐름에 따라 커지지만, 언제나 1씩 증가한다고는 할 수 없습니다.지원자 : ID는 숫자로만 구성되나요?면접관 : 그렇습니다.지원자 : 시스템의 규모는 어느정도인가요?면접관 : 초당 10,000 ID를 생성할 수 있어야 합니다.</code></pre><h3 id="질문을-통해-유추할-수-있는-요구사항은-다음과-같다"><a href="#질문을-통해-유추할-수-있는-요구사항은-다음과-같다" class="headerlink" title="질문을 통해 유추할 수 있는 요구사항은 다음과 같다."></a>질문을 통해 유추할 수 있는 요구사항은 다음과 같다.</h3><ol><li>ID는 <strong>유일</strong>해야 함</li><li>ID는 <strong>숫자</strong>로만 구성되어야 함</li><li>ID는 <strong>64비트</strong>로 표현될 수 있는 값이어야 함</li><li>ID는 발급날짜에 따라 <strong>정렬가능</strong>해야 함</li><li>초당 <strong>10,000</strong> ID 를 생성할 수 있어야 함</li></ol><hr><h2 id="2단계-개략적-설계안-제시-및-동의-구하기"><a href="#2단계-개략적-설계안-제시-및-동의-구하기" class="headerlink" title="2단계 : 개략적 설계안 제시 및 동의 구하기"></a>2단계 : 개략적 설계안 제시 및 동의 구하기</h2><p>분산 시스템 상에서 ID 생성 전략을 알아보고 각각의 <strong>장단점</strong>과 위의 질문에 대해 <strong>적합한 전략</strong>인지 살펴보자.</p><h3 id="다중-마스터-복제"><a href="#다중-마스터-복제" class="headerlink" title="다중 마스터 복제"></a>다중 마스터 복제</h3><p><img src="https://user-images.githubusercontent.com/55419159/141991101-f0657fa7-61da-4a9f-a90f-96a0b9223c44.png" alt="image"></p><p>이 접근법은 기본적으로 DB의 <code>auto_increment</code> 속성을 활용한다.<br>1만큼 증가시키는 것이 아닌 <code>k</code>(DB의 숫자)만큼 증가시킨다.</p><h4 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h4><ul><li>규모를 확장하거나 축소할 때 문제가 있음</li></ul><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><p><img src="https://user-images.githubusercontent.com/55419159/141992063-ab125f8f-f171-4b29-9e82-1786ba96c29b.png" alt="image"></p><p>UUID는 컴퓨터 시스템에 저장되는 정보를 유일하게 식별하기 위한 <strong>128비트 짜리 숫자</strong>이다.<br>UUID는 <strong>충돌 가능성</strong>이 지극히 낮다.(중복 UUID가 생길 확률은 초당 10억개의 UUID를 100년동안 만들어야 생김)</p><h4 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h4><ul><li>단순함</li><li>서버 간 조율이 필요하지 않으므로 동기화 이슈 없음</li><li>규모 확장 간편함</li></ul><h4 id="단점-1"><a href="#단점-1" class="headerlink" title="단점"></a>단점</h4><ul><li>128비트로 길다</li><li>시간 순으로 정렬할 수 없음</li><li>ID에 숫자가 아닌 값이 포함됨</li></ul><h3 id="티켓-서버"><a href="#티켓-서버" class="headerlink" title="티켓 서버"></a>티켓 서버</h3><p><img src="https://user-images.githubusercontent.com/55419159/141993088-4e1ddc61-a711-4e93-8199-43f4e8c1fe23.png" alt="image"></p><p>티켓 서버는 auto_increment 기능을 하는 중앙 서버에서 유일키를 생성해 내려주는 방식이다.</p><h4 id="장점-1"><a href="#장점-1" class="headerlink" title="장점"></a>장점</h4><ul><li>유일성이 보장되는 숫자로만 구성된 ID를 쉽게 만들 수 있음</li><li>구현이 쉽고 중소 규모의 어플리케이션에 적합</li></ul><h4 id="단점-2"><a href="#단점-2" class="headerlink" title="단점"></a>단점</h4><ul><li>티켓서버가 SPOF(Single-Point-of_Failure)가 된다는 엄청난 단점</li></ul><h3 id="트위터-스노플레이크-접근법"><a href="#트위터-스노플레이크-접근법" class="headerlink" title="트위터 스노플레이크 접근법"></a>트위터 스노플레이크 접근법</h3><p><img src="https://user-images.githubusercontent.com/55419159/141993807-cce535c1-5ff1-4a71-816a-932cd7f5aa89.png" alt="image"></p><br><p>이 전략은 기본적으로 <strong>ID를 여러 절로 분할</strong>한다.</p><table><thead><tr><th>섹션</th><th>설명</th></tr></thead><tbody><tr><td>사인 비트</td><td>1비트를 할당한다. 쓰임세가 없지만 음양수를 구별할 때 사용할 수 있다.</td></tr><tr><td>타임스탬프</td><td>41비트를 할당한다. 기원시각으로부터 몇 밀리초가 지났는 지 알 수 있는 값이다.</td></tr><tr><td>Work ID</td><td>10비트를 할당한다.</td></tr><tr><td>일련번호</td><td>12비트를 할당한다. 각 서버에서는 ID를 생성할 때마다 1씩 증가시킨다. 1밀리초가 경과했을 때 0으로 초기화한다.</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;데이터베이스의 PK 세팅 전략을 세우려 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;그냥 DB에서 &lt;code&gt;auto_increment&lt;/code&gt; 하면 되지 않나?&lt;/del&gt;&lt;br&gt;➡️ 분산되어있는 환경이기 때문에 불가능하다.&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="가상면접 사례로 배우는 대규모 시스템 설계기초" scheme="http://won0935.github.io/categories/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/"/>
    
    
    <category term="시스템설계" scheme="http://won0935.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%84%A4%EA%B3%84/"/>
    
    <category term="대규모설계" scheme="http://won0935.github.io/tags/%EB%8C%80%EA%B7%9C%EB%AA%A8%EC%84%A4%EA%B3%84/"/>
    
    <category term="Primary Key" scheme="http://won0935.github.io/tags/Primary-Key/"/>
    
    <category term="DataBase" scheme="http://won0935.github.io/tags/DataBase/"/>
    
  </entry>
  
  <entry>
    <title>개략적인 규모 추정</title>
    <link href="http://won0935.github.io/2021/10/26/MassiveSystemDesign/Chapter-1/"/>
    <id>http://won0935.github.io/2021/10/26/MassiveSystemDesign/Chapter-1/</id>
    <published>2021-10-26T12:52:30.856Z</published>
    <updated>2021-10-26T12:52:30.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2의-제곱-수"><a href="#2의-제곱-수" class="headerlink" title="2의 제곱 수"></a>2의 제곱 수</h1><ul><li>최소단위는 1바이트, 8비트</li><li>아스키 문자 하나 메모리크기가 1바이트</li></ul><h1 id="모든-프로그래머가-알아야-하는-응답-지연-값"><a href="#모든-프로그래머가-알아야-하는-응답-지연-값" class="headerlink" title="모든 프로그래머가 알아야 하는 응답 지연 값"></a>모든 프로그래머가 알아야 하는 응답 지연 값</h1><ul><li>메모리는 빠르지만 디스크는 아직도 느리다</li><li>디스크 탐색은 가능한 한 피하라</li><li>단순한 압축 알고리즘은 빠르다</li><li>데이터를 인터넷으로 전송하기 전에 가능하면 압축하라</li><li>데이터 센터는 보통 여러 지역에 분산되어있고, 센터들 간에 데이터를 주고 받는 데는 시간이 걸린다</li></ul><h1 id="가용성에-관계된-수치들"><a href="#가용성에-관계된-수치들" class="headerlink" title="가용성에 관계된 수치들"></a>가용성에 관계된 수치들</h1><blockquote><p>고가용성</p><p>시스템이 오랜 기간동안 지속적으로 중단 없이 운영될 수 있는 능력</p></blockquote><hr><h1 id="예제-트위터-QPS와-저장소-요구량-추정"><a href="#예제-트위터-QPS와-저장소-요구량-추정" class="headerlink" title="예제: 트위터 QPS와 저장소 요구량 추정"></a>예제: 트위터 QPS와 저장소 요구량 추정</h1><h2 id="가정"><a href="#가정" class="headerlink" title="가정"></a>가정</h2><ul><li>월간 능동 사용자(mau) 3억 명</li><li>50%가 매일 사용</li><li>각 사용자는 매일 2건</li><li>미디어 포함 10%</li><li>데이터는 5년 보관</li></ul><h2 id="추정"><a href="#추정" class="headerlink" title="추정"></a>추정</h2><ul><li>QPS(Query Per Second) 추정치</li><li>일간 능동 사용자(dau) = 3억 x 50% = 1.5억</li><li>QPS = 1.5억 x 2건 / 24시간 / 3600초 = 약 3500</li><li>최대 QPS = 2 x QPS = 약 7000</li></ul><h2 id="미디어-저장을-위한-저장소-요구량"><a href="#미디어-저장을-위한-저장소-요구량" class="headerlink" title="미디어 저장을 위한 저장소 요구량"></a>미디어 저장을 위한 저장소 요구량</h2><ul><li>평균 크기<ul><li>id = 64바이트</li><li>body = 140바이트</li><li>미디어 = 1MB</li></ul></li><li>미디어 저장소 요구량 : 1.5억 x 2 x 10% x 1MB = 30TB/day</li><li>5년간 미디어를 보관하기 위한 저장소 요구량 : 30TB x 365 x 5 = 약 55PB</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2의-제곱-수&quot;&gt;&lt;a href=&quot;#2의-제곱-수&quot; class=&quot;headerlink&quot; title=&quot;2의 제곱 수&quot;&gt;&lt;/a&gt;2의 제곱 수&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;최소단위는 1바이트, 8비트&lt;/li&gt;
&lt;li&gt;아스키 문자 하나 메모리크기가 1바</summary>
      
    
    
    
    <category term="가상면접 사례로 배우는 대규모 시스템 설계기초" scheme="http://won0935.github.io/categories/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84%EA%B8%B0%EC%B4%88/"/>
    
    
    <category term="시스템설계" scheme="http://won0935.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%84%A4%EA%B3%84/"/>
    
    <category term="대규모설계" scheme="http://won0935.github.io/tags/%EB%8C%80%EA%B7%9C%EB%AA%A8%EC%84%A4%EA%B3%84/"/>
    
  </entry>
  
</feed>
